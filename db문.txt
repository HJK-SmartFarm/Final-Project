-- 데이터베이스 생성 (이미 있다면 생략)
CREATE DATABASE test_db CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;

-- 사용자 생성 (이미 있다면 생략)
CREATE USER 'flaskuser'@'localhost' IDENTIFIED BY '비밀번호';

-- 권한 부여 (데이터베이스 전체에)
GRANT ALL PRIVILEGES ON test_db.* TO 'flaskuser'@'localhost';

FLUSH PRIVILEGES;

---------------------------------------------
SQLAlchemy ORM 주요 쿼리 구문 정리

1. 기본 조회
.query(Model) — 쿼리 시작

.all() — 조건에 맞는 전체 결과 리스트 반환

.first() — 조건에 맞는 첫 번째 결과 반환 (없으면 None)

.get(pk) — 기본키로 1개 행 조회

.one() — 결과가 정확히 1개일 때만 반환, 아니면 예외 발생

.one_or_none() — 0개 또는 1개인 경우 반환, 여러 개면 예외

2. 조건 지정 — WHERE
.filter(condition) — SQL WHERE 조건, 여러 번 호출 가능 (AND 조건)

.filter_by(**kwargs) — 간단한 필드 비교 조건, 키워드 인자 방식 (AND 조건)

Model.field == value — 조건 표현식

Model.field != value

Model.field > value

Model.field >= value

Model.field < value

Model.field <= value

Model.field.in_([list]) — IN 조건

Model.field.notin_([list])

Model.field.like('pattern') — LIKE 조건

Model.field.ilike('pattern') — 대소문자 구분 없는 LIKE (PostgreSQL)

and_(cond1, cond2, ...) — AND 조건 묶음

or_(cond1, cond2, ...) — OR 조건 묶음

not_(condition) — NOT 조건

3. 컬럼 및 필드 선택
.with_entities(Model.field1, Model.field2, ...) — 특정 컬럼만 선택 (select 특정 컬럼)

.add_columns(Model.field) — 기존 쿼리에 컬럼 추가

4. 정렬 — ORDER BY
.order_by(Model.field.asc()) — 오름차순 정렬 (기본)

.order_by(Model.field.desc()) — 내림차순 정렬

.order_by(Model.field1, Model.field2.desc()) — 여러 필드 정렬

5. 그룹화 및 집계 — GROUP BY, HAVING
.group_by(Model.field) — 그룹화

.having(condition) — 그룹별 조건 (HAVING)

6. 제한 및 오프셋 — LIMIT, OFFSET
.limit(n) — 결과 개수 제한

.offset(n) — 결과 건너뛰기 (페이징에 유용)

7. 조인 — JOIN
.join(OtherModel, Model.field == OtherModel.field) — 내부 조인 (INNER JOIN)

.outerjoin(OtherModel, ...) — 외부 조인 (LEFT OUTER JOIN)

.select_from(Model) — 조인 시작 모델 명시

8. 서브쿼리
.subquery() — 서브쿼리 생성

.exists() — 서브쿼리 존재 여부 검사

session.query(Model).filter(Model.field.in_(subquery)) — 서브쿼리 결과 활용

9. 기타 유용 메서드
.distinct() — 중복 제거

.count() — 행 개수 반환 (SQL COUNT)

.scalar() — 단일 컬럼 단일 값 반환

.all() — 전체 리스트 반환

.first() — 첫 번째 결과 반환

.one() — 정확히 1개 결과 반환

.one_or_none() — 0 또는 1개 결과 반환

10. 플러시 및 커밋 (데이터 수정 후)
session.add(obj) — 신규 객체 추가

session.delete(obj) — 객체 삭제

session.commit() — 변경사항 DB 반영

session.flush() — 변경사항 임시 반영 (커밋 전)