
Smart_farm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c71c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000730  0800c8f0  0800c8f0  0000d8f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d020  0800d020  0000f220  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800d020  0800d020  0000e020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d028  0800d028  0000f220  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d028  0800d028  0000e028  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d02c  0800d02c  0000e02c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000220  20000000  0800d030  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000059c  20000220  0800d250  0000f220  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200007bc  0800d250  0000f7bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f220  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015deb  00000000  00000000  0000f250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000035e8  00000000  00000000  0002503b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013a0  00000000  00000000  00028628  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f32  00000000  00000000  000299c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004f1c  00000000  00000000  0002a8fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018a89  00000000  00000000  0002f816  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e44cb  00000000  00000000  0004829f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012c76a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000068d0  00000000  00000000  0012c7b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  00133080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000220 	.word	0x20000220
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800c8d4 	.word	0x0800c8d4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000224 	.word	0x20000224
 800020c:	0800c8d4 	.word	0x0800c8d4

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <strlen>:
 80002d0:	4603      	mov	r3, r0
 80002d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	d1fb      	bne.n	80002d2 <strlen+0x2>
 80002da:	1a18      	subs	r0, r3, r0
 80002dc:	3801      	subs	r0, #1
 80002de:	4770      	bx	lr

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	@ 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_d2uiz>:
 8000c08:	004a      	lsls	r2, r1, #1
 8000c0a:	d211      	bcs.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c0c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c10:	d211      	bcs.n	8000c36 <__aeabi_d2uiz+0x2e>
 8000c12:	d50d      	bpl.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c14:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c1c:	d40e      	bmi.n	8000c3c <__aeabi_d2uiz+0x34>
 8000c1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c2a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c2e:	4770      	bx	lr
 8000c30:	f04f 0000 	mov.w	r0, #0
 8000c34:	4770      	bx	lr
 8000c36:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c3a:	d102      	bne.n	8000c42 <__aeabi_d2uiz+0x3a>
 8000c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c40:	4770      	bx	lr
 8000c42:	f04f 0000 	mov.w	r0, #0
 8000c46:	4770      	bx	lr

08000c48 <__aeabi_d2f>:
 8000c48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c4c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c50:	bf24      	itt	cs
 8000c52:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c56:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c5a:	d90d      	bls.n	8000c78 <__aeabi_d2f+0x30>
 8000c5c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c60:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c64:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c68:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c6c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c70:	bf08      	it	eq
 8000c72:	f020 0001 	biceq.w	r0, r0, #1
 8000c76:	4770      	bx	lr
 8000c78:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c7c:	d121      	bne.n	8000cc2 <__aeabi_d2f+0x7a>
 8000c7e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c82:	bfbc      	itt	lt
 8000c84:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c88:	4770      	bxlt	lr
 8000c8a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c8e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c92:	f1c2 0218 	rsb	r2, r2, #24
 8000c96:	f1c2 0c20 	rsb	ip, r2, #32
 8000c9a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c9e:	fa20 f002 	lsr.w	r0, r0, r2
 8000ca2:	bf18      	it	ne
 8000ca4:	f040 0001 	orrne.w	r0, r0, #1
 8000ca8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cac:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cb0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cb4:	ea40 000c 	orr.w	r0, r0, ip
 8000cb8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cbc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cc0:	e7cc      	b.n	8000c5c <__aeabi_d2f+0x14>
 8000cc2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cc6:	d107      	bne.n	8000cd8 <__aeabi_d2f+0x90>
 8000cc8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ccc:	bf1e      	ittt	ne
 8000cce:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cd2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cd6:	4770      	bxne	lr
 8000cd8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cdc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ce0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_uldivmod>:
 8000ce8:	b953      	cbnz	r3, 8000d00 <__aeabi_uldivmod+0x18>
 8000cea:	b94a      	cbnz	r2, 8000d00 <__aeabi_uldivmod+0x18>
 8000cec:	2900      	cmp	r1, #0
 8000cee:	bf08      	it	eq
 8000cf0:	2800      	cmpeq	r0, #0
 8000cf2:	bf1c      	itt	ne
 8000cf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cfc:	f000 b9be 	b.w	800107c <__aeabi_idiv0>
 8000d00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d08:	f000 f83c 	bl	8000d84 <__udivmoddi4>
 8000d0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d14:	b004      	add	sp, #16
 8000d16:	4770      	bx	lr

08000d18 <__aeabi_d2lz>:
 8000d18:	b538      	push	{r3, r4, r5, lr}
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	4604      	mov	r4, r0
 8000d20:	460d      	mov	r5, r1
 8000d22:	f7ff ff0b 	bl	8000b3c <__aeabi_dcmplt>
 8000d26:	b928      	cbnz	r0, 8000d34 <__aeabi_d2lz+0x1c>
 8000d28:	4620      	mov	r0, r4
 8000d2a:	4629      	mov	r1, r5
 8000d2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d30:	f000 b80a 	b.w	8000d48 <__aeabi_d2ulz>
 8000d34:	4620      	mov	r0, r4
 8000d36:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d3a:	f000 f805 	bl	8000d48 <__aeabi_d2ulz>
 8000d3e:	4240      	negs	r0, r0
 8000d40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d44:	bd38      	pop	{r3, r4, r5, pc}
 8000d46:	bf00      	nop

08000d48 <__aeabi_d2ulz>:
 8000d48:	b5d0      	push	{r4, r6, r7, lr}
 8000d4a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d7c <__aeabi_d2ulz+0x34>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	4606      	mov	r6, r0
 8000d50:	460f      	mov	r7, r1
 8000d52:	f7ff fc81 	bl	8000658 <__aeabi_dmul>
 8000d56:	f7ff ff57 	bl	8000c08 <__aeabi_d2uiz>
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	f7ff fc02 	bl	8000564 <__aeabi_ui2d>
 8000d60:	4b07      	ldr	r3, [pc, #28]	@ (8000d80 <__aeabi_d2ulz+0x38>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	f7ff fc78 	bl	8000658 <__aeabi_dmul>
 8000d68:	4602      	mov	r2, r0
 8000d6a:	460b      	mov	r3, r1
 8000d6c:	4630      	mov	r0, r6
 8000d6e:	4639      	mov	r1, r7
 8000d70:	f7ff faba 	bl	80002e8 <__aeabi_dsub>
 8000d74:	f7ff ff48 	bl	8000c08 <__aeabi_d2uiz>
 8000d78:	4621      	mov	r1, r4
 8000d7a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d7c:	3df00000 	.word	0x3df00000
 8000d80:	41f00000 	.word	0x41f00000

08000d84 <__udivmoddi4>:
 8000d84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d88:	9d08      	ldr	r5, [sp, #32]
 8000d8a:	468e      	mov	lr, r1
 8000d8c:	4604      	mov	r4, r0
 8000d8e:	4688      	mov	r8, r1
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d14a      	bne.n	8000e2a <__udivmoddi4+0xa6>
 8000d94:	428a      	cmp	r2, r1
 8000d96:	4617      	mov	r7, r2
 8000d98:	d962      	bls.n	8000e60 <__udivmoddi4+0xdc>
 8000d9a:	fab2 f682 	clz	r6, r2
 8000d9e:	b14e      	cbz	r6, 8000db4 <__udivmoddi4+0x30>
 8000da0:	f1c6 0320 	rsb	r3, r6, #32
 8000da4:	fa01 f806 	lsl.w	r8, r1, r6
 8000da8:	fa20 f303 	lsr.w	r3, r0, r3
 8000dac:	40b7      	lsls	r7, r6
 8000dae:	ea43 0808 	orr.w	r8, r3, r8
 8000db2:	40b4      	lsls	r4, r6
 8000db4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000db8:	fa1f fc87 	uxth.w	ip, r7
 8000dbc:	fbb8 f1fe 	udiv	r1, r8, lr
 8000dc0:	0c23      	lsrs	r3, r4, #16
 8000dc2:	fb0e 8811 	mls	r8, lr, r1, r8
 8000dc6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dca:	fb01 f20c 	mul.w	r2, r1, ip
 8000dce:	429a      	cmp	r2, r3
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0x62>
 8000dd2:	18fb      	adds	r3, r7, r3
 8000dd4:	f101 30ff 	add.w	r0, r1, #4294967295
 8000dd8:	f080 80ea 	bcs.w	8000fb0 <__udivmoddi4+0x22c>
 8000ddc:	429a      	cmp	r2, r3
 8000dde:	f240 80e7 	bls.w	8000fb0 <__udivmoddi4+0x22c>
 8000de2:	3902      	subs	r1, #2
 8000de4:	443b      	add	r3, r7
 8000de6:	1a9a      	subs	r2, r3, r2
 8000de8:	b2a3      	uxth	r3, r4
 8000dea:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dee:	fb0e 2210 	mls	r2, lr, r0, r2
 8000df2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000df6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000dfa:	459c      	cmp	ip, r3
 8000dfc:	d909      	bls.n	8000e12 <__udivmoddi4+0x8e>
 8000dfe:	18fb      	adds	r3, r7, r3
 8000e00:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e04:	f080 80d6 	bcs.w	8000fb4 <__udivmoddi4+0x230>
 8000e08:	459c      	cmp	ip, r3
 8000e0a:	f240 80d3 	bls.w	8000fb4 <__udivmoddi4+0x230>
 8000e0e:	443b      	add	r3, r7
 8000e10:	3802      	subs	r0, #2
 8000e12:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e16:	eba3 030c 	sub.w	r3, r3, ip
 8000e1a:	2100      	movs	r1, #0
 8000e1c:	b11d      	cbz	r5, 8000e26 <__udivmoddi4+0xa2>
 8000e1e:	40f3      	lsrs	r3, r6
 8000e20:	2200      	movs	r2, #0
 8000e22:	e9c5 3200 	strd	r3, r2, [r5]
 8000e26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e2a:	428b      	cmp	r3, r1
 8000e2c:	d905      	bls.n	8000e3a <__udivmoddi4+0xb6>
 8000e2e:	b10d      	cbz	r5, 8000e34 <__udivmoddi4+0xb0>
 8000e30:	e9c5 0100 	strd	r0, r1, [r5]
 8000e34:	2100      	movs	r1, #0
 8000e36:	4608      	mov	r0, r1
 8000e38:	e7f5      	b.n	8000e26 <__udivmoddi4+0xa2>
 8000e3a:	fab3 f183 	clz	r1, r3
 8000e3e:	2900      	cmp	r1, #0
 8000e40:	d146      	bne.n	8000ed0 <__udivmoddi4+0x14c>
 8000e42:	4573      	cmp	r3, lr
 8000e44:	d302      	bcc.n	8000e4c <__udivmoddi4+0xc8>
 8000e46:	4282      	cmp	r2, r0
 8000e48:	f200 8105 	bhi.w	8001056 <__udivmoddi4+0x2d2>
 8000e4c:	1a84      	subs	r4, r0, r2
 8000e4e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e52:	2001      	movs	r0, #1
 8000e54:	4690      	mov	r8, r2
 8000e56:	2d00      	cmp	r5, #0
 8000e58:	d0e5      	beq.n	8000e26 <__udivmoddi4+0xa2>
 8000e5a:	e9c5 4800 	strd	r4, r8, [r5]
 8000e5e:	e7e2      	b.n	8000e26 <__udivmoddi4+0xa2>
 8000e60:	2a00      	cmp	r2, #0
 8000e62:	f000 8090 	beq.w	8000f86 <__udivmoddi4+0x202>
 8000e66:	fab2 f682 	clz	r6, r2
 8000e6a:	2e00      	cmp	r6, #0
 8000e6c:	f040 80a4 	bne.w	8000fb8 <__udivmoddi4+0x234>
 8000e70:	1a8a      	subs	r2, r1, r2
 8000e72:	0c03      	lsrs	r3, r0, #16
 8000e74:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e78:	b280      	uxth	r0, r0
 8000e7a:	b2bc      	uxth	r4, r7
 8000e7c:	2101      	movs	r1, #1
 8000e7e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e82:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e86:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e8a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e8e:	429a      	cmp	r2, r3
 8000e90:	d907      	bls.n	8000ea2 <__udivmoddi4+0x11e>
 8000e92:	18fb      	adds	r3, r7, r3
 8000e94:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e98:	d202      	bcs.n	8000ea0 <__udivmoddi4+0x11c>
 8000e9a:	429a      	cmp	r2, r3
 8000e9c:	f200 80e0 	bhi.w	8001060 <__udivmoddi4+0x2dc>
 8000ea0:	46c4      	mov	ip, r8
 8000ea2:	1a9b      	subs	r3, r3, r2
 8000ea4:	fbb3 f2fe 	udiv	r2, r3, lr
 8000ea8:	fb0e 3312 	mls	r3, lr, r2, r3
 8000eac:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000eb0:	fb02 f404 	mul.w	r4, r2, r4
 8000eb4:	429c      	cmp	r4, r3
 8000eb6:	d907      	bls.n	8000ec8 <__udivmoddi4+0x144>
 8000eb8:	18fb      	adds	r3, r7, r3
 8000eba:	f102 30ff 	add.w	r0, r2, #4294967295
 8000ebe:	d202      	bcs.n	8000ec6 <__udivmoddi4+0x142>
 8000ec0:	429c      	cmp	r4, r3
 8000ec2:	f200 80ca 	bhi.w	800105a <__udivmoddi4+0x2d6>
 8000ec6:	4602      	mov	r2, r0
 8000ec8:	1b1b      	subs	r3, r3, r4
 8000eca:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000ece:	e7a5      	b.n	8000e1c <__udivmoddi4+0x98>
 8000ed0:	f1c1 0620 	rsb	r6, r1, #32
 8000ed4:	408b      	lsls	r3, r1
 8000ed6:	fa22 f706 	lsr.w	r7, r2, r6
 8000eda:	431f      	orrs	r7, r3
 8000edc:	fa0e f401 	lsl.w	r4, lr, r1
 8000ee0:	fa20 f306 	lsr.w	r3, r0, r6
 8000ee4:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ee8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000eec:	4323      	orrs	r3, r4
 8000eee:	fa00 f801 	lsl.w	r8, r0, r1
 8000ef2:	fa1f fc87 	uxth.w	ip, r7
 8000ef6:	fbbe f0f9 	udiv	r0, lr, r9
 8000efa:	0c1c      	lsrs	r4, r3, #16
 8000efc:	fb09 ee10 	mls	lr, r9, r0, lr
 8000f00:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000f04:	fb00 fe0c 	mul.w	lr, r0, ip
 8000f08:	45a6      	cmp	lr, r4
 8000f0a:	fa02 f201 	lsl.w	r2, r2, r1
 8000f0e:	d909      	bls.n	8000f24 <__udivmoddi4+0x1a0>
 8000f10:	193c      	adds	r4, r7, r4
 8000f12:	f100 3aff 	add.w	sl, r0, #4294967295
 8000f16:	f080 809c 	bcs.w	8001052 <__udivmoddi4+0x2ce>
 8000f1a:	45a6      	cmp	lr, r4
 8000f1c:	f240 8099 	bls.w	8001052 <__udivmoddi4+0x2ce>
 8000f20:	3802      	subs	r0, #2
 8000f22:	443c      	add	r4, r7
 8000f24:	eba4 040e 	sub.w	r4, r4, lr
 8000f28:	fa1f fe83 	uxth.w	lr, r3
 8000f2c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f30:	fb09 4413 	mls	r4, r9, r3, r4
 8000f34:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000f38:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f3c:	45a4      	cmp	ip, r4
 8000f3e:	d908      	bls.n	8000f52 <__udivmoddi4+0x1ce>
 8000f40:	193c      	adds	r4, r7, r4
 8000f42:	f103 3eff 	add.w	lr, r3, #4294967295
 8000f46:	f080 8082 	bcs.w	800104e <__udivmoddi4+0x2ca>
 8000f4a:	45a4      	cmp	ip, r4
 8000f4c:	d97f      	bls.n	800104e <__udivmoddi4+0x2ca>
 8000f4e:	3b02      	subs	r3, #2
 8000f50:	443c      	add	r4, r7
 8000f52:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f56:	eba4 040c 	sub.w	r4, r4, ip
 8000f5a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f5e:	4564      	cmp	r4, ip
 8000f60:	4673      	mov	r3, lr
 8000f62:	46e1      	mov	r9, ip
 8000f64:	d362      	bcc.n	800102c <__udivmoddi4+0x2a8>
 8000f66:	d05f      	beq.n	8001028 <__udivmoddi4+0x2a4>
 8000f68:	b15d      	cbz	r5, 8000f82 <__udivmoddi4+0x1fe>
 8000f6a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f6e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f72:	fa04 f606 	lsl.w	r6, r4, r6
 8000f76:	fa22 f301 	lsr.w	r3, r2, r1
 8000f7a:	431e      	orrs	r6, r3
 8000f7c:	40cc      	lsrs	r4, r1
 8000f7e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f82:	2100      	movs	r1, #0
 8000f84:	e74f      	b.n	8000e26 <__udivmoddi4+0xa2>
 8000f86:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f8a:	0c01      	lsrs	r1, r0, #16
 8000f8c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f90:	b280      	uxth	r0, r0
 8000f92:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f96:	463b      	mov	r3, r7
 8000f98:	4638      	mov	r0, r7
 8000f9a:	463c      	mov	r4, r7
 8000f9c:	46b8      	mov	r8, r7
 8000f9e:	46be      	mov	lr, r7
 8000fa0:	2620      	movs	r6, #32
 8000fa2:	fbb1 f1f7 	udiv	r1, r1, r7
 8000fa6:	eba2 0208 	sub.w	r2, r2, r8
 8000faa:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000fae:	e766      	b.n	8000e7e <__udivmoddi4+0xfa>
 8000fb0:	4601      	mov	r1, r0
 8000fb2:	e718      	b.n	8000de6 <__udivmoddi4+0x62>
 8000fb4:	4610      	mov	r0, r2
 8000fb6:	e72c      	b.n	8000e12 <__udivmoddi4+0x8e>
 8000fb8:	f1c6 0220 	rsb	r2, r6, #32
 8000fbc:	fa2e f302 	lsr.w	r3, lr, r2
 8000fc0:	40b7      	lsls	r7, r6
 8000fc2:	40b1      	lsls	r1, r6
 8000fc4:	fa20 f202 	lsr.w	r2, r0, r2
 8000fc8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000fcc:	430a      	orrs	r2, r1
 8000fce:	fbb3 f8fe 	udiv	r8, r3, lr
 8000fd2:	b2bc      	uxth	r4, r7
 8000fd4:	fb0e 3318 	mls	r3, lr, r8, r3
 8000fd8:	0c11      	lsrs	r1, r2, #16
 8000fda:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fde:	fb08 f904 	mul.w	r9, r8, r4
 8000fe2:	40b0      	lsls	r0, r6
 8000fe4:	4589      	cmp	r9, r1
 8000fe6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000fea:	b280      	uxth	r0, r0
 8000fec:	d93e      	bls.n	800106c <__udivmoddi4+0x2e8>
 8000fee:	1879      	adds	r1, r7, r1
 8000ff0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000ff4:	d201      	bcs.n	8000ffa <__udivmoddi4+0x276>
 8000ff6:	4589      	cmp	r9, r1
 8000ff8:	d81f      	bhi.n	800103a <__udivmoddi4+0x2b6>
 8000ffa:	eba1 0109 	sub.w	r1, r1, r9
 8000ffe:	fbb1 f9fe 	udiv	r9, r1, lr
 8001002:	fb09 f804 	mul.w	r8, r9, r4
 8001006:	fb0e 1119 	mls	r1, lr, r9, r1
 800100a:	b292      	uxth	r2, r2
 800100c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001010:	4542      	cmp	r2, r8
 8001012:	d229      	bcs.n	8001068 <__udivmoddi4+0x2e4>
 8001014:	18ba      	adds	r2, r7, r2
 8001016:	f109 31ff 	add.w	r1, r9, #4294967295
 800101a:	d2c4      	bcs.n	8000fa6 <__udivmoddi4+0x222>
 800101c:	4542      	cmp	r2, r8
 800101e:	d2c2      	bcs.n	8000fa6 <__udivmoddi4+0x222>
 8001020:	f1a9 0102 	sub.w	r1, r9, #2
 8001024:	443a      	add	r2, r7
 8001026:	e7be      	b.n	8000fa6 <__udivmoddi4+0x222>
 8001028:	45f0      	cmp	r8, lr
 800102a:	d29d      	bcs.n	8000f68 <__udivmoddi4+0x1e4>
 800102c:	ebbe 0302 	subs.w	r3, lr, r2
 8001030:	eb6c 0c07 	sbc.w	ip, ip, r7
 8001034:	3801      	subs	r0, #1
 8001036:	46e1      	mov	r9, ip
 8001038:	e796      	b.n	8000f68 <__udivmoddi4+0x1e4>
 800103a:	eba7 0909 	sub.w	r9, r7, r9
 800103e:	4449      	add	r1, r9
 8001040:	f1a8 0c02 	sub.w	ip, r8, #2
 8001044:	fbb1 f9fe 	udiv	r9, r1, lr
 8001048:	fb09 f804 	mul.w	r8, r9, r4
 800104c:	e7db      	b.n	8001006 <__udivmoddi4+0x282>
 800104e:	4673      	mov	r3, lr
 8001050:	e77f      	b.n	8000f52 <__udivmoddi4+0x1ce>
 8001052:	4650      	mov	r0, sl
 8001054:	e766      	b.n	8000f24 <__udivmoddi4+0x1a0>
 8001056:	4608      	mov	r0, r1
 8001058:	e6fd      	b.n	8000e56 <__udivmoddi4+0xd2>
 800105a:	443b      	add	r3, r7
 800105c:	3a02      	subs	r2, #2
 800105e:	e733      	b.n	8000ec8 <__udivmoddi4+0x144>
 8001060:	f1ac 0c02 	sub.w	ip, ip, #2
 8001064:	443b      	add	r3, r7
 8001066:	e71c      	b.n	8000ea2 <__udivmoddi4+0x11e>
 8001068:	4649      	mov	r1, r9
 800106a:	e79c      	b.n	8000fa6 <__udivmoddi4+0x222>
 800106c:	eba1 0109 	sub.w	r1, r1, r9
 8001070:	46c4      	mov	ip, r8
 8001072:	fbb1 f9fe 	udiv	r9, r1, lr
 8001076:	fb09 f804 	mul.w	r8, r9, r4
 800107a:	e7c4      	b.n	8001006 <__udivmoddi4+0x282>

0800107c <__aeabi_idiv0>:
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop

08001080 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b084      	sub	sp, #16
 8001084:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001086:	463b      	mov	r3, r7
 8001088:	2200      	movs	r2, #0
 800108a:	601a      	str	r2, [r3, #0]
 800108c:	605a      	str	r2, [r3, #4]
 800108e:	609a      	str	r2, [r3, #8]
 8001090:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001092:	4b21      	ldr	r3, [pc, #132]	@ (8001118 <MX_ADC1_Init+0x98>)
 8001094:	4a21      	ldr	r2, [pc, #132]	@ (800111c <MX_ADC1_Init+0x9c>)
 8001096:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001098:	4b1f      	ldr	r3, [pc, #124]	@ (8001118 <MX_ADC1_Init+0x98>)
 800109a:	2200      	movs	r2, #0
 800109c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800109e:	4b1e      	ldr	r3, [pc, #120]	@ (8001118 <MX_ADC1_Init+0x98>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80010a4:	4b1c      	ldr	r3, [pc, #112]	@ (8001118 <MX_ADC1_Init+0x98>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80010aa:	4b1b      	ldr	r3, [pc, #108]	@ (8001118 <MX_ADC1_Init+0x98>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010b0:	4b19      	ldr	r3, [pc, #100]	@ (8001118 <MX_ADC1_Init+0x98>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010b8:	4b17      	ldr	r3, [pc, #92]	@ (8001118 <MX_ADC1_Init+0x98>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010be:	4b16      	ldr	r3, [pc, #88]	@ (8001118 <MX_ADC1_Init+0x98>)
 80010c0:	4a17      	ldr	r2, [pc, #92]	@ (8001120 <MX_ADC1_Init+0xa0>)
 80010c2:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010c4:	4b14      	ldr	r3, [pc, #80]	@ (8001118 <MX_ADC1_Init+0x98>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80010ca:	4b13      	ldr	r3, [pc, #76]	@ (8001118 <MX_ADC1_Init+0x98>)
 80010cc:	2201      	movs	r2, #1
 80010ce:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80010d0:	4b11      	ldr	r3, [pc, #68]	@ (8001118 <MX_ADC1_Init+0x98>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010d8:	4b0f      	ldr	r3, [pc, #60]	@ (8001118 <MX_ADC1_Init+0x98>)
 80010da:	2201      	movs	r2, #1
 80010dc:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010de:	480e      	ldr	r0, [pc, #56]	@ (8001118 <MX_ADC1_Init+0x98>)
 80010e0:	f002 fac2 	bl	8003668 <HAL_ADC_Init>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80010ea:	f001 fb3f 	bl	800276c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80010ee:	2300      	movs	r3, #0
 80010f0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80010f2:	2301      	movs	r3, #1
 80010f4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80010f6:	2300      	movs	r3, #0
 80010f8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010fa:	463b      	mov	r3, r7
 80010fc:	4619      	mov	r1, r3
 80010fe:	4806      	ldr	r0, [pc, #24]	@ (8001118 <MX_ADC1_Init+0x98>)
 8001100:	f002 fc94 	bl	8003a2c <HAL_ADC_ConfigChannel>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800110a:	f001 fb2f 	bl	800276c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800110e:	bf00      	nop
 8001110:	3710      	adds	r7, #16
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	2000023c 	.word	0x2000023c
 800111c:	40012000 	.word	0x40012000
 8001120:	0f000001 	.word	0x0f000001

08001124 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b08a      	sub	sp, #40	@ 0x28
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800112c:	f107 0314 	add.w	r3, r7, #20
 8001130:	2200      	movs	r2, #0
 8001132:	601a      	str	r2, [r3, #0]
 8001134:	605a      	str	r2, [r3, #4]
 8001136:	609a      	str	r2, [r3, #8]
 8001138:	60da      	str	r2, [r3, #12]
 800113a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4a17      	ldr	r2, [pc, #92]	@ (80011a0 <HAL_ADC_MspInit+0x7c>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d127      	bne.n	8001196 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001146:	2300      	movs	r3, #0
 8001148:	613b      	str	r3, [r7, #16]
 800114a:	4b16      	ldr	r3, [pc, #88]	@ (80011a4 <HAL_ADC_MspInit+0x80>)
 800114c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800114e:	4a15      	ldr	r2, [pc, #84]	@ (80011a4 <HAL_ADC_MspInit+0x80>)
 8001150:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001154:	6453      	str	r3, [r2, #68]	@ 0x44
 8001156:	4b13      	ldr	r3, [pc, #76]	@ (80011a4 <HAL_ADC_MspInit+0x80>)
 8001158:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800115a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800115e:	613b      	str	r3, [r7, #16]
 8001160:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001162:	2300      	movs	r3, #0
 8001164:	60fb      	str	r3, [r7, #12]
 8001166:	4b0f      	ldr	r3, [pc, #60]	@ (80011a4 <HAL_ADC_MspInit+0x80>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800116a:	4a0e      	ldr	r2, [pc, #56]	@ (80011a4 <HAL_ADC_MspInit+0x80>)
 800116c:	f043 0301 	orr.w	r3, r3, #1
 8001170:	6313      	str	r3, [r2, #48]	@ 0x30
 8001172:	4b0c      	ldr	r3, [pc, #48]	@ (80011a4 <HAL_ADC_MspInit+0x80>)
 8001174:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001176:	f003 0301 	and.w	r3, r3, #1
 800117a:	60fb      	str	r3, [r7, #12]
 800117c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 800117e:	2313      	movs	r3, #19
 8001180:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001182:	2303      	movs	r3, #3
 8001184:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001186:	2300      	movs	r3, #0
 8001188:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800118a:	f107 0314 	add.w	r3, r7, #20
 800118e:	4619      	mov	r1, r3
 8001190:	4805      	ldr	r0, [pc, #20]	@ (80011a8 <HAL_ADC_MspInit+0x84>)
 8001192:	f003 f869 	bl	8004268 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001196:	bf00      	nop
 8001198:	3728      	adds	r7, #40	@ 0x28
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	40012000 	.word	0x40012000
 80011a4:	40023800 	.word	0x40023800
 80011a8:	40020000 	.word	0x40020000

080011ac <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80011b2:	463b      	mov	r3, r7
 80011b4:	2200      	movs	r2, #0
 80011b6:	601a      	str	r2, [r3, #0]
 80011b8:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80011ba:	4b0f      	ldr	r3, [pc, #60]	@ (80011f8 <MX_DAC_Init+0x4c>)
 80011bc:	4a0f      	ldr	r2, [pc, #60]	@ (80011fc <MX_DAC_Init+0x50>)
 80011be:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80011c0:	480d      	ldr	r0, [pc, #52]	@ (80011f8 <MX_DAC_Init+0x4c>)
 80011c2:	f002 ff43 	bl	800404c <HAL_DAC_Init>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80011cc:	f001 face 	bl	800276c <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80011d0:	2300      	movs	r3, #0
 80011d2:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80011d4:	2300      	movs	r3, #0
 80011d6:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80011d8:	463b      	mov	r3, r7
 80011da:	2210      	movs	r2, #16
 80011dc:	4619      	mov	r1, r3
 80011de:	4806      	ldr	r0, [pc, #24]	@ (80011f8 <MX_DAC_Init+0x4c>)
 80011e0:	f002 ff56 	bl	8004090 <HAL_DAC_ConfigChannel>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80011ea:	f001 fabf 	bl	800276c <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80011ee:	bf00      	nop
 80011f0:	3708      	adds	r7, #8
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	20000284 	.word	0x20000284
 80011fc:	40007400 	.word	0x40007400

08001200 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b08a      	sub	sp, #40	@ 0x28
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001208:	f107 0314 	add.w	r3, r7, #20
 800120c:	2200      	movs	r2, #0
 800120e:	601a      	str	r2, [r3, #0]
 8001210:	605a      	str	r2, [r3, #4]
 8001212:	609a      	str	r2, [r3, #8]
 8001214:	60da      	str	r2, [r3, #12]
 8001216:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a17      	ldr	r2, [pc, #92]	@ (800127c <HAL_DAC_MspInit+0x7c>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d127      	bne.n	8001272 <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001222:	2300      	movs	r3, #0
 8001224:	613b      	str	r3, [r7, #16]
 8001226:	4b16      	ldr	r3, [pc, #88]	@ (8001280 <HAL_DAC_MspInit+0x80>)
 8001228:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800122a:	4a15      	ldr	r2, [pc, #84]	@ (8001280 <HAL_DAC_MspInit+0x80>)
 800122c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001230:	6413      	str	r3, [r2, #64]	@ 0x40
 8001232:	4b13      	ldr	r3, [pc, #76]	@ (8001280 <HAL_DAC_MspInit+0x80>)
 8001234:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001236:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800123a:	613b      	str	r3, [r7, #16]
 800123c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800123e:	2300      	movs	r3, #0
 8001240:	60fb      	str	r3, [r7, #12]
 8001242:	4b0f      	ldr	r3, [pc, #60]	@ (8001280 <HAL_DAC_MspInit+0x80>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001246:	4a0e      	ldr	r2, [pc, #56]	@ (8001280 <HAL_DAC_MspInit+0x80>)
 8001248:	f043 0301 	orr.w	r3, r3, #1
 800124c:	6313      	str	r3, [r2, #48]	@ 0x30
 800124e:	4b0c      	ldr	r3, [pc, #48]	@ (8001280 <HAL_DAC_MspInit+0x80>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001252:	f003 0301 	and.w	r3, r3, #1
 8001256:	60fb      	str	r3, [r7, #12]
 8001258:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800125a:	2320      	movs	r3, #32
 800125c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800125e:	2303      	movs	r3, #3
 8001260:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001262:	2300      	movs	r3, #0
 8001264:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001266:	f107 0314 	add.w	r3, r7, #20
 800126a:	4619      	mov	r1, r3
 800126c:	4805      	ldr	r0, [pc, #20]	@ (8001284 <HAL_DAC_MspInit+0x84>)
 800126e:	f002 fffb 	bl	8004268 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 8001272:	bf00      	nop
 8001274:	3728      	adds	r7, #40	@ 0x28
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	40007400 	.word	0x40007400
 8001280:	40023800 	.word	0x40023800
 8001284:	40020000 	.word	0x40020000

08001288 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b08a      	sub	sp, #40	@ 0x28
 800128c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800128e:	f107 0314 	add.w	r3, r7, #20
 8001292:	2200      	movs	r2, #0
 8001294:	601a      	str	r2, [r3, #0]
 8001296:	605a      	str	r2, [r3, #4]
 8001298:	609a      	str	r2, [r3, #8]
 800129a:	60da      	str	r2, [r3, #12]
 800129c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800129e:	2300      	movs	r3, #0
 80012a0:	613b      	str	r3, [r7, #16]
 80012a2:	4b6b      	ldr	r3, [pc, #428]	@ (8001450 <MX_GPIO_Init+0x1c8>)
 80012a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012a6:	4a6a      	ldr	r2, [pc, #424]	@ (8001450 <MX_GPIO_Init+0x1c8>)
 80012a8:	f043 0304 	orr.w	r3, r3, #4
 80012ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80012ae:	4b68      	ldr	r3, [pc, #416]	@ (8001450 <MX_GPIO_Init+0x1c8>)
 80012b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012b2:	f003 0304 	and.w	r3, r3, #4
 80012b6:	613b      	str	r3, [r7, #16]
 80012b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012ba:	2300      	movs	r3, #0
 80012bc:	60fb      	str	r3, [r7, #12]
 80012be:	4b64      	ldr	r3, [pc, #400]	@ (8001450 <MX_GPIO_Init+0x1c8>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012c2:	4a63      	ldr	r2, [pc, #396]	@ (8001450 <MX_GPIO_Init+0x1c8>)
 80012c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80012c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80012ca:	4b61      	ldr	r3, [pc, #388]	@ (8001450 <MX_GPIO_Init+0x1c8>)
 80012cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80012d2:	60fb      	str	r3, [r7, #12]
 80012d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012d6:	2300      	movs	r3, #0
 80012d8:	60bb      	str	r3, [r7, #8]
 80012da:	4b5d      	ldr	r3, [pc, #372]	@ (8001450 <MX_GPIO_Init+0x1c8>)
 80012dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012de:	4a5c      	ldr	r2, [pc, #368]	@ (8001450 <MX_GPIO_Init+0x1c8>)
 80012e0:	f043 0301 	orr.w	r3, r3, #1
 80012e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80012e6:	4b5a      	ldr	r3, [pc, #360]	@ (8001450 <MX_GPIO_Init+0x1c8>)
 80012e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ea:	f003 0301 	and.w	r3, r3, #1
 80012ee:	60bb      	str	r3, [r7, #8]
 80012f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012f2:	2300      	movs	r3, #0
 80012f4:	607b      	str	r3, [r7, #4]
 80012f6:	4b56      	ldr	r3, [pc, #344]	@ (8001450 <MX_GPIO_Init+0x1c8>)
 80012f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012fa:	4a55      	ldr	r2, [pc, #340]	@ (8001450 <MX_GPIO_Init+0x1c8>)
 80012fc:	f043 0302 	orr.w	r3, r3, #2
 8001300:	6313      	str	r3, [r2, #48]	@ 0x30
 8001302:	4b53      	ldr	r3, [pc, #332]	@ (8001450 <MX_GPIO_Init+0x1c8>)
 8001304:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001306:	f003 0302 	and.w	r3, r3, #2
 800130a:	607b      	str	r3, [r7, #4]
 800130c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, door1_Pin|door2_Pin|Peltier1_Pin|Peltier2_Pin
 800130e:	2200      	movs	r2, #0
 8001310:	f240 316f 	movw	r1, #879	@ 0x36f
 8001314:	484f      	ldr	r0, [pc, #316]	@ (8001454 <MX_GPIO_Init+0x1cc>)
 8001316:	f003 f953 	bl	80045c0 <HAL_GPIO_WritePin>
                          |CS_Pin|Fan_On_Pin|Water_P2_Pin|Water_P1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Trig_GPIO_Port, Trig_Pin, GPIO_PIN_RESET);
 800131a:	2200      	movs	r2, #0
 800131c:	2140      	movs	r1, #64	@ 0x40
 800131e:	484e      	ldr	r0, [pc, #312]	@ (8001458 <MX_GPIO_Init+0x1d0>)
 8001320:	f003 f94e 	bl	80045c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DHT11_Pin|led2_Pin|Fan_Peltier1_Pin, GPIO_PIN_RESET);
 8001324:	2200      	movs	r2, #0
 8001326:	f44f 5144 	mov.w	r1, #12544	@ 0x3100
 800132a:	484c      	ldr	r0, [pc, #304]	@ (800145c <MX_GPIO_Init+0x1d4>)
 800132c:	f003 f948 	bl	80045c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : door1_Pin door2_Pin */
  GPIO_InitStruct.Pin = door1_Pin|door2_Pin;
 8001330:	2303      	movs	r3, #3
 8001332:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001334:	2301      	movs	r3, #1
 8001336:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001338:	2300      	movs	r3, #0
 800133a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800133c:	2301      	movs	r3, #1
 800133e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001340:	f107 0314 	add.w	r3, r7, #20
 8001344:	4619      	mov	r1, r3
 8001346:	4843      	ldr	r0, [pc, #268]	@ (8001454 <MX_GPIO_Init+0x1cc>)
 8001348:	f002 ff8e 	bl	8004268 <HAL_GPIO_Init>

  /*Configure GPIO pins : Peltier1_Pin Peltier2_Pin CS_Pin Fan_On_Pin */
  GPIO_InitStruct.Pin = Peltier1_Pin|Peltier2_Pin|CS_Pin|Fan_On_Pin;
 800134c:	236c      	movs	r3, #108	@ 0x6c
 800134e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001350:	2301      	movs	r3, #1
 8001352:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001354:	2300      	movs	r3, #0
 8001356:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001358:	2300      	movs	r3, #0
 800135a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800135c:	f107 0314 	add.w	r3, r7, #20
 8001360:	4619      	mov	r1, r3
 8001362:	483c      	ldr	r0, [pc, #240]	@ (8001454 <MX_GPIO_Init+0x1cc>)
 8001364:	f002 ff80 	bl	8004268 <HAL_GPIO_Init>

  /*Configure GPIO pin : Trig_Pin */
  GPIO_InitStruct.Pin = Trig_Pin;
 8001368:	2340      	movs	r3, #64	@ 0x40
 800136a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800136c:	2301      	movs	r3, #1
 800136e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001370:	2300      	movs	r3, #0
 8001372:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001374:	2303      	movs	r3, #3
 8001376:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Trig_GPIO_Port, &GPIO_InitStruct);
 8001378:	f107 0314 	add.w	r3, r7, #20
 800137c:	4619      	mov	r1, r3
 800137e:	4836      	ldr	r0, [pc, #216]	@ (8001458 <MX_GPIO_Init+0x1d0>)
 8001380:	f002 ff72 	bl	8004268 <HAL_GPIO_Init>

  /*Configure GPIO pin : Echo_Pin */
  GPIO_InitStruct.Pin = Echo_Pin;
 8001384:	2380      	movs	r3, #128	@ 0x80
 8001386:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001388:	2300      	movs	r3, #0
 800138a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800138c:	2302      	movs	r3, #2
 800138e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Echo_GPIO_Port, &GPIO_InitStruct);
 8001390:	f107 0314 	add.w	r3, r7, #20
 8001394:	4619      	mov	r1, r3
 8001396:	4830      	ldr	r0, [pc, #192]	@ (8001458 <MX_GPIO_Init+0x1d0>)
 8001398:	f002 ff66 	bl	8004268 <HAL_GPIO_Init>

  /*Configure GPIO pin : INT_Pin */
  GPIO_InitStruct.Pin = INT_Pin;
 800139c:	2310      	movs	r3, #16
 800139e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013a0:	2300      	movs	r3, #0
 80013a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a4:	2300      	movs	r3, #0
 80013a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(INT_GPIO_Port, &GPIO_InitStruct);
 80013a8:	f107 0314 	add.w	r3, r7, #20
 80013ac:	4619      	mov	r1, r3
 80013ae:	4829      	ldr	r0, [pc, #164]	@ (8001454 <MX_GPIO_Init+0x1cc>)
 80013b0:	f002 ff5a 	bl	8004268 <HAL_GPIO_Init>

  /*Configure GPIO pin : DHT11_Pin */
  GPIO_InitStruct.Pin = DHT11_Pin;
 80013b4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ba:	2301      	movs	r3, #1
 80013bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013be:	2300      	movs	r3, #0
 80013c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013c2:	2303      	movs	r3, #3
 80013c4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DHT11_GPIO_Port, &GPIO_InitStruct);
 80013c6:	f107 0314 	add.w	r3, r7, #20
 80013ca:	4619      	mov	r1, r3
 80013cc:	4823      	ldr	r0, [pc, #140]	@ (800145c <MX_GPIO_Init+0x1d4>)
 80013ce:	f002 ff4b 	bl	8004268 <HAL_GPIO_Init>

  /*Configure GPIO pin : led2_Pin */
  GPIO_InitStruct.Pin = led2_Pin;
 80013d2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80013d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013d8:	2301      	movs	r3, #1
 80013da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013dc:	2300      	movs	r3, #0
 80013de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80013e0:	2301      	movs	r3, #1
 80013e2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(led2_GPIO_Port, &GPIO_InitStruct);
 80013e4:	f107 0314 	add.w	r3, r7, #20
 80013e8:	4619      	mov	r1, r3
 80013ea:	481c      	ldr	r0, [pc, #112]	@ (800145c <MX_GPIO_Init+0x1d4>)
 80013ec:	f002 ff3c 	bl	8004268 <HAL_GPIO_Init>

  /*Configure GPIO pin : Water_Chk_Pin */
  GPIO_InitStruct.Pin = Water_Chk_Pin;
 80013f0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80013f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013f6:	2300      	movs	r3, #0
 80013f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fa:	2300      	movs	r3, #0
 80013fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Water_Chk_GPIO_Port, &GPIO_InitStruct);
 80013fe:	f107 0314 	add.w	r3, r7, #20
 8001402:	4619      	mov	r1, r3
 8001404:	4815      	ldr	r0, [pc, #84]	@ (800145c <MX_GPIO_Init+0x1d4>)
 8001406:	f002 ff2f 	bl	8004268 <HAL_GPIO_Init>

  /*Configure GPIO pins : Water_P2_Pin Water_P1_Pin */
  GPIO_InitStruct.Pin = Water_P2_Pin|Water_P1_Pin;
 800140a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800140e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001410:	2301      	movs	r3, #1
 8001412:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001414:	2300      	movs	r3, #0
 8001416:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001418:	2302      	movs	r3, #2
 800141a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800141c:	f107 0314 	add.w	r3, r7, #20
 8001420:	4619      	mov	r1, r3
 8001422:	480c      	ldr	r0, [pc, #48]	@ (8001454 <MX_GPIO_Init+0x1cc>)
 8001424:	f002 ff20 	bl	8004268 <HAL_GPIO_Init>

  /*Configure GPIO pin : Fan_Peltier1_Pin */
  GPIO_InitStruct.Pin = Fan_Peltier1_Pin;
 8001428:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800142c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800142e:	2301      	movs	r3, #1
 8001430:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001432:	2300      	movs	r3, #0
 8001434:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001436:	2300      	movs	r3, #0
 8001438:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Fan_Peltier1_GPIO_Port, &GPIO_InitStruct);
 800143a:	f107 0314 	add.w	r3, r7, #20
 800143e:	4619      	mov	r1, r3
 8001440:	4806      	ldr	r0, [pc, #24]	@ (800145c <MX_GPIO_Init+0x1d4>)
 8001442:	f002 ff11 	bl	8004268 <HAL_GPIO_Init>

}
 8001446:	bf00      	nop
 8001448:	3728      	adds	r7, #40	@ 0x28
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	40023800 	.word	0x40023800
 8001454:	40020800 	.word	0x40020800
 8001458:	40020000 	.word	0x40020000
 800145c:	40020400 	.word	0x40020400

08001460 <__io_putchar>:
// ============================================printf문 =======================================================
//============================================================================================================

#if printf_en
extern int __io_putchar(int ch)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
    //UART_HandleTypeDef huart1;
    HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);

#elif Console_Ch2
    //UART_HandleTypeDef huart2;
    HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8001468:	1d39      	adds	r1, r7, #4
 800146a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800146e:	2201      	movs	r2, #1
 8001470:	4804      	ldr	r0, [pc, #16]	@ (8001484 <__io_putchar+0x24>)
 8001472:	f005 fa63 	bl	800693c <HAL_UART_Transmit>

#elif Console_Ch6
    //UART_HandleTypeDef huart3;
    HAL_UART_Transmit(&huart6, (uint8_t *)&ch, 1, 0xFFFF);
#endif
    __NOP();
 8001476:	bf00      	nop
  return ch;
 8001478:	687b      	ldr	r3, [r7, #4]
}
 800147a:	4618      	mov	r0, r3
 800147c:	3708      	adds	r7, #8
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	20000624 	.word	0x20000624

08001488 <delay>:
  #define DHT11_PORT  DHT11_GPIO_Port // main.h 참고
  #define DHT11_PIN   DHT11_Pin       // main.h 참고

// usec delay
void delay (uint16_t time)
{
 8001488:	b480      	push	{r7}
 800148a:	b083      	sub	sp, #12
 800148c:	af00      	add	r7, sp, #0
 800148e:	4603      	mov	r3, r0
 8001490:	80fb      	strh	r3, [r7, #6]
 /* change your code here for the delay in microseconds */
 __HAL_TIM_SET_COUNTER(&htim6, 0);
 8001492:	4b09      	ldr	r3, [pc, #36]	@ (80014b8 <delay+0x30>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	2200      	movs	r2, #0
 8001498:	625a      	str	r2, [r3, #36]	@ 0x24
 while ((__HAL_TIM_GET_COUNTER(&htim6)) < time);  // 타이머 7
 800149a:	bf00      	nop
 800149c:	4b06      	ldr	r3, [pc, #24]	@ (80014b8 <delay+0x30>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80014a2:	88fb      	ldrh	r3, [r7, #6]
 80014a4:	429a      	cmp	r2, r3
 80014a6:	d3f9      	bcc.n	800149c <delay+0x14>
}
 80014a8:	bf00      	nop
 80014aa:	bf00      	nop
 80014ac:	370c      	adds	r7, #12
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr
 80014b6:	bf00      	nop
 80014b8:	20000504 	.word	0x20000504

080014bc <Set_Pin_Output>:

void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b088      	sub	sp, #32
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
 80014c4:	460b      	mov	r3, r1
 80014c6:	807b      	strh	r3, [r7, #2]
 GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c8:	f107 030c 	add.w	r3, r7, #12
 80014cc:	2200      	movs	r2, #0
 80014ce:	601a      	str	r2, [r3, #0]
 80014d0:	605a      	str	r2, [r3, #4]
 80014d2:	609a      	str	r2, [r3, #8]
 80014d4:	60da      	str	r2, [r3, #12]
 80014d6:	611a      	str	r2, [r3, #16]
 GPIO_InitStruct.Pin = GPIO_Pin;
 80014d8:	887b      	ldrh	r3, [r7, #2]
 80014da:	60fb      	str	r3, [r7, #12]
 GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014dc:	2301      	movs	r3, #1
 80014de:	613b      	str	r3, [r7, #16]
 GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e0:	2300      	movs	r3, #0
 80014e2:	61bb      	str	r3, [r7, #24]
 HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80014e4:	f107 030c 	add.w	r3, r7, #12
 80014e8:	4619      	mov	r1, r3
 80014ea:	6878      	ldr	r0, [r7, #4]
 80014ec:	f002 febc 	bl	8004268 <HAL_GPIO_Init>
}
 80014f0:	bf00      	nop
 80014f2:	3720      	adds	r7, #32
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}

080014f8 <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b088      	sub	sp, #32
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
 8001500:	460b      	mov	r3, r1
 8001502:	807b      	strh	r3, [r7, #2]
 GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001504:	f107 030c 	add.w	r3, r7, #12
 8001508:	2200      	movs	r2, #0
 800150a:	601a      	str	r2, [r3, #0]
 800150c:	605a      	str	r2, [r3, #4]
 800150e:	609a      	str	r2, [r3, #8]
 8001510:	60da      	str	r2, [r3, #12]
 8001512:	611a      	str	r2, [r3, #16]
 GPIO_InitStruct.Pin = GPIO_Pin;
 8001514:	887b      	ldrh	r3, [r7, #2]
 8001516:	60fb      	str	r3, [r7, #12]
 GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001518:	2300      	movs	r3, #0
 800151a:	613b      	str	r3, [r7, #16]
 GPIO_InitStruct.Pull = GPIO_PULLUP;
 800151c:	2301      	movs	r3, #1
 800151e:	617b      	str	r3, [r7, #20]
 HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001520:	f107 030c 	add.w	r3, r7, #12
 8001524:	4619      	mov	r1, r3
 8001526:	6878      	ldr	r0, [r7, #4]
 8001528:	f002 fe9e 	bl	8004268 <HAL_GPIO_Init>
}
 800152c:	bf00      	nop
 800152e:	3720      	adds	r7, #32
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}

08001534 <DHT11_Start>:

void DHT11_Start (void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
 if(dht_ch1 -> dht11_ch == 1)
 8001538:	4b12      	ldr	r3, [pc, #72]	@ (8001584 <DHT11_Start+0x50>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f993 3000 	ldrsb.w	r3, [r3]
 8001540:	2b01      	cmp	r3, #1
 8001542:	d11c      	bne.n	800157e <DHT11_Start+0x4a>
   { //ch1
   Set_Pin_Output (DHT11_PORT, DHT11_PIN);  // set the pin as output
 8001544:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001548:	480f      	ldr	r0, [pc, #60]	@ (8001588 <DHT11_Start+0x54>)
 800154a:	f7ff ffb7 	bl	80014bc <Set_Pin_Output>
   HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 0);   // pull the pin low
 800154e:	2200      	movs	r2, #0
 8001550:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001554:	480c      	ldr	r0, [pc, #48]	@ (8001588 <DHT11_Start+0x54>)
 8001556:	f003 f833 	bl	80045c0 <HAL_GPIO_WritePin>
   delay(18000);   // wait for 18ms
 800155a:	f244 6050 	movw	r0, #18000	@ 0x4650
 800155e:	f7ff ff93 	bl	8001488 <delay>
   HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 1);   // pull the pin high
 8001562:	2201      	movs	r2, #1
 8001564:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001568:	4807      	ldr	r0, [pc, #28]	@ (8001588 <DHT11_Start+0x54>)
 800156a:	f003 f829 	bl	80045c0 <HAL_GPIO_WritePin>
   delay (20);   // wait for 20us
 800156e:	2014      	movs	r0, #20
 8001570:	f7ff ff8a 	bl	8001488 <delay>
   Set_Pin_Input(DHT11_PORT, DHT11_PIN);    // set as input
 8001574:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001578:	4803      	ldr	r0, [pc, #12]	@ (8001588 <DHT11_Start+0x54>)
 800157a:	f7ff ffbd 	bl	80014f8 <Set_Pin_Input>
   }
}
 800157e:	bf00      	nop
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	20000010 	.word	0x20000010
 8001588:	40020400 	.word	0x40020400

0800158c <DHT11_Check_Response>:

uint8_t DHT11_Check_Response (void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0
 uint8_t Response = 0;
 8001592:	2300      	movs	r3, #0
 8001594:	71fb      	strb	r3, [r7, #7]
 delay (40);
 8001596:	2028      	movs	r0, #40	@ 0x28
 8001598:	f7ff ff76 	bl	8001488 <delay>
 if(dht_ch1 -> dht11_ch == 1)
 800159c:	4b20      	ldr	r3, [pc, #128]	@ (8001620 <DHT11_Check_Response+0x94>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f993 3000 	ldrsb.w	r3, [r3]
 80015a4:	2b01      	cmp	r3, #1
 80015a6:	d136      	bne.n	8001616 <DHT11_Check_Response+0x8a>
  { //ch1
   if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))
 80015a8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80015ac:	481d      	ldr	r0, [pc, #116]	@ (8001624 <DHT11_Check_Response+0x98>)
 80015ae:	f002 ffef 	bl	8004590 <HAL_GPIO_ReadPin>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d120      	bne.n	80015fa <DHT11_Check_Response+0x6e>
    {
     delay (80);
 80015b8:	2050      	movs	r0, #80	@ 0x50
 80015ba:	f7ff ff65 	bl	8001488 <delay>
      	  if ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN))) Response = 1;
 80015be:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80015c2:	4818      	ldr	r0, [pc, #96]	@ (8001624 <DHT11_Check_Response+0x98>)
 80015c4:	f002 ffe4 	bl	8004590 <HAL_GPIO_ReadPin>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d002      	beq.n	80015d4 <DHT11_Check_Response+0x48>
 80015ce:	2301      	movs	r3, #1
 80015d0:	71fb      	strb	r3, [r7, #7]
 80015d2:	e012      	b.n	80015fa <DHT11_Check_Response+0x6e>
     else Response = -1; // 255
 80015d4:	23ff      	movs	r3, #255	@ 0xff
 80015d6:	71fb      	strb	r3, [r7, #7]
    }
   while (HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN))
 80015d8:	e00f      	b.n	80015fa <DHT11_Check_Response+0x6e>
     {
	   // wait for the pin to go low
	   dht_ch1 -> while_cnt++;
 80015da:	4b11      	ldr	r3, [pc, #68]	@ (8001620 <DHT11_Check_Response+0x94>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80015e2:	b292      	uxth	r2, r2
 80015e4:	3201      	adds	r2, #1
 80015e6:	b292      	uxth	r2, r2
 80015e8:	b212      	sxth	r2, r2
 80015ea:	805a      	strh	r2, [r3, #2]
	   if( dht_ch1 -> while_cnt > 500) break;
 80015ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001620 <DHT11_Check_Response+0x94>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80015f4:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80015f8:	dc08      	bgt.n	800160c <DHT11_Check_Response+0x80>
   while (HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN))
 80015fa:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80015fe:	4809      	ldr	r0, [pc, #36]	@ (8001624 <DHT11_Check_Response+0x98>)
 8001600:	f002 ffc6 	bl	8004590 <HAL_GPIO_ReadPin>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d1e7      	bne.n	80015da <DHT11_Check_Response+0x4e>
 800160a:	e000      	b.n	800160e <DHT11_Check_Response+0x82>
	   if( dht_ch1 -> while_cnt > 500) break;
 800160c:	bf00      	nop
     }
   dht_ch1 -> while_cnt = 0;
 800160e:	4b04      	ldr	r3, [pc, #16]	@ (8001620 <DHT11_Check_Response+0x94>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	2200      	movs	r2, #0
 8001614:	805a      	strh	r2, [r3, #2]
  }
#endif
 return Response;
 8001616:	79fb      	ldrb	r3, [r7, #7]
}
 8001618:	4618      	mov	r0, r3
 800161a:	3708      	adds	r7, #8
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	20000010 	.word	0x20000010
 8001624:	40020400 	.word	0x40020400

08001628 <DHT11_Read>:
uint8_t DHT11_Read ()
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0
 uint8_t i,j;
 if(dht_ch1 -> dht11_ch == 1)
 800162e:	4b3b      	ldr	r3, [pc, #236]	@ (800171c <DHT11_Read+0xf4>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f993 3000 	ldrsb.w	r3, [r3]
 8001636:	2b01      	cmp	r3, #1
 8001638:	d16b      	bne.n	8001712 <DHT11_Read+0xea>
  {
   for (j=0;j<8;j++)
 800163a:	2300      	movs	r3, #0
 800163c:	71bb      	strb	r3, [r7, #6]
 800163e:	e065      	b.n	800170c <DHT11_Read+0xe4>
    {
	  while (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))
	   {
		  dht_ch1 -> while_cnt++;
 8001640:	4b36      	ldr	r3, [pc, #216]	@ (800171c <DHT11_Read+0xf4>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8001648:	b292      	uxth	r2, r2
 800164a:	3201      	adds	r2, #1
 800164c:	b292      	uxth	r2, r2
 800164e:	b212      	sxth	r2, r2
 8001650:	805a      	strh	r2, [r3, #2]
		// wait for the pin to go high
		if(dht_ch1 -> while_cnt > 500) break;
 8001652:	4b32      	ldr	r3, [pc, #200]	@ (800171c <DHT11_Read+0xf4>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800165a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800165e:	dc08      	bgt.n	8001672 <DHT11_Read+0x4a>
	  while (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))
 8001660:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001664:	482e      	ldr	r0, [pc, #184]	@ (8001720 <DHT11_Read+0xf8>)
 8001666:	f002 ff93 	bl	8004590 <HAL_GPIO_ReadPin>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	d0e7      	beq.n	8001640 <DHT11_Read+0x18>
 8001670:	e000      	b.n	8001674 <DHT11_Read+0x4c>
		if(dht_ch1 -> while_cnt > 500) break;
 8001672:	bf00      	nop
	   }
	  dht_ch1 -> while_cnt = 0;
 8001674:	4b29      	ldr	r3, [pc, #164]	@ (800171c <DHT11_Read+0xf4>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	2200      	movs	r2, #0
 800167a:	805a      	strh	r2, [r3, #2]
	  delay (40);   // wait for 40 us
 800167c:	2028      	movs	r0, #40	@ 0x28
 800167e:	f7ff ff03 	bl	8001488 <delay>
	  if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))   // if the pin is low
 8001682:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001686:	4826      	ldr	r0, [pc, #152]	@ (8001720 <DHT11_Read+0xf8>)
 8001688:	f002 ff82 	bl	8004590 <HAL_GPIO_ReadPin>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d10e      	bne.n	80016b0 <DHT11_Read+0x88>
	   {
	    i&= ~(1<<(7-j));   // write 0
 8001692:	79bb      	ldrb	r3, [r7, #6]
 8001694:	f1c3 0307 	rsb	r3, r3, #7
 8001698:	2201      	movs	r2, #1
 800169a:	fa02 f303 	lsl.w	r3, r2, r3
 800169e:	b25b      	sxtb	r3, r3
 80016a0:	43db      	mvns	r3, r3
 80016a2:	b25a      	sxtb	r2, r3
 80016a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a8:	4013      	ands	r3, r2
 80016aa:	b25b      	sxtb	r3, r3
 80016ac:	71fb      	strb	r3, [r7, #7]
 80016ae:	e01c      	b.n	80016ea <DHT11_Read+0xc2>
	   }
	  else i|= (1<<(7-j));  // if the pin is high, write 1
 80016b0:	79bb      	ldrb	r3, [r7, #6]
 80016b2:	f1c3 0307 	rsb	r3, r3, #7
 80016b6:	2201      	movs	r2, #1
 80016b8:	fa02 f303 	lsl.w	r3, r2, r3
 80016bc:	b25a      	sxtb	r2, r3
 80016be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016c2:	4313      	orrs	r3, r2
 80016c4:	b25b      	sxtb	r3, r3
 80016c6:	71fb      	strb	r3, [r7, #7]
	  while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))
 80016c8:	e00f      	b.n	80016ea <DHT11_Read+0xc2>
	   {
		  dht_ch1 -> while_cnt++;
 80016ca:	4b14      	ldr	r3, [pc, #80]	@ (800171c <DHT11_Read+0xf4>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80016d2:	b292      	uxth	r2, r2
 80016d4:	3201      	adds	r2, #1
 80016d6:	b292      	uxth	r2, r2
 80016d8:	b212      	sxth	r2, r2
 80016da:	805a      	strh	r2, [r3, #2]
		// wait for the pin to go low
		if(dht_ch1 -> while_cnt > 500) break;
 80016dc:	4b0f      	ldr	r3, [pc, #60]	@ (800171c <DHT11_Read+0xf4>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80016e4:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80016e8:	dc08      	bgt.n	80016fc <DHT11_Read+0xd4>
	  while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))
 80016ea:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80016ee:	480c      	ldr	r0, [pc, #48]	@ (8001720 <DHT11_Read+0xf8>)
 80016f0:	f002 ff4e 	bl	8004590 <HAL_GPIO_ReadPin>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d1e7      	bne.n	80016ca <DHT11_Read+0xa2>
 80016fa:	e000      	b.n	80016fe <DHT11_Read+0xd6>
		if(dht_ch1 -> while_cnt > 500) break;
 80016fc:	bf00      	nop
	   }
	  dht_ch1 -> while_cnt =  0;
 80016fe:	4b07      	ldr	r3, [pc, #28]	@ (800171c <DHT11_Read+0xf4>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	2200      	movs	r2, #0
 8001704:	805a      	strh	r2, [r3, #2]
   for (j=0;j<8;j++)
 8001706:	79bb      	ldrb	r3, [r7, #6]
 8001708:	3301      	adds	r3, #1
 800170a:	71bb      	strb	r3, [r7, #6]
 800170c:	79bb      	ldrb	r3, [r7, #6]
 800170e:	2b07      	cmp	r3, #7
 8001710:	d9a6      	bls.n	8001660 <DHT11_Read+0x38>
    } // for end
  } // if-end
 return i;
 8001712:	79fb      	ldrb	r3, [r7, #7]
}
 8001714:	4618      	mov	r0, r3
 8001716:	3708      	adds	r7, #8
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}
 800171c:	20000010 	.word	0x20000010
 8001720:	40020400 	.word	0x40020400

08001724 <DHT11_Sensor_Test>:

uint8_t DHT11_Sensor_Test()
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b088      	sub	sp, #32
 8001728:	af00      	add	r7, sp, #0
	uint8_t Rh_byte1, Rh_byte2, Temp_byte1, Temp_byte2;
	uint16_t SUM, RH, TEMP;
	float Temperature = 0;
 800172a:	f04f 0300 	mov.w	r3, #0
 800172e:	61fb      	str	r3, [r7, #28]
	float Humidity = 0;
 8001730:	f04f 0300 	mov.w	r3, #0
 8001734:	61bb      	str	r3, [r7, #24]
	uint8_t Presence = 0;
 8001736:	2300      	movs	r3, #0
 8001738:	75fb      	strb	r3, [r7, #23]
 // DHT11 Run == Main
 DHT11_Start();
 800173a:	f7ff fefb 	bl	8001534 <DHT11_Start>
 Presence = DHT11_Check_Response();
 800173e:	f7ff ff25 	bl	800158c <DHT11_Check_Response>
 8001742:	4603      	mov	r3, r0
 8001744:	75fb      	strb	r3, [r7, #23]
 Rh_byte1 = DHT11_Read ();
 8001746:	f7ff ff6f 	bl	8001628 <DHT11_Read>
 800174a:	4603      	mov	r3, r0
 800174c:	75bb      	strb	r3, [r7, #22]
 Rh_byte2 = DHT11_Read ();
 800174e:	f7ff ff6b 	bl	8001628 <DHT11_Read>
 8001752:	4603      	mov	r3, r0
 8001754:	757b      	strb	r3, [r7, #21]
 Temp_byte1 = DHT11_Read ();
 8001756:	f7ff ff67 	bl	8001628 <DHT11_Read>
 800175a:	4603      	mov	r3, r0
 800175c:	753b      	strb	r3, [r7, #20]
 Temp_byte2 = DHT11_Read ();
 800175e:	f7ff ff63 	bl	8001628 <DHT11_Read>
 8001762:	4603      	mov	r3, r0
 8001764:	74fb      	strb	r3, [r7, #19]
 SUM = DHT11_Read();
 8001766:	f7ff ff5f 	bl	8001628 <DHT11_Read>
 800176a:	4603      	mov	r3, r0
 800176c:	823b      	strh	r3, [r7, #16]

 // 정수부만 출력 됨
 TEMP = Temp_byte1;
 800176e:	7d3b      	ldrb	r3, [r7, #20]
 8001770:	81fb      	strh	r3, [r7, #14]
 RH = Rh_byte1;
 8001772:	7dbb      	ldrb	r3, [r7, #22]
 8001774:	81bb      	strh	r3, [r7, #12]
 // 소수점 부도 출력 됨
 Temperature = (float) TEMP;
 8001776:	89fb      	ldrh	r3, [r7, #14]
 8001778:	ee07 3a90 	vmov	s15, r3
 800177c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001780:	edc7 7a07 	vstr	s15, [r7, #28]
 Humidity = (float) RH;
 8001784:	89bb      	ldrh	r3, [r7, #12]
 8001786:	ee07 3a90 	vmov	s15, r3
 800178a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800178e:	edc7 7a06 	vstr	s15, [r7, #24]

 if(dht_ch1 -> dht11_ch == 1)
 8001792:	4b2d      	ldr	r3, [pc, #180]	@ (8001848 <DHT11_Sensor_Test+0x124>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f993 3000 	ldrsb.w	r3, [r3]
 800179a:	2b01      	cmp	r3, #1
 800179c:	d143      	bne.n	8001826 <DHT11_Sensor_Test+0x102>
  {
	if(TEMP >= 255) Temperature = dht_ch1 -> old_temp;
 800179e:	89fb      	ldrh	r3, [r7, #14]
 80017a0:	2bfe      	cmp	r3, #254	@ 0xfe
 80017a2:	d909      	bls.n	80017b8 <DHT11_Sensor_Test+0x94>
 80017a4:	4b28      	ldr	r3, [pc, #160]	@ (8001848 <DHT11_Sensor_Test+0x124>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	889b      	ldrh	r3, [r3, #4]
 80017aa:	ee07 3a90 	vmov	s15, r3
 80017ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80017b2:	edc7 7a07 	vstr	s15, [r7, #28]
 80017b6:	e009      	b.n	80017cc <DHT11_Sensor_Test+0xa8>
	else dht_ch1 -> old_temp = Temperature;
 80017b8:	4b23      	ldr	r3, [pc, #140]	@ (8001848 <DHT11_Sensor_Test+0x124>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	edd7 7a07 	vldr	s15, [r7, #28]
 80017c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80017c4:	ee17 2a90 	vmov	r2, s15
 80017c8:	b292      	uxth	r2, r2
 80017ca:	809a      	strh	r2, [r3, #4]

	if(RH >= 255) Humidity =dht_ch1 -> old_rh;
 80017cc:	89bb      	ldrh	r3, [r7, #12]
 80017ce:	2bfe      	cmp	r3, #254	@ 0xfe
 80017d0:	d909      	bls.n	80017e6 <DHT11_Sensor_Test+0xc2>
 80017d2:	4b1d      	ldr	r3, [pc, #116]	@ (8001848 <DHT11_Sensor_Test+0x124>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	88db      	ldrh	r3, [r3, #6]
 80017d8:	ee07 3a90 	vmov	s15, r3
 80017dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80017e0:	edc7 7a06 	vstr	s15, [r7, #24]
 80017e4:	e009      	b.n	80017fa <DHT11_Sensor_Test+0xd6>
	else dht_ch1 -> old_rh = Humidity;
 80017e6:	4b18      	ldr	r3, [pc, #96]	@ (8001848 <DHT11_Sensor_Test+0x124>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	edd7 7a06 	vldr	s15, [r7, #24]
 80017ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80017f2:	ee17 2a90 	vmov	r2, s15
 80017f6:	b292      	uxth	r2, r2
 80017f8:	80da      	strh	r2, [r3, #6]

	dht_ch1 -> Temp_Ch1_dis = Temperature;
 80017fa:	4b13      	ldr	r3, [pc, #76]	@ (8001848 <DHT11_Sensor_Test+0x124>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	edd7 7a07 	vldr	s15, [r7, #28]
 8001802:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001806:	edc7 7a01 	vstr	s15, [r7, #4]
 800180a:	793a      	ldrb	r2, [r7, #4]
 800180c:	b2d2      	uxtb	r2, r2
 800180e:	729a      	strb	r2, [r3, #10]
	dht_ch1 -> Hum_Ch1_dis = Humidity;
 8001810:	4b0d      	ldr	r3, [pc, #52]	@ (8001848 <DHT11_Sensor_Test+0x124>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	edd7 7a06 	vldr	s15, [r7, #24]
 8001818:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800181c:	edc7 7a01 	vstr	s15, [r7, #4]
 8001820:	793a      	ldrb	r2, [r7, #4]
 8001822:	b2d2      	uxtb	r2, r2
 8001824:	72da      	strb	r2, [r3, #11]
  }
 HAL_Delay(500);
 8001826:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800182a:	f001 fef9 	bl	8003620 <HAL_Delay>
 if (TEMP != 0 ||  RH != 0) return 1;
 800182e:	89fb      	ldrh	r3, [r7, #14]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d102      	bne.n	800183a <DHT11_Sensor_Test+0x116>
 8001834:	89bb      	ldrh	r3, [r7, #12]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d001      	beq.n	800183e <DHT11_Sensor_Test+0x11a>
 800183a:	2301      	movs	r3, #1
 800183c:	e7ff      	b.n	800183e <DHT11_Sensor_Test+0x11a>


}
 800183e:	4618      	mov	r0, r3
 8001840:	3720      	adds	r7, #32
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	20000010 	.word	0x20000010

0800184c <DHT11_Run_RH>:
float DHT11_Run_RH()
{
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0
	if(DHT11_Sensor_Test()) return dht_ch1 -> Hum_Ch1_dis;
 8001850:	f7ff ff68 	bl	8001724 <DHT11_Sensor_Test>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d007      	beq.n	800186a <DHT11_Run_RH+0x1e>
 800185a:	4b05      	ldr	r3, [pc, #20]	@ (8001870 <DHT11_Run_RH+0x24>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	7adb      	ldrb	r3, [r3, #11]
 8001860:	ee07 3a90 	vmov	s15, r3
 8001864:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001868:	e7ff      	b.n	800186a <DHT11_Run_RH+0x1e>
}
 800186a:	eeb0 0a67 	vmov.f32	s0, s15
 800186e:	bd80      	pop	{r7, pc}
 8001870:	20000010 	.word	0x20000010

08001874 <DHT11_Run_TEMP>:

float DHT11_Run_TEMP()
{
 8001874:	b580      	push	{r7, lr}
 8001876:	af00      	add	r7, sp, #0
	if(DHT11_Sensor_Test()) return dht_ch1 -> Temp_Ch1_dis;
 8001878:	f7ff ff54 	bl	8001724 <DHT11_Sensor_Test>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d007      	beq.n	8001892 <DHT11_Run_TEMP+0x1e>
 8001882:	4b05      	ldr	r3, [pc, #20]	@ (8001898 <DHT11_Run_TEMP+0x24>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	7a9b      	ldrb	r3, [r3, #10]
 8001888:	ee07 3a90 	vmov	s15, r3
 800188c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001890:	e7ff      	b.n	8001892 <DHT11_Run_TEMP+0x1e>
}
 8001892:	eeb0 0a67 	vmov.f32	s0, s15
 8001896:	bd80      	pop	{r7, pc}
 8001898:	20000010 	.word	0x20000010

0800189c <check_light>:
  uint16_t old_ch2;
  float cds_Ch1_dis;
  float cds_Ch2_dis;
}Cds_ch1 = {1, 0, 0, 0,0};
struct cds *cds_ch1 = &Cds_ch1;
uint8_t check_light(){
 800189c:	b580      	push	{r7, lr}
 800189e:	b09c      	sub	sp, #112	@ 0x70
 80018a0:	af00      	add	r7, sp, #0
	uint32_t adc_val = 0;
 80018a2:	2300      	movs	r3, #0
 80018a4:	66fb      	str	r3, [r7, #108]	@ 0x6c
	float lux = 0.0;
 80018a6:	f04f 0300 	mov.w	r3, #0
 80018aa:	66bb      	str	r3, [r7, #104]	@ 0x68
	char light_msg[64];
	float r_fixed = 10000.0f; // 10kΩ 고정 저항
 80018ac:	4b4b      	ldr	r3, [pc, #300]	@ (80019dc <check_light+0x140>)
 80018ae:	667b      	str	r3, [r7, #100]	@ 0x64
    if(cds_ch1 -> cds_ch == 1)
 80018b0:	4b4b      	ldr	r3, [pc, #300]	@ (80019e0 <check_light+0x144>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f993 3000 	ldrsb.w	r3, [r3]
 80018b8:	2b01      	cmp	r3, #1
 80018ba:	d17c      	bne.n	80019b6 <check_light+0x11a>
    {
    	ADC_ChannelConfTypeDef sConfig = {0};
 80018bc:	1d3b      	adds	r3, r7, #4
 80018be:	2200      	movs	r2, #0
 80018c0:	601a      	str	r2, [r3, #0]
 80018c2:	605a      	str	r2, [r3, #4]
 80018c4:	609a      	str	r2, [r3, #8]
 80018c6:	60da      	str	r2, [r3, #12]
    	sConfig.Channel = ADC_CHANNEL_0;
 80018c8:	2300      	movs	r3, #0
 80018ca:	607b      	str	r3, [r7, #4]
    	sConfig.Rank = 1;
 80018cc:	2301      	movs	r3, #1
 80018ce:	60bb      	str	r3, [r7, #8]
    	sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 80018d0:	2301      	movs	r3, #1
 80018d2:	60fb      	str	r3, [r7, #12]
    	HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 80018d4:	1d3b      	adds	r3, r7, #4
 80018d6:	4619      	mov	r1, r3
 80018d8:	4842      	ldr	r0, [pc, #264]	@ (80019e4 <check_light+0x148>)
 80018da:	f002 f8a7 	bl	8003a2c <HAL_ADC_ConfigChannel>
    	HAL_ADC_Start(&hadc1);
 80018de:	4841      	ldr	r0, [pc, #260]	@ (80019e4 <check_light+0x148>)
 80018e0:	f001 ff06 	bl	80036f0 <HAL_ADC_Start>
        if(HAL_ADC_PollForConversion(&hadc1, 10) == HAL_OK)
 80018e4:	210a      	movs	r1, #10
 80018e6:	483f      	ldr	r0, [pc, #252]	@ (80019e4 <check_light+0x148>)
 80018e8:	f002 f807 	bl	80038fa <HAL_ADC_PollForConversion>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d161      	bne.n	80019b6 <check_light+0x11a>
        {
			adc_val = HAL_ADC_GetValue(&hadc1);
 80018f2:	483c      	ldr	r0, [pc, #240]	@ (80019e4 <check_light+0x148>)
 80018f4:	f002 f88c 	bl	8003a10 <HAL_ADC_GetValue>
 80018f8:	66f8      	str	r0, [r7, #108]	@ 0x6c
			cds_ch1 ->  adc_v = adc_val;
 80018fa:	4b39      	ldr	r3, [pc, #228]	@ (80019e0 <check_light+0x144>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8001900:	b292      	uxth	r2, r2
 8001902:	805a      	strh	r2, [r3, #2]
			if(adc_val == 4095 || adc_val == 0) adc_val = cds_ch1 -> old_ch1;
 8001904:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001906:	f640 72ff 	movw	r2, #4095	@ 0xfff
 800190a:	4293      	cmp	r3, r2
 800190c:	d002      	beq.n	8001914 <check_light+0x78>
 800190e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001910:	2b00      	cmp	r3, #0
 8001912:	d104      	bne.n	800191e <check_light+0x82>
 8001914:	4b32      	ldr	r3, [pc, #200]	@ (80019e0 <check_light+0x144>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	889b      	ldrh	r3, [r3, #4]
 800191a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800191c:	e004      	b.n	8001928 <check_light+0x8c>
			else cds_ch1 -> old_ch1 = adc_val;
 800191e:	4b30      	ldr	r3, [pc, #192]	@ (80019e0 <check_light+0x144>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8001924:	b292      	uxth	r2, r2
 8001926:	809a      	strh	r2, [r3, #4]
			float Vout = (adc_val / 4095.0f) * 3.3f;
 8001928:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800192a:	ee07 3a90 	vmov	s15, r3
 800192e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001932:	eddf 6a2d 	vldr	s13, [pc, #180]	@ 80019e8 <check_light+0x14c>
 8001936:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800193a:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 80019ec <check_light+0x150>
 800193e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001942:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
			float RLDR = (3.3f - Vout) * 10000.0f / (Vout > 0.0f ? Vout : 1.0f);
 8001946:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 80019ec <check_light+0x150>
 800194a:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 800194e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001952:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 80019f0 <check_light+0x154>
 8001956:	ee67 6a87 	vmul.f32	s13, s15, s14
 800195a:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 800195e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001962:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001966:	dd02      	ble.n	800196e <check_light+0xd2>
 8001968:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 800196c:	e001      	b.n	8001972 <check_light+0xd6>
 800196e:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8001972:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001976:	ed87 7a17 	vstr	s14, [r7, #92]	@ 0x5c
			float Rk = RLDR / 1000.0f;
 800197a:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 800197e:	eddf 6a1d 	vldr	s13, [pc, #116]	@ 80019f4 <check_light+0x158>
 8001982:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001986:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
			float lux = 63.0f * powf(Rk, -0.7f)+50;
 800198a:	eddf 0a1b 	vldr	s1, [pc, #108]	@ 80019f8 <check_light+0x15c>
 800198e:	ed97 0a16 	vldr	s0, [r7, #88]	@ 0x58
 8001992:	f005 ffef 	bl	8007974 <powf>
 8001996:	eef0 7a40 	vmov.f32	s15, s0
 800199a:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 80019fc <check_light+0x160>
 800199e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019a2:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8001a00 <check_light+0x164>
 80019a6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80019aa:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
			cds_ch1 ->  cds_Ch1_dis = lux;
 80019ae:	4b0c      	ldr	r3, [pc, #48]	@ (80019e0 <check_light+0x144>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80019b4:	609a      	str	r2, [r3, #8]
    	}
    }
    HAL_ADC_Stop(&hadc1);
 80019b6:	480b      	ldr	r0, [pc, #44]	@ (80019e4 <check_light+0x148>)
 80019b8:	f001 ff6c 	bl	8003894 <HAL_ADC_Stop>
    if(adc_val != 4095 || adc_val != 0) return 1;
 80019bc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80019be:	f640 72ff 	movw	r2, #4095	@ 0xfff
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d102      	bne.n	80019cc <check_light+0x130>
 80019c6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d001      	beq.n	80019d0 <check_light+0x134>
 80019cc:	2301      	movs	r3, #1
 80019ce:	e000      	b.n	80019d2 <check_light+0x136>
    else return 0;
 80019d0:	2300      	movs	r3, #0
    }
 80019d2:	4618      	mov	r0, r3
 80019d4:	3770      	adds	r7, #112	@ 0x70
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	461c4000 	.word	0x461c4000
 80019e0:	20000024 	.word	0x20000024
 80019e4:	2000023c 	.word	0x2000023c
 80019e8:	457ff000 	.word	0x457ff000
 80019ec:	40533333 	.word	0x40533333
 80019f0:	461c4000 	.word	0x461c4000
 80019f4:	447a0000 	.word	0x447a0000
 80019f8:	bf333333 	.word	0xbf333333
 80019fc:	427c0000 	.word	0x427c0000
 8001a00:	42480000 	.word	0x42480000

08001a04 <read_light>:
float read_light(){
 8001a04:	b580      	push	{r7, lr}
 8001a06:	af00      	add	r7, sp, #0
	if(check_light()) return cds_ch1 ->  adc_v;
 8001a08:	f7ff ff48 	bl	800189c <check_light>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d007      	beq.n	8001a22 <read_light+0x1e>
 8001a12:	4b05      	ldr	r3, [pc, #20]	@ (8001a28 <read_light+0x24>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	885b      	ldrh	r3, [r3, #2]
 8001a18:	ee07 3a90 	vmov	s15, r3
 8001a1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a20:	e7ff      	b.n	8001a22 <read_light+0x1e>
}
 8001a22:	eeb0 0a67 	vmov.f32	s0, s15
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	20000024 	.word	0x20000024

08001a2c <read_light_lux>:
float read_light_lux(){
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	af00      	add	r7, sp, #0
	if(check_light()) return cds_ch1 ->  cds_Ch1_dis;
 8001a30:	f7ff ff34 	bl	800189c <check_light>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d005      	beq.n	8001a46 <read_light_lux+0x1a>
 8001a3a:	4b04      	ldr	r3, [pc, #16]	@ (8001a4c <read_light_lux+0x20>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	ee07 3a90 	vmov	s15, r3
 8001a44:	e7ff      	b.n	8001a46 <read_light_lux+0x1a>
}
 8001a46:	eeb0 0a67 	vmov.f32	s0, s15
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	20000024 	.word	0x20000024

08001a50 <get_co2_step>:
  float co2_Ch2_dis;
}Co2_ch1 = {1, 0, 0, 0,0};
struct co2 *co2_ch1 = &Co2_ch1;


float get_co2_step(uint32_t adc_val) {
 8001a50:	b5b0      	push	{r4, r5, r7, lr}
 8001a52:	b086      	sub	sp, #24
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
    // 12비트 ADC 기준 (0~4095)
//    if (adc_val < 1000) return 0;           //0: < 약 700 ppm  //
//    else if (adc_val < 2000) return 1;      //1: 700~1000 ppm
//    else if (adc_val < 3000) return 2;      //2: 1000~2000 ppm
    float Vref = 3.3; // OR 5.0
 8001a58:	4b31      	ldr	r3, [pc, #196]	@ (8001b20 <get_co2_step+0xd0>)
 8001a5a:	617b      	str	r3, [r7, #20]
	float Vout;
	float CO2_ppm;


	Vout = (adc_val / 4095.0) * Vref;
 8001a5c:	6878      	ldr	r0, [r7, #4]
 8001a5e:	f7fe fd81 	bl	8000564 <__aeabi_ui2d>
 8001a62:	a327      	add	r3, pc, #156	@ (adr r3, 8001b00 <get_co2_step+0xb0>)
 8001a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a68:	f7fe ff20 	bl	80008ac <__aeabi_ddiv>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	460b      	mov	r3, r1
 8001a70:	4614      	mov	r4, r2
 8001a72:	461d      	mov	r5, r3
 8001a74:	6978      	ldr	r0, [r7, #20]
 8001a76:	f7fe fd97 	bl	80005a8 <__aeabi_f2d>
 8001a7a:	4602      	mov	r2, r0
 8001a7c:	460b      	mov	r3, r1
 8001a7e:	4620      	mov	r0, r4
 8001a80:	4629      	mov	r1, r5
 8001a82:	f7fe fde9 	bl	8000658 <__aeabi_dmul>
 8001a86:	4602      	mov	r2, r0
 8001a88:	460b      	mov	r3, r1
 8001a8a:	4610      	mov	r0, r2
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	f7ff f8db 	bl	8000c48 <__aeabi_d2f>
 8001a92:	4603      	mov	r3, r0
 8001a94:	613b      	str	r3, [r7, #16]

	//센서를 만든 회사가 배포하는 PDF 문서에서 확인합니다.PWM 출력에 대한 예시:0.4V = 400 ppm2.0V = 5000 ppm
	CO2_ppm = ((Vout - 0.4) / (2.0 - 0.4) ) * (5000 - 400) + 400;
 8001a96:	6938      	ldr	r0, [r7, #16]
 8001a98:	f7fe fd86 	bl	80005a8 <__aeabi_f2d>
 8001a9c:	a31a      	add	r3, pc, #104	@ (adr r3, 8001b08 <get_co2_step+0xb8>)
 8001a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aa2:	f7fe fc21 	bl	80002e8 <__aeabi_dsub>
 8001aa6:	4602      	mov	r2, r0
 8001aa8:	460b      	mov	r3, r1
 8001aaa:	4610      	mov	r0, r2
 8001aac:	4619      	mov	r1, r3
 8001aae:	a318      	add	r3, pc, #96	@ (adr r3, 8001b10 <get_co2_step+0xc0>)
 8001ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ab4:	f7fe fefa 	bl	80008ac <__aeabi_ddiv>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	460b      	mov	r3, r1
 8001abc:	4610      	mov	r0, r2
 8001abe:	4619      	mov	r1, r3
 8001ac0:	a315      	add	r3, pc, #84	@ (adr r3, 8001b18 <get_co2_step+0xc8>)
 8001ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ac6:	f7fe fdc7 	bl	8000658 <__aeabi_dmul>
 8001aca:	4602      	mov	r2, r0
 8001acc:	460b      	mov	r3, r1
 8001ace:	4610      	mov	r0, r2
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	f04f 0200 	mov.w	r2, #0
 8001ad6:	4b13      	ldr	r3, [pc, #76]	@ (8001b24 <get_co2_step+0xd4>)
 8001ad8:	f7fe fc08 	bl	80002ec <__adddf3>
 8001adc:	4602      	mov	r2, r0
 8001ade:	460b      	mov	r3, r1
 8001ae0:	4610      	mov	r0, r2
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	f7ff f8b0 	bl	8000c48 <__aeabi_d2f>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	60fb      	str	r3, [r7, #12]
	//printf("vout = %.1f ,Co2 ppm = %.1f\r\n",Vout, CO2_ppm);
	return CO2_ppm;                        //3: >2000 ppm
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	ee07 3a90 	vmov	s15, r3
}
 8001af2:	eeb0 0a67 	vmov.f32	s0, s15
 8001af6:	3718      	adds	r7, #24
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bdb0      	pop	{r4, r5, r7, pc}
 8001afc:	f3af 8000 	nop.w
 8001b00:	00000000 	.word	0x00000000
 8001b04:	40affe00 	.word	0x40affe00
 8001b08:	9999999a 	.word	0x9999999a
 8001b0c:	3fd99999 	.word	0x3fd99999
 8001b10:	9999999a 	.word	0x9999999a
 8001b14:	3ff99999 	.word	0x3ff99999
 8001b18:	00000000 	.word	0x00000000
 8001b1c:	40b1f800 	.word	0x40b1f800
 8001b20:	40533333 	.word	0x40533333
 8001b24:	40790000 	.word	0x40790000

08001b28 <check_co2>:



uint8_t check_co2() {
 8001b28:	b590      	push	{r4, r7, lr}
 8001b2a:	b087      	sub	sp, #28
 8001b2c:	af00      	add	r7, sp, #0
	uint32_t adc_val = 0;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	617b      	str	r3, [r7, #20]
	ADC_ChannelConfTypeDef sConfig = {0};
 8001b32:	1d3b      	adds	r3, r7, #4
 8001b34:	2200      	movs	r2, #0
 8001b36:	601a      	str	r2, [r3, #0]
 8001b38:	605a      	str	r2, [r3, #4]
 8001b3a:	609a      	str	r2, [r3, #8]
 8001b3c:	60da      	str	r2, [r3, #12]
	sConfig.Channel = ADC_CHANNEL_1;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	607b      	str	r3, [r7, #4]
	sConfig.Rank = 1;
 8001b42:	2301      	movs	r3, #1
 8001b44:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8001b46:	2301      	movs	r3, #1
 8001b48:	60fb      	str	r3, [r7, #12]
	HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8001b4a:	1d3b      	adds	r3, r7, #4
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	481f      	ldr	r0, [pc, #124]	@ (8001bcc <check_co2+0xa4>)
 8001b50:	f001 ff6c 	bl	8003a2c <HAL_ADC_ConfigChannel>
	HAL_ADC_Start(&hadc1);
 8001b54:	481d      	ldr	r0, [pc, #116]	@ (8001bcc <check_co2+0xa4>)
 8001b56:	f001 fdcb 	bl	80036f0 <HAL_ADC_Start>
    if (HAL_ADC_PollForConversion(&hadc1, 10) == HAL_OK)
 8001b5a:	210a      	movs	r1, #10
 8001b5c:	481b      	ldr	r0, [pc, #108]	@ (8001bcc <check_co2+0xa4>)
 8001b5e:	f001 fecc 	bl	80038fa <HAL_ADC_PollForConversion>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d11e      	bne.n	8001ba6 <check_co2+0x7e>
    {
    	adc_val = HAL_ADC_GetValue(&hadc1);
 8001b68:	4818      	ldr	r0, [pc, #96]	@ (8001bcc <check_co2+0xa4>)
 8001b6a:	f001 ff51 	bl	8003a10 <HAL_ADC_GetValue>
 8001b6e:	6178      	str	r0, [r7, #20]


    	if(adc_val == 4095 || adc_val == 0) adc_val = co2_ch1 -> old_ch1;
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d002      	beq.n	8001b80 <check_co2+0x58>
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d104      	bne.n	8001b8a <check_co2+0x62>
 8001b80:	4b13      	ldr	r3, [pc, #76]	@ (8001bd0 <check_co2+0xa8>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	885b      	ldrh	r3, [r3, #2]
 8001b86:	617b      	str	r3, [r7, #20]
 8001b88:	e004      	b.n	8001b94 <check_co2+0x6c>
    	else co2_ch1 -> old_ch1 = adc_val;
 8001b8a:	4b11      	ldr	r3, [pc, #68]	@ (8001bd0 <check_co2+0xa8>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	697a      	ldr	r2, [r7, #20]
 8001b90:	b292      	uxth	r2, r2
 8001b92:	805a      	strh	r2, [r3, #2]

    	co2_ch1 ->  co2_Ch1_dis = get_co2_step(adc_val);
 8001b94:	4b0e      	ldr	r3, [pc, #56]	@ (8001bd0 <check_co2+0xa8>)
 8001b96:	681c      	ldr	r4, [r3, #0]
 8001b98:	6978      	ldr	r0, [r7, #20]
 8001b9a:	f7ff ff59 	bl	8001a50 <get_co2_step>
 8001b9e:	eef0 7a40 	vmov.f32	s15, s0
 8001ba2:	edc4 7a02 	vstr	s15, [r4, #8]
	}
    HAL_ADC_Stop(&hadc1);
 8001ba6:	4809      	ldr	r0, [pc, #36]	@ (8001bcc <check_co2+0xa4>)
 8001ba8:	f001 fe74 	bl	8003894 <HAL_ADC_Stop>
    //printf("adc_val2=%d\r\n", adc_val);
    //printf("CO2 PP, = %0.1f\r\n",co2_ch1 ->  co2_Ch1_dis);
    if(adc_val != 4095 || adc_val != 0) return 1;
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d102      	bne.n	8001bbc <check_co2+0x94>
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d001      	beq.n	8001bc0 <check_co2+0x98>
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	e000      	b.n	8001bc2 <check_co2+0x9a>
    else return 0;
 8001bc0:	2300      	movs	r3, #0
    }
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	371c      	adds	r7, #28
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd90      	pop	{r4, r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	2000023c 	.word	0x2000023c
 8001bd0:	20000038 	.word	0x20000038

08001bd4 <read_co2>:
float read_co2(){
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	af00      	add	r7, sp, #0
	if(check_co2()) return co2_ch1 ->  co2_Ch1_dis;
 8001bd8:	f7ff ffa6 	bl	8001b28 <check_co2>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d005      	beq.n	8001bee <read_co2+0x1a>
 8001be2:	4b04      	ldr	r3, [pc, #16]	@ (8001bf4 <read_co2+0x20>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	689b      	ldr	r3, [r3, #8]
 8001be8:	ee07 3a90 	vmov	s15, r3
 8001bec:	e7ff      	b.n	8001bee <read_co2+0x1a>
}
 8001bee:	eeb0 0a67 	vmov.f32	s0, s15
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	20000038 	.word	0x20000038

08001bf8 <isWaterDetected1>:
struct w_h *w_h = &W_h;


//비접촉 방식
float isWaterDetected1()
{
 8001bf8:	b598      	push	{r3, r4, r7, lr}
 8001bfa:	af00      	add	r7, sp, #0
	w_h->w1_h = HAL_GPIO_ReadPin(Water_Chk_GPIO_Port, Water_Chk_Pin);
 8001bfc:	4b0b      	ldr	r3, [pc, #44]	@ (8001c2c <isWaterDetected1+0x34>)
 8001bfe:	681c      	ldr	r4, [r3, #0]
 8001c00:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001c04:	480a      	ldr	r0, [pc, #40]	@ (8001c30 <isWaterDetected1+0x38>)
 8001c06:	f002 fcc3 	bl	8004590 <HAL_GPIO_ReadPin>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	7023      	strb	r3, [r4, #0]
	return (float)(w_h->w1_h == GPIO_PIN_SET);
 8001c0e:	4b07      	ldr	r3, [pc, #28]	@ (8001c2c <isWaterDetected1+0x34>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	781b      	ldrb	r3, [r3, #0]
 8001c14:	2b01      	cmp	r3, #1
 8001c16:	d102      	bne.n	8001c1e <isWaterDetected1+0x26>
 8001c18:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001c1c:	e001      	b.n	8001c22 <isWaterDetected1+0x2a>
 8001c1e:	f04f 0300 	mov.w	r3, #0
 8001c22:	ee07 3a90 	vmov	s15, r3
}
 8001c26:	eeb0 0a67 	vmov.f32	s0, s15
 8001c2a:	bd98      	pop	{r3, r4, r7, pc}
 8001c2c:	2000003c 	.word	0x2000003c
 8001c30:	40020400 	.word	0x40020400

08001c34 <parse_fixed_csv>:


#define MAX_VALUES 5
#define MAX_STR_LEN 20
int Cmd_values[5];
void parse_fixed_csv(char* input) {
 8001c34:	b590      	push	{r4, r7, lr}
 8001c36:	b089      	sub	sp, #36	@ 0x24
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
    char temp[10] = {0};
 8001c3c:	f107 0308 	add.w	r3, r7, #8
 8001c40:	2200      	movs	r2, #0
 8001c42:	601a      	str	r2, [r3, #0]
 8001c44:	605a      	str	r2, [r3, #4]
 8001c46:	811a      	strh	r2, [r3, #8]
    int temp_idx = 0;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	61fb      	str	r3, [r7, #28]
    int val_idx = 0;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	61bb      	str	r3, [r7, #24]

    for (int i = 0; input[i] != '\0' && val_idx < 5; i++) {
 8001c50:	2300      	movs	r3, #0
 8001c52:	617b      	str	r3, [r7, #20]
 8001c54:	e043      	b.n	8001cde <parse_fixed_csv+0xaa>
        if (input[i] == ',' || input[i] == '\n' || input[i] == '\r') {
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	687a      	ldr	r2, [r7, #4]
 8001c5a:	4413      	add	r3, r2
 8001c5c:	781b      	ldrb	r3, [r3, #0]
 8001c5e:	2b2c      	cmp	r3, #44	@ 0x2c
 8001c60:	d00b      	beq.n	8001c7a <parse_fixed_csv+0x46>
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	687a      	ldr	r2, [r7, #4]
 8001c66:	4413      	add	r3, r2
 8001c68:	781b      	ldrb	r3, [r3, #0]
 8001c6a:	2b0a      	cmp	r3, #10
 8001c6c:	d005      	beq.n	8001c7a <parse_fixed_csv+0x46>
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	687a      	ldr	r2, [r7, #4]
 8001c72:	4413      	add	r3, r2
 8001c74:	781b      	ldrb	r3, [r3, #0]
 8001c76:	2b0d      	cmp	r3, #13
 8001c78:	d120      	bne.n	8001cbc <parse_fixed_csv+0x88>
            if (temp_idx > 0) {
 8001c7a:	69fb      	ldr	r3, [r7, #28]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	dd2b      	ble.n	8001cd8 <parse_fixed_csv+0xa4>
            	Cmd_values[val_idx++] = atoi(temp);
 8001c80:	69bc      	ldr	r4, [r7, #24]
 8001c82:	1c63      	adds	r3, r4, #1
 8001c84:	61bb      	str	r3, [r7, #24]
 8001c86:	f107 0308 	add.w	r3, r7, #8
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f006 fa39 	bl	8008102 <atoi>
 8001c90:	4603      	mov	r3, r0
 8001c92:	4a22      	ldr	r2, [pc, #136]	@ (8001d1c <parse_fixed_csv+0xe8>)
 8001c94:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
            	printf(Cmd_values[val_idx-1]);
 8001c98:	69bb      	ldr	r3, [r7, #24]
 8001c9a:	3b01      	subs	r3, #1
 8001c9c:	4a1f      	ldr	r2, [pc, #124]	@ (8001d1c <parse_fixed_csv+0xe8>)
 8001c9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f007 f9de 	bl	8009064 <iprintf>
                temp_idx = 0;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	61fb      	str	r3, [r7, #28]
                memset(temp, 0, sizeof(temp));
 8001cac:	f107 0308 	add.w	r3, r7, #8
 8001cb0:	220a      	movs	r2, #10
 8001cb2:	2100      	movs	r1, #0
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f007 fb3f 	bl	8009338 <memset>
            if (temp_idx > 0) {
 8001cba:	e00d      	b.n	8001cd8 <parse_fixed_csv+0xa4>
            }
        } else {
            if (temp_idx < sizeof(temp) - 1) {
 8001cbc:	69fb      	ldr	r3, [r7, #28]
 8001cbe:	2b08      	cmp	r3, #8
 8001cc0:	d80a      	bhi.n	8001cd8 <parse_fixed_csv+0xa4>
                temp[temp_idx++] = input[i];
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	687a      	ldr	r2, [r7, #4]
 8001cc6:	441a      	add	r2, r3
 8001cc8:	69fb      	ldr	r3, [r7, #28]
 8001cca:	1c59      	adds	r1, r3, #1
 8001ccc:	61f9      	str	r1, [r7, #28]
 8001cce:	7812      	ldrb	r2, [r2, #0]
 8001cd0:	3320      	adds	r3, #32
 8001cd2:	443b      	add	r3, r7
 8001cd4:	f803 2c18 	strb.w	r2, [r3, #-24]
    for (int i = 0; input[i] != '\0' && val_idx < 5; i++) {
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	3301      	adds	r3, #1
 8001cdc:	617b      	str	r3, [r7, #20]
 8001cde:	697b      	ldr	r3, [r7, #20]
 8001ce0:	687a      	ldr	r2, [r7, #4]
 8001ce2:	4413      	add	r3, r2
 8001ce4:	781b      	ldrb	r3, [r3, #0]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d002      	beq.n	8001cf0 <parse_fixed_csv+0xbc>
 8001cea:	69bb      	ldr	r3, [r7, #24]
 8001cec:	2b04      	cmp	r3, #4
 8001cee:	ddb2      	ble.n	8001c56 <parse_fixed_csv+0x22>
            }
        }
    }
    // 마지막 값 처리
    if (temp_idx > 0 && val_idx < 5) {
 8001cf0:	69fb      	ldr	r3, [r7, #28]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	dd0e      	ble.n	8001d14 <parse_fixed_csv+0xe0>
 8001cf6:	69bb      	ldr	r3, [r7, #24]
 8001cf8:	2b04      	cmp	r3, #4
 8001cfa:	dc0b      	bgt.n	8001d14 <parse_fixed_csv+0xe0>
    	Cmd_values[val_idx++] = atoi(temp);
 8001cfc:	69bc      	ldr	r4, [r7, #24]
 8001cfe:	1c63      	adds	r3, r4, #1
 8001d00:	61bb      	str	r3, [r7, #24]
 8001d02:	f107 0308 	add.w	r3, r7, #8
 8001d06:	4618      	mov	r0, r3
 8001d08:	f006 f9fb 	bl	8008102 <atoi>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	4a03      	ldr	r2, [pc, #12]	@ (8001d1c <parse_fixed_csv+0xe8>)
 8001d10:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
    }
}
 8001d14:	bf00      	nop
 8001d16:	3724      	adds	r7, #36	@ 0x24
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd90      	pop	{r4, r7, pc}
 8001d1c:	2000029c 	.word	0x2000029c

08001d20 <fan_on>:
//fan3개
//mode 1 co2 로 인해 환기 시스템
//fan1 = 온도로 인해
#if fan_en

void fan_on(){
 8001d20:	b580      	push	{r7, lr}
 8001d22:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(Fan_On_GPIO_Port, Fan_On_Pin, GPIO_PIN_RESET);
 8001d24:	2200      	movs	r2, #0
 8001d26:	2140      	movs	r1, #64	@ 0x40
 8001d28:	4802      	ldr	r0, [pc, #8]	@ (8001d34 <fan_on+0x14>)
 8001d2a:	f002 fc49 	bl	80045c0 <HAL_GPIO_WritePin>
	  //printf("Fan_on\r\n");

}
 8001d2e:	bf00      	nop
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	40020800 	.word	0x40020800

08001d38 <fan_off>:

void fan_off(){
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(Fan_On_GPIO_Port, Fan_On_Pin, GPIO_PIN_SET);
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	2140      	movs	r1, #64	@ 0x40
 8001d40:	4802      	ldr	r0, [pc, #8]	@ (8001d4c <fan_off+0x14>)
 8001d42:	f002 fc3d 	bl	80045c0 <HAL_GPIO_WritePin>
	  //printf("Fan_off\r\n");

}
 8001d46:	bf00      	nop
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	40020800 	.word	0x40020800

08001d50 <Water_P1_Start>:



#if water_pump_en

void Water_P1_Start() {
 8001d50:	b580      	push	{r7, lr}
 8001d52:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Water_P1_GPIO_Port, Water_P1_Pin, GPIO_PIN_RESET);
 8001d54:	2200      	movs	r2, #0
 8001d56:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001d5a:	4802      	ldr	r0, [pc, #8]	@ (8001d64 <Water_P1_Start+0x14>)
 8001d5c:	f002 fc30 	bl	80045c0 <HAL_GPIO_WritePin>
//	printf("Water pump1 start\r\n");
}
 8001d60:	bf00      	nop
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	40020800 	.word	0x40020800

08001d68 <Water_P2_Start>:
void Water_P2_Start() {
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Water_P2_GPIO_Port, Water_P2_Pin, GPIO_PIN_RESET);
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001d72:	4802      	ldr	r0, [pc, #8]	@ (8001d7c <Water_P2_Start+0x14>)
 8001d74:	f002 fc24 	bl	80045c0 <HAL_GPIO_WritePin>
	//printf("Water pump2 Start\r\n");
}
 8001d78:	bf00      	nop
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	40020800 	.word	0x40020800

08001d80 <Water_P1_Stop>:

void Water_P1_Stop() {
 8001d80:	b580      	push	{r7, lr}
 8001d82:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Water_P1_GPIO_Port, Water_P1_Pin, GPIO_PIN_SET);
 8001d84:	2201      	movs	r2, #1
 8001d86:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001d8a:	4802      	ldr	r0, [pc, #8]	@ (8001d94 <Water_P1_Stop+0x14>)
 8001d8c:	f002 fc18 	bl	80045c0 <HAL_GPIO_WritePin>
	//printf("Water pump1 stop\r\n");
}
 8001d90:	bf00      	nop
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	40020800 	.word	0x40020800

08001d98 <Water_P2_Stop>:
void Water_P2_Stop() {
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Water_P2_GPIO_Port, Water_P2_Pin, GPIO_PIN_SET);
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001da2:	4802      	ldr	r0, [pc, #8]	@ (8001dac <Water_P2_Stop+0x14>)
 8001da4:	f002 fc0c 	bl	80045c0 <HAL_GPIO_WritePin>
	//printf("Water pump2 Stop\r\n");
}
 8001da8:	bf00      	nop
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	40020800 	.word	0x40020800

08001db0 <light_on>:
//}
//void light_off(){
//	HAL_GPIO_WritePin(led1_GPIO_Port, led1_Pin,GPIO_PIN_SET );
//	printf("led off\r\n");
//}
void light_on(uint16_t num){
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b086      	sub	sp, #24
 8001db4:	af02      	add	r7, sp, #8
 8001db6:	4603      	mov	r3, r0
 8001db8:	80fb      	strh	r3, [r7, #6]
	uint16_t Pwm = map(num, 0, 4095, 4095, 0);
 8001dba:	88f8      	ldrh	r0, [r7, #6]
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	9300      	str	r3, [sp, #0]
 8001dc0:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8001dc4:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8001dc8:	2100      	movs	r1, #0
 8001dca:	f000 f813 	bl	8001df4 <map>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	81fb      	strh	r3, [r7, #14]
	HAL_GPIO_WritePin(led2_GPIO_Port, led2_Pin, GPIO_PIN_SET);
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001dd8:	4804      	ldr	r0, [pc, #16]	@ (8001dec <light_on+0x3c>)
 8001dda:	f002 fbf1 	bl	80045c0 <HAL_GPIO_WritePin>
	TIM11 -> CCR1 = num;
 8001dde:	4a04      	ldr	r2, [pc, #16]	@ (8001df0 <light_on+0x40>)
 8001de0:	88fb      	ldrh	r3, [r7, #6]
 8001de2:	6353      	str	r3, [r2, #52]	@ 0x34


}
 8001de4:	bf00      	nop
 8001de6:	3710      	adds	r7, #16
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	40020400 	.word	0x40020400
 8001df0:	40014800 	.word	0x40014800

08001df4 <map>:
		HAL_Delay(50);
	}

}

uint16_t map(uint16_t value, uint16_t in_min, uint16_t in_max, uint16_t out_min, uint16_t out_max) {
 8001df4:	b490      	push	{r4, r7}
 8001df6:	b082      	sub	sp, #8
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	4604      	mov	r4, r0
 8001dfc:	4608      	mov	r0, r1
 8001dfe:	4611      	mov	r1, r2
 8001e00:	461a      	mov	r2, r3
 8001e02:	4623      	mov	r3, r4
 8001e04:	80fb      	strh	r3, [r7, #6]
 8001e06:	4603      	mov	r3, r0
 8001e08:	80bb      	strh	r3, [r7, #4]
 8001e0a:	460b      	mov	r3, r1
 8001e0c:	807b      	strh	r3, [r7, #2]
 8001e0e:	4613      	mov	r3, r2
 8001e10:	803b      	strh	r3, [r7, #0]
    return (value - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8001e12:	88fa      	ldrh	r2, [r7, #6]
 8001e14:	88bb      	ldrh	r3, [r7, #4]
 8001e16:	1ad3      	subs	r3, r2, r3
 8001e18:	8a39      	ldrh	r1, [r7, #16]
 8001e1a:	883a      	ldrh	r2, [r7, #0]
 8001e1c:	1a8a      	subs	r2, r1, r2
 8001e1e:	fb03 f202 	mul.w	r2, r3, r2
 8001e22:	8879      	ldrh	r1, [r7, #2]
 8001e24:	88bb      	ldrh	r3, [r7, #4]
 8001e26:	1acb      	subs	r3, r1, r3
 8001e28:	fb92 f3f3 	sdiv	r3, r2, r3
 8001e2c:	b29a      	uxth	r2, r3
 8001e2e:	883b      	ldrh	r3, [r7, #0]
 8001e30:	4413      	add	r3, r2
 8001e32:	b29b      	uxth	r3, r3
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	3708      	adds	r7, #8
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bc90      	pop	{r4, r7}
 8001e3c:	4770      	bx	lr
	...

08001e40 <process_commands>:

//


//제어 명령어 -  팬+팰티어, led. 팬, 모터 센서(급수)
void process_commands(int* Cmd_values) {
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b084      	sub	sp, #16
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
	int fan_flag = 0;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	60fb      	str	r3, [r7, #12]

    for (int i = 0; i < 4; i++) {
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	60bb      	str	r3, [r7, #8]
 8001e50:	e07a      	b.n	8001f48 <process_commands+0x108>
        switch (i) {
 8001e52:	68bb      	ldr	r3, [r7, #8]
 8001e54:	2b03      	cmp	r3, #3
 8001e56:	d874      	bhi.n	8001f42 <process_commands+0x102>
 8001e58:	a201      	add	r2, pc, #4	@ (adr r2, 8001e60 <process_commands+0x20>)
 8001e5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e5e:	bf00      	nop
 8001e60:	08001e71 	.word	0x08001e71
 8001e64:	08001ead 	.word	0x08001ead
 8001e68:	08001ee9 	.word	0x08001ee9
 8001e6c:	08001efd 	.word	0x08001efd
            case 0: // 온도 관련

                if (Cmd_values[i]==0) {
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	009b      	lsls	r3, r3, #2
 8001e74:	687a      	ldr	r2, [r7, #4]
 8001e76:	4413      	add	r3, r2
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d102      	bne.n	8001e84 <process_commands+0x44>
                	Peltier_Heating();
 8001e7e:	f000 f90b 	bl	8002098 <Peltier_Heating>
                	Peltier_Normal();
                }
                else if(Cmd_values[i]==2) {
                    Peltier_Cooling();
                }
                break;
 8001e82:	e059      	b.n	8001f38 <process_commands+0xf8>
                else if(Cmd_values[i]==1) {
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	009b      	lsls	r3, r3, #2
 8001e88:	687a      	ldr	r2, [r7, #4]
 8001e8a:	4413      	add	r3, r2
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	2b01      	cmp	r3, #1
 8001e90:	d102      	bne.n	8001e98 <process_commands+0x58>
                	Peltier_Normal();
 8001e92:	f000 f919 	bl	80020c8 <Peltier_Normal>
                break;
 8001e96:	e04f      	b.n	8001f38 <process_commands+0xf8>
                else if(Cmd_values[i]==2) {
 8001e98:	68bb      	ldr	r3, [r7, #8]
 8001e9a:	009b      	lsls	r3, r3, #2
 8001e9c:	687a      	ldr	r2, [r7, #4]
 8001e9e:	4413      	add	r3, r2
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	2b02      	cmp	r3, #2
 8001ea4:	d148      	bne.n	8001f38 <process_commands+0xf8>
                    Peltier_Cooling();
 8001ea6:	f000 f8df 	bl	8002068 <Peltier_Cooling>
                break;
 8001eaa:	e045      	b.n	8001f38 <process_commands+0xf8>
            case 1: // 습도 관련
            	if (Cmd_values[i]==0) {
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	009b      	lsls	r3, r3, #2
 8001eb0:	687a      	ldr	r2, [r7, #4]
 8001eb2:	4413      	add	r3, r2
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d102      	bne.n	8001ec0 <process_commands+0x80>
                	fan_flag = 1;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	60fb      	str	r3, [r7, #12]
                	fan_off();
                }
            	else if(Cmd_values[i]==2) {
                	fan_off();
                }
                break;
 8001ebe:	e03d      	b.n	8001f3c <process_commands+0xfc>
            	else if(Cmd_values[i]==1) {
 8001ec0:	68bb      	ldr	r3, [r7, #8]
 8001ec2:	009b      	lsls	r3, r3, #2
 8001ec4:	687a      	ldr	r2, [r7, #4]
 8001ec6:	4413      	add	r3, r2
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	2b01      	cmp	r3, #1
 8001ecc:	d102      	bne.n	8001ed4 <process_commands+0x94>
                	fan_off();
 8001ece:	f7ff ff33 	bl	8001d38 <fan_off>
                break;
 8001ed2:	e033      	b.n	8001f3c <process_commands+0xfc>
            	else if(Cmd_values[i]==2) {
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	009b      	lsls	r3, r3, #2
 8001ed8:	687a      	ldr	r2, [r7, #4]
 8001eda:	4413      	add	r3, r2
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	2b02      	cmp	r3, #2
 8001ee0:	d12c      	bne.n	8001f3c <process_commands+0xfc>
                	fan_off();
 8001ee2:	f7ff ff29 	bl	8001d38 <fan_off>
                break;
 8001ee6:	e029      	b.n	8001f3c <process_commands+0xfc>
            case 2: // Light 관련
            	light_on(Cmd_values[i]);
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	009b      	lsls	r3, r3, #2
 8001eec:	687a      	ldr	r2, [r7, #4]
 8001eee:	4413      	add	r3, r2
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	b29b      	uxth	r3, r3
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f7ff ff5b 	bl	8001db0 <light_on>
                break;
 8001efa:	e022      	b.n	8001f42 <process_commands+0x102>

            case 3: // CO2 관련
            	if (Cmd_values[i]==0) {
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	009b      	lsls	r3, r3, #2
 8001f00:	687a      	ldr	r2, [r7, #4]
 8001f02:	4413      	add	r3, r2
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d102      	bne.n	8001f10 <process_commands+0xd0>
                	fan_flag = 1;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	60fb      	str	r3, [r7, #12]
                	fan_off();
                }
            	else if(Cmd_values[i]==2) {
                	fan_off();
                }
                break;
 8001f0e:	e017      	b.n	8001f40 <process_commands+0x100>
            	else if(Cmd_values[i]==1) {
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	009b      	lsls	r3, r3, #2
 8001f14:	687a      	ldr	r2, [r7, #4]
 8001f16:	4413      	add	r3, r2
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	2b01      	cmp	r3, #1
 8001f1c:	d102      	bne.n	8001f24 <process_commands+0xe4>
                	fan_off();
 8001f1e:	f7ff ff0b 	bl	8001d38 <fan_off>
                break;
 8001f22:	e00d      	b.n	8001f40 <process_commands+0x100>
            	else if(Cmd_values[i]==2) {
 8001f24:	68bb      	ldr	r3, [r7, #8]
 8001f26:	009b      	lsls	r3, r3, #2
 8001f28:	687a      	ldr	r2, [r7, #4]
 8001f2a:	4413      	add	r3, r2
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	2b02      	cmp	r3, #2
 8001f30:	d106      	bne.n	8001f40 <process_commands+0x100>
                	fan_off();
 8001f32:	f7ff ff01 	bl	8001d38 <fan_off>
                break;
 8001f36:	e003      	b.n	8001f40 <process_commands+0x100>
                break;
 8001f38:	bf00      	nop
 8001f3a:	e002      	b.n	8001f42 <process_commands+0x102>
                break;
 8001f3c:	bf00      	nop
 8001f3e:	e000      	b.n	8001f42 <process_commands+0x102>
                break;
 8001f40:	bf00      	nop
    for (int i = 0; i < 4; i++) {
 8001f42:	68bb      	ldr	r3, [r7, #8]
 8001f44:	3301      	adds	r3, #1
 8001f46:	60bb      	str	r3, [r7, #8]
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	2b03      	cmp	r3, #3
 8001f4c:	dd81      	ble.n	8001e52 <process_commands+0x12>
        }
    }
    if(fan_flag == 1){
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	2b01      	cmp	r3, #1
 8001f52:	d101      	bne.n	8001f58 <process_commands+0x118>
    	fan_on();
 8001f54:	f7ff fee4 	bl	8001d20 <fan_on>
    }

}
 8001f58:	bf00      	nop
 8001f5a:	3710      	adds	r7, #16
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}

08001f60 <manual_process>:

extern uint8_t door_flg;
void manual_process(int* Cmd_values){
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b084      	sub	sp, #16
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
	int fan_flag = 0;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	60fb      	str	r3, [r7, #12]

	//급수
		if (Cmd_values[1]==0){
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	3304      	adds	r3, #4
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d10a      	bne.n	8001f8c <manual_process+0x2c>
			if(Cmd_values[2]==0){
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	3308      	adds	r3, #8
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d102      	bne.n	8001f86 <manual_process+0x26>

				Water_P1_Start();
 8001f80:	f7ff fee6 	bl	8001d50 <Water_P1_Start>

		}



}
 8001f84:	e05f      	b.n	8002046 <manual_process+0xe6>
				Water_P1_Stop();
 8001f86:	f7ff fefb 	bl	8001d80 <Water_P1_Stop>
}
 8001f8a:	e05c      	b.n	8002046 <manual_process+0xe6>
		else if (Cmd_values[1]==1){
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	3304      	adds	r3, #4
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	2b01      	cmp	r3, #1
 8001f94:	d10a      	bne.n	8001fac <manual_process+0x4c>
			if(Cmd_values[2]==0){
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	3308      	adds	r3, #8
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d102      	bne.n	8001fa6 <manual_process+0x46>
				Water_P2_Stop();
 8001fa0:	f7ff fefa 	bl	8001d98 <Water_P2_Stop>
}
 8001fa4:	e04f      	b.n	8002046 <manual_process+0xe6>
				Water_P2_Start();
 8001fa6:	f7ff fedf 	bl	8001d68 <Water_P2_Start>
}
 8001faa:	e04c      	b.n	8002046 <manual_process+0xe6>
		else if (Cmd_values[1]==2){
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	3304      	adds	r3, #4
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	2b02      	cmp	r3, #2
 8001fb4:	d11b      	bne.n	8001fee <manual_process+0x8e>
			if(Cmd_values[2]==0){
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	3308      	adds	r3, #8
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d105      	bne.n	8001fcc <manual_process+0x6c>
				printf("Heating Mode(Mamual Control\r\n)");
 8001fc0:	4823      	ldr	r0, [pc, #140]	@ (8002050 <manual_process+0xf0>)
 8001fc2:	f007 f84f 	bl	8009064 <iprintf>
				Peltier_Heating();
 8001fc6:	f000 f867 	bl	8002098 <Peltier_Heating>
}
 8001fca:	e03c      	b.n	8002046 <manual_process+0xe6>
			else if(Cmd_values[2]==1){
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	3308      	adds	r3, #8
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	d105      	bne.n	8001fe2 <manual_process+0x82>
				printf("Normal Mode(Mamual Control\r\n)");
 8001fd6:	481f      	ldr	r0, [pc, #124]	@ (8002054 <manual_process+0xf4>)
 8001fd8:	f007 f844 	bl	8009064 <iprintf>
				Peltier_Normal();
 8001fdc:	f000 f874 	bl	80020c8 <Peltier_Normal>
}
 8001fe0:	e031      	b.n	8002046 <manual_process+0xe6>
				printf("Cooling Mode(Mamual Control\r\n)");
 8001fe2:	481d      	ldr	r0, [pc, #116]	@ (8002058 <manual_process+0xf8>)
 8001fe4:	f007 f83e 	bl	8009064 <iprintf>
				Peltier_Cooling();
 8001fe8:	f000 f83e 	bl	8002068 <Peltier_Cooling>
}
 8001fec:	e02b      	b.n	8002046 <manual_process+0xe6>
		else if (Cmd_values[1]==3){
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	3304      	adds	r3, #4
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	2b03      	cmp	r3, #3
 8001ff6:	d026      	beq.n	8002046 <manual_process+0xe6>
		else if (Cmd_values[1]==4){
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	3304      	adds	r3, #4
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	2b04      	cmp	r3, #4
 8002000:	d110      	bne.n	8002024 <manual_process+0xc4>
			if(Cmd_values[2]==0){
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	3308      	adds	r3, #8
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d105      	bne.n	8002018 <manual_process+0xb8>
				printf("Fan Off(Mamual Control\r\n)");
 800200c:	4813      	ldr	r0, [pc, #76]	@ (800205c <manual_process+0xfc>)
 800200e:	f007 f829 	bl	8009064 <iprintf>
				fan_off();
 8002012:	f7ff fe91 	bl	8001d38 <fan_off>
}
 8002016:	e016      	b.n	8002046 <manual_process+0xe6>
				fan_on();
 8002018:	f7ff fe82 	bl	8001d20 <fan_on>
				printf("Fan On(Mamual Control\r\n)");
 800201c:	4810      	ldr	r0, [pc, #64]	@ (8002060 <manual_process+0x100>)
 800201e:	f007 f821 	bl	8009064 <iprintf>
}
 8002022:	e010      	b.n	8002046 <manual_process+0xe6>
		else if(Cmd_values[1] == 5){
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	3304      	adds	r3, #4
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	2b05      	cmp	r3, #5
 800202c:	d10b      	bne.n	8002046 <manual_process+0xe6>
			if(Cmd_values[2]==0){
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	3308      	adds	r3, #8
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d103      	bne.n	8002040 <manual_process+0xe0>
				door_flg = 2;
 8002038:	4b0a      	ldr	r3, [pc, #40]	@ (8002064 <manual_process+0x104>)
 800203a:	2202      	movs	r2, #2
 800203c:	701a      	strb	r2, [r3, #0]
}
 800203e:	e002      	b.n	8002046 <manual_process+0xe6>
				door_flg = 1;
 8002040:	4b08      	ldr	r3, [pc, #32]	@ (8002064 <manual_process+0x104>)
 8002042:	2201      	movs	r2, #1
 8002044:	701a      	strb	r2, [r3, #0]
}
 8002046:	bf00      	nop
 8002048:	3710      	adds	r7, #16
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	0800c900 	.word	0x0800c900
 8002054:	0800c920 	.word	0x0800c920
 8002058:	0800c940 	.word	0x0800c940
 800205c:	0800c960 	.word	0x0800c960
 8002060:	0800c97c 	.word	0x0800c97c
 8002064:	200002de 	.word	0x200002de

08002068 <Peltier_Cooling>:
//펠티어 소자

#if pelt_en
void Peltier_Cooling()
{
 8002068:	b580      	push	{r7, lr}
 800206a:	af00      	add	r7, sp, #0
	//printf("Cooling Mode\r\n");
	HAL_GPIO_WritePin(Peltier1_GPIO_Port, Peltier1_Pin, GPIO_PIN_SET);   // IN1 = HIGH
 800206c:	2201      	movs	r2, #1
 800206e:	2104      	movs	r1, #4
 8002070:	4807      	ldr	r0, [pc, #28]	@ (8002090 <Peltier_Cooling+0x28>)
 8002072:	f002 faa5 	bl	80045c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Peltier2_GPIO_Port, Peltier2_Pin, GPIO_PIN_RESET); // IN2 = LOW
 8002076:	2200      	movs	r2, #0
 8002078:	2108      	movs	r1, #8
 800207a:	4805      	ldr	r0, [pc, #20]	@ (8002090 <Peltier_Cooling+0x28>)
 800207c:	f002 faa0 	bl	80045c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Fan_Peltier1_GPIO_Port, Fan_Peltier1_Pin, GPIO_PIN_SET);
 8002080:	2201      	movs	r2, #1
 8002082:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002086:	4803      	ldr	r0, [pc, #12]	@ (8002094 <Peltier_Cooling+0x2c>)
 8002088:	f002 fa9a 	bl	80045c0 <HAL_GPIO_WritePin>


}
 800208c:	bf00      	nop
 800208e:	bd80      	pop	{r7, pc}
 8002090:	40020800 	.word	0x40020800
 8002094:	40020400 	.word	0x40020400

08002098 <Peltier_Heating>:

// 난방 모드
void Peltier_Heating()
{
 8002098:	b580      	push	{r7, lr}
 800209a:	af00      	add	r7, sp, #0
	//printf("Heating Mode\r\n");
	HAL_GPIO_WritePin(Peltier1_GPIO_Port, Peltier1_Pin, GPIO_PIN_RESET);
 800209c:	2200      	movs	r2, #0
 800209e:	2104      	movs	r1, #4
 80020a0:	4807      	ldr	r0, [pc, #28]	@ (80020c0 <Peltier_Heating+0x28>)
 80020a2:	f002 fa8d 	bl	80045c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Peltier2_GPIO_Port, Peltier2_Pin, GPIO_PIN_SET);
 80020a6:	2201      	movs	r2, #1
 80020a8:	2108      	movs	r1, #8
 80020aa:	4805      	ldr	r0, [pc, #20]	@ (80020c0 <Peltier_Heating+0x28>)
 80020ac:	f002 fa88 	bl	80045c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Fan_Peltier1_GPIO_Port, Fan_Peltier1_Pin, GPIO_PIN_SET);
 80020b0:	2201      	movs	r2, #1
 80020b2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80020b6:	4803      	ldr	r0, [pc, #12]	@ (80020c4 <Peltier_Heating+0x2c>)
 80020b8:	f002 fa82 	bl	80045c0 <HAL_GPIO_WritePin>

}
 80020bc:	bf00      	nop
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	40020800 	.word	0x40020800
 80020c4:	40020400 	.word	0x40020400

080020c8 <Peltier_Normal>:

void Peltier_Normal()
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	af00      	add	r7, sp, #0
	//printf("Normal Mode\r\n");
	HAL_GPIO_WritePin(Peltier1_GPIO_Port, Peltier1_Pin, GPIO_PIN_RESET);
 80020cc:	2200      	movs	r2, #0
 80020ce:	2104      	movs	r1, #4
 80020d0:	4807      	ldr	r0, [pc, #28]	@ (80020f0 <Peltier_Normal+0x28>)
 80020d2:	f002 fa75 	bl	80045c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Peltier1_GPIO_Port, Peltier1_Pin, GPIO_PIN_RESET);
 80020d6:	2200      	movs	r2, #0
 80020d8:	2104      	movs	r1, #4
 80020da:	4805      	ldr	r0, [pc, #20]	@ (80020f0 <Peltier_Normal+0x28>)
 80020dc:	f002 fa70 	bl	80045c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Fan_Peltier1_GPIO_Port, Fan_Peltier1_Pin, GPIO_PIN_RESET);
 80020e0:	2200      	movs	r2, #0
 80020e2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80020e6:	4803      	ldr	r0, [pc, #12]	@ (80020f4 <Peltier_Normal+0x2c>)
 80020e8:	f002 fa6a 	bl	80045c0 <HAL_GPIO_WritePin>

}
 80020ec:	bf00      	nop
 80020ee:	bd80      	pop	{r7, pc}
 80020f0:	40020800 	.word	0x40020800
 80020f4:	40020400 	.word	0x40020400

080020f8 <door_open>:
//    // 현실 거리로 *2
//    return local_time / 58 * 2;
//}


void door_open(){
 80020f8:	b580      	push	{r7, lr}
 80020fa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(door1_GPIO_Port, door1_Pin, 0);
 80020fc:	2200      	movs	r2, #0
 80020fe:	2101      	movs	r1, #1
 8002100:	4808      	ldr	r0, [pc, #32]	@ (8002124 <door_open+0x2c>)
 8002102:	f002 fa5d 	bl	80045c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(door2_GPIO_Port, door2_Pin, 1);
 8002106:	2201      	movs	r2, #1
 8002108:	2102      	movs	r1, #2
 800210a:	4806      	ldr	r0, [pc, #24]	@ (8002124 <door_open+0x2c>)
 800210c:	f002 fa58 	bl	80045c0 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 8002110:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002114:	f001 fa84 	bl	8003620 <HAL_Delay>
    printf("door open(Manual Control)\r\n");
 8002118:	4803      	ldr	r0, [pc, #12]	@ (8002128 <door_open+0x30>)
 800211a:	f007 f80b 	bl	8009134 <puts>
}
 800211e:	bf00      	nop
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	40020800 	.word	0x40020800
 8002128:	0800c998 	.word	0x0800c998

0800212c <door_close>:

void door_close(){
 800212c:	b580      	push	{r7, lr}
 800212e:	af00      	add	r7, sp, #0
	HAL_Delay(3000);
 8002130:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8002134:	f001 fa74 	bl	8003620 <HAL_Delay>
	HAL_GPIO_WritePin(door1_GPIO_Port, door1_Pin, 1);
 8002138:	2201      	movs	r2, #1
 800213a:	2101      	movs	r1, #1
 800213c:	4808      	ldr	r0, [pc, #32]	@ (8002160 <door_close+0x34>)
 800213e:	f002 fa3f 	bl	80045c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(door2_GPIO_Port, door2_Pin, 0);
 8002142:	2200      	movs	r2, #0
 8002144:	2102      	movs	r1, #2
 8002146:	4806      	ldr	r0, [pc, #24]	@ (8002160 <door_close+0x34>)
 8002148:	f002 fa3a 	bl	80045c0 <HAL_GPIO_WritePin>
	HAL_Delay(600);
 800214c:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8002150:	f001 fa66 	bl	8003620 <HAL_Delay>
    printf("door close(Manual Control)\r\n");
 8002154:	4803      	ldr	r0, [pc, #12]	@ (8002164 <door_close+0x38>)
 8002156:	f006 ffed 	bl	8009134 <puts>
}
 800215a:	bf00      	nop
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	40020800 	.word	0x40020800
 8002164:	0800c9b4 	.word	0x0800c9b4

08002168 <door_stop>:

void door_stop(){
 8002168:	b580      	push	{r7, lr}
 800216a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(door1_GPIO_Port, door1_Pin, 0);
 800216c:	2200      	movs	r2, #0
 800216e:	2101      	movs	r1, #1
 8002170:	4804      	ldr	r0, [pc, #16]	@ (8002184 <door_stop+0x1c>)
 8002172:	f002 fa25 	bl	80045c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(door2_GPIO_Port, door2_Pin, 0);
 8002176:	2200      	movs	r2, #0
 8002178:	2102      	movs	r1, #2
 800217a:	4802      	ldr	r0, [pc, #8]	@ (8002184 <door_stop+0x1c>)
 800217c:	f002 fa20 	bl	80045c0 <HAL_GPIO_WritePin>
    //printf("door stop\r\n");
}
 8002180:	bf00      	nop
 8002182:	bd80      	pop	{r7, pc}
 8002184:	40020800 	.word	0x40020800

08002188 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002188:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800218c:	b090      	sub	sp, #64	@ 0x40
 800218e:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002190:	f001 fa04 	bl	800359c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002194:	f000 f93e 	bl	8002414 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002198:	f7ff f876 	bl	8001288 <MX_GPIO_Init>
  MX_TIM6_Init();
 800219c:	f000 ff08 	bl	8002fb0 <MX_TIM6_Init>
  MX_USART1_UART_Init();
 80021a0:	f001 f8fa 	bl	8003398 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80021a4:	f001 f922 	bl	80033ec <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80021a8:	f7fe ff6a 	bl	8001080 <MX_ADC1_Init>
  MX_TIM1_Init();
 80021ac:	f000 fd54 	bl	8002c58 <MX_TIM1_Init>
  MX_TIM2_Init();
 80021b0:	f000 fdc6 	bl	8002d40 <MX_TIM2_Init>
  MX_TIM3_Init();
 80021b4:	f000 fe12 	bl	8002ddc <MX_TIM3_Init>
  MX_TIM4_Init();
 80021b8:	f000 fe5e 	bl	8002e78 <MX_TIM4_Init>
  MX_TIM5_Init();
 80021bc:	f000 feaa 	bl	8002f14 <MX_TIM5_Init>
  MX_DAC_Init();
 80021c0:	f7fe fff4 	bl	80011ac <MX_DAC_Init>
  MX_TIM11_Init();
 80021c4:	f000 ff60 	bl	8003088 <MX_TIM11_Init>
  MX_SPI1_Init();
 80021c8:	f000 fad6 	bl	8002778 <MX_SPI1_Init>
  MX_TIM7_Init();
 80021cc:	f000 ff26 	bl	800301c <MX_TIM7_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80021d0:	f000 f98e 	bl	80024f0 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim6);
 80021d4:	4878      	ldr	r0, [pc, #480]	@ (80023b8 <main+0x230>)
 80021d6:	f003 f8ff 	bl	80053d8 <HAL_TIM_Base_Start>

  HAL_ADC_Start(&hadc1);
 80021da:	4878      	ldr	r0, [pc, #480]	@ (80023bc <main+0x234>)
 80021dc:	f001 fa88 	bl	80036f0 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80021e0:	f04f 31ff 	mov.w	r1, #4294967295
 80021e4:	4875      	ldr	r0, [pc, #468]	@ (80023bc <main+0x234>)
 80021e6:	f001 fb88 	bl	80038fa <HAL_ADC_PollForConversion>

  HAL_TIM_Base_Start_IT(&htim2);
 80021ea:	4875      	ldr	r0, [pc, #468]	@ (80023c0 <main+0x238>)
 80021ec:	f003 f95c 	bl	80054a8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 80021f0:	4874      	ldr	r0, [pc, #464]	@ (80023c4 <main+0x23c>)
 80021f2:	f003 f959 	bl	80054a8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 80021f6:	4874      	ldr	r0, [pc, #464]	@ (80023c8 <main+0x240>)
 80021f8:	f003 f956 	bl	80054a8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim5);
 80021fc:	4873      	ldr	r0, [pc, #460]	@ (80023cc <main+0x244>)
 80021fe:	f003 f953 	bl	80054a8 <HAL_TIM_Base_Start_IT>
  //HAL_TIM_Base_Start_IT(&htim1);
  HAL_TIM_PWM_Start(&htim11, TIM_CHANNEL_1);
 8002202:	2100      	movs	r1, #0
 8002204:	4872      	ldr	r0, [pc, #456]	@ (80023d0 <main+0x248>)
 8002206:	f003 fa19 	bl	800563c <HAL_TIM_PWM_Start>

  //
  HAL_UART_Receive_IT(&huart1, (uint8_t*)Test_Msg, 16);
 800220a:	2210      	movs	r2, #16
 800220c:	4971      	ldr	r1, [pc, #452]	@ (80023d4 <main+0x24c>)
 800220e:	4872      	ldr	r0, [pc, #456]	@ (80023d8 <main+0x250>)
 8002210:	f004 fc1f 	bl	8006a52 <HAL_UART_Receive_IT>
  uart_state = UART_STATE_WAIT_TEST;
 8002214:	4b71      	ldr	r3, [pc, #452]	@ (80023dc <main+0x254>)
 8002216:	2200      	movs	r2, #0
 8002218:	701a      	strb	r2, [r3, #0]

  fan_off();
 800221a:	f7ff fd8d 	bl	8001d38 <fan_off>
  Water_P1_Stop();
 800221e:	f7ff fdaf 	bl	8001d80 <Water_P1_Stop>
  Water_P2_Stop();
 8002222:	f7ff fdb9 	bl	8001d98 <Water_P2_Stop>
  while (1)
  {



	  if (uart_state == UART_STATE_WAIT_TEST && test_ready)
 8002226:	4b6d      	ldr	r3, [pc, #436]	@ (80023dc <main+0x254>)
 8002228:	781b      	ldrb	r3, [r3, #0]
 800222a:	b2db      	uxtb	r3, r3
 800222c:	2b00      	cmp	r3, #0
 800222e:	d13e      	bne.n	80022ae <main+0x126>
 8002230:	4b6b      	ldr	r3, [pc, #428]	@ (80023e0 <main+0x258>)
 8002232:	781b      	ldrb	r3, [r3, #0]
 8002234:	b2db      	uxtb	r3, r3
 8002236:	2b00      	cmp	r3, #0
 8002238:	d039      	beq.n	80022ae <main+0x126>
	      {
	          test_ready = 0;  // 사용 후 초기화
 800223a:	4b69      	ldr	r3, [pc, #420]	@ (80023e0 <main+0x258>)
 800223c:	2200      	movs	r2, #0
 800223e:	701a      	strb	r2, [r3, #0]
	          Test_Msg[15] = '\0';  // 문자열 종료
 8002240:	4b64      	ldr	r3, [pc, #400]	@ (80023d4 <main+0x24c>)
 8002242:	2200      	movs	r2, #0
 8002244:	73da      	strb	r2, [r3, #15]
	          printf("Received Test Msg: %s\r\n", Test_Msg);
 8002246:	4963      	ldr	r1, [pc, #396]	@ (80023d4 <main+0x24c>)
 8002248:	4866      	ldr	r0, [pc, #408]	@ (80023e4 <main+0x25c>)
 800224a:	f006 ff0b 	bl	8009064 <iprintf>

	          if (strcmp(Test_Msg, "STM32 Test Mode") == 0)
 800224e:	4966      	ldr	r1, [pc, #408]	@ (80023e8 <main+0x260>)
 8002250:	4860      	ldr	r0, [pc, #384]	@ (80023d4 <main+0x24c>)
 8002252:	f7fd ffdd 	bl	8000210 <strcmp>
 8002256:	4603      	mov	r3, r0
 8002258:	2b00      	cmp	r3, #0
 800225a:	d122      	bne.n	80022a2 <main+0x11a>
	          {
	              printf("Test message matched. Switching to CMD mode.\r\n");
 800225c:	4863      	ldr	r0, [pc, #396]	@ (80023ec <main+0x264>)
 800225e:	f006 ff69 	bl	8009134 <puts>

	              uart_state = UART_STATE_WAIT_CMD;
 8002262:	4b5e      	ldr	r3, [pc, #376]	@ (80023dc <main+0x254>)
 8002264:	2201      	movs	r2, #1
 8002266:	701a      	strb	r2, [r3, #0]

	              if (DHT11_Sensor_Test() && check_light())
 8002268:	f7ff fa5c 	bl	8001724 <DHT11_Sensor_Test>
 800226c:	4603      	mov	r3, r0
 800226e:	2b00      	cmp	r3, #0
 8002270:	f000 809c 	beq.w	80023ac <main+0x224>
 8002274:	f7ff fb12 	bl	800189c <check_light>
 8002278:	4603      	mov	r3, r0
 800227a:	2b00      	cmp	r3, #0
 800227c:	f000 8096 	beq.w	80023ac <main+0x224>
	              {
	                  Sensor_flag = 1;
 8002280:	4b5b      	ldr	r3, [pc, #364]	@ (80023f0 <main+0x268>)
 8002282:	2201      	movs	r2, #1
 8002284:	701a      	strb	r2, [r3, #0]
	                  printf("Sensor Check Complete\r\n");
 8002286:	485b      	ldr	r0, [pc, #364]	@ (80023f4 <main+0x26c>)
 8002288:	f006 ff54 	bl	8009134 <puts>
	                  HAL_UART_Transmit(&huart1, (uint8_t*)pass_sig, strlen(pass_sig), 10);
 800228c:	485a      	ldr	r0, [pc, #360]	@ (80023f8 <main+0x270>)
 800228e:	f7fe f81f 	bl	80002d0 <strlen>
 8002292:	4603      	mov	r3, r0
 8002294:	b29a      	uxth	r2, r3
 8002296:	230a      	movs	r3, #10
 8002298:	4957      	ldr	r1, [pc, #348]	@ (80023f8 <main+0x270>)
 800229a:	484f      	ldr	r0, [pc, #316]	@ (80023d8 <main+0x250>)
 800229c:	f004 fb4e 	bl	800693c <HAL_UART_Transmit>
	          if (strcmp(Test_Msg, "STM32 Test Mode") == 0)
 80022a0:	e084      	b.n	80023ac <main+0x224>
	             // HAL_UART_Receive_IT(&huart1, (uint8_t*)Cmd_Msg, 10);
	          }
	          else
	          {
	              // 테스트 메시지 다시 수신 준비
	              HAL_UART_Receive_IT(&huart1, (uint8_t*)Test_Msg, 16);
 80022a2:	2210      	movs	r2, #16
 80022a4:	494b      	ldr	r1, [pc, #300]	@ (80023d4 <main+0x24c>)
 80022a6:	484c      	ldr	r0, [pc, #304]	@ (80023d8 <main+0x250>)
 80022a8:	f004 fbd3 	bl	8006a52 <HAL_UART_Receive_IT>
	          if (strcmp(Test_Msg, "STM32 Test Mode") == 0)
 80022ac:	e07e      	b.n	80023ac <main+0x224>
	          }
	      }

	      else if (uart_state == UART_STATE_WAIT_CMD)
 80022ae:	4b4b      	ldr	r3, [pc, #300]	@ (80023dc <main+0x254>)
 80022b0:	781b      	ldrb	r3, [r3, #0]
 80022b2:	b2db      	uxtb	r3, r3
 80022b4:	2b01      	cmp	r3, #1
 80022b6:	d17a      	bne.n	80023ae <main+0x226>
	      {
	          // 센서 데이터 측정
	          float TEMP = DHT11_Run_TEMP();
 80022b8:	f7ff fadc 	bl	8001874 <DHT11_Run_TEMP>
 80022bc:	ed87 0a07 	vstr	s0, [r7, #28]
	          float RH = DHT11_Run_RH();
 80022c0:	f7ff fac4 	bl	800184c <DHT11_Run_RH>
 80022c4:	ed87 0a06 	vstr	s0, [r7, #24]
	          float lux = read_light_lux();
 80022c8:	f7ff fbb0 	bl	8001a2c <read_light_lux>
 80022cc:	ed87 0a05 	vstr	s0, [r7, #20]
	          float co2 = read_co2();
 80022d0:	f7ff fc80 	bl	8001bd4 <read_co2>
 80022d4:	ed87 0a04 	vstr	s0, [r7, #16]
	          float w_1 = isWaterDetected1();
 80022d8:	f7ff fc8e 	bl	8001bf8 <isWaterDetected1>
 80022dc:	ed87 0a03 	vstr	s0, [r7, #12]
			  //door_flag = update_door_state(door_flag, detected);
			  //handle_door_action(door_flag);


	          //printf("TEMP: %.1f RH: %.1f CO2: %.1f LUX: %.1f WATER: %.1f\r\n", TEMP, RH, co2, lux, w_1);
	          if(door_flg == 1){
 80022e0:	4b46      	ldr	r3, [pc, #280]	@ (80023fc <main+0x274>)
 80022e2:	781b      	ldrb	r3, [r3, #0]
 80022e4:	2b01      	cmp	r3, #1
 80022e6:	d107      	bne.n	80022f8 <main+0x170>
	        	  door_open();
 80022e8:	f7ff ff06 	bl	80020f8 <door_open>
	        	  door_flg = 0;
 80022ec:	4b43      	ldr	r3, [pc, #268]	@ (80023fc <main+0x274>)
 80022ee:	2200      	movs	r2, #0
 80022f0:	701a      	strb	r2, [r3, #0]
	        	  door_stop();
 80022f2:	f7ff ff39 	bl	8002168 <door_stop>
 80022f6:	e00d      	b.n	8002314 <main+0x18c>
	          }
	          else if(door_flg ==2){
 80022f8:	4b40      	ldr	r3, [pc, #256]	@ (80023fc <main+0x274>)
 80022fa:	781b      	ldrb	r3, [r3, #0]
 80022fc:	2b02      	cmp	r3, #2
 80022fe:	d107      	bne.n	8002310 <main+0x188>
	        	  door_close();
 8002300:	f7ff ff14 	bl	800212c <door_close>
	        	  door_flg = 0;
 8002304:	4b3d      	ldr	r3, [pc, #244]	@ (80023fc <main+0x274>)
 8002306:	2200      	movs	r2, #0
 8002308:	701a      	strb	r2, [r3, #0]
	        	  door_stop();
 800230a:	f7ff ff2d 	bl	8002168 <door_stop>
 800230e:	e001      	b.n	8002314 <main+0x18c>
	          }
	          else{
	        	  door_stop();
 8002310:	f7ff ff2a 	bl	8002168 <door_stop>
	          }
	          cnt++;
 8002314:	4b3a      	ldr	r3, [pc, #232]	@ (8002400 <main+0x278>)
 8002316:	881b      	ldrh	r3, [r3, #0]
 8002318:	3301      	adds	r3, #1
 800231a:	b29a      	uxth	r2, r3
 800231c:	4b38      	ldr	r3, [pc, #224]	@ (8002400 <main+0x278>)
 800231e:	801a      	strh	r2, [r3, #0]
	          if (cnt == 20)  // 약 20초마다 RPi로 전송
 8002320:	4b37      	ldr	r3, [pc, #220]	@ (8002400 <main+0x278>)
 8002322:	881b      	ldrh	r3, [r3, #0]
 8002324:	2b14      	cmp	r3, #20
 8002326:	d137      	bne.n	8002398 <main+0x210>
	          {
	              cnt = 0;
 8002328:	4b35      	ldr	r3, [pc, #212]	@ (8002400 <main+0x278>)
 800232a:	2200      	movs	r2, #0
 800232c:	801a      	strh	r2, [r3, #0]
	              sprintf(msg_to_Rpi, "%.1f,%.1f,%.1f,%.1f,%.1f\r\n", TEMP, RH, co2, lux, w_1);
 800232e:	69f8      	ldr	r0, [r7, #28]
 8002330:	f7fe f93a 	bl	80005a8 <__aeabi_f2d>
 8002334:	e9c7 0100 	strd	r0, r1, [r7]
 8002338:	69b8      	ldr	r0, [r7, #24]
 800233a:	f7fe f935 	bl	80005a8 <__aeabi_f2d>
 800233e:	4604      	mov	r4, r0
 8002340:	460d      	mov	r5, r1
 8002342:	6938      	ldr	r0, [r7, #16]
 8002344:	f7fe f930 	bl	80005a8 <__aeabi_f2d>
 8002348:	4680      	mov	r8, r0
 800234a:	4689      	mov	r9, r1
 800234c:	6978      	ldr	r0, [r7, #20]
 800234e:	f7fe f92b 	bl	80005a8 <__aeabi_f2d>
 8002352:	4682      	mov	sl, r0
 8002354:	468b      	mov	fp, r1
 8002356:	68f8      	ldr	r0, [r7, #12]
 8002358:	f7fe f926 	bl	80005a8 <__aeabi_f2d>
 800235c:	4602      	mov	r2, r0
 800235e:	460b      	mov	r3, r1
 8002360:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8002364:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8002368:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800236c:	e9cd 4500 	strd	r4, r5, [sp]
 8002370:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002374:	4923      	ldr	r1, [pc, #140]	@ (8002404 <main+0x27c>)
 8002376:	4824      	ldr	r0, [pc, #144]	@ (8002408 <main+0x280>)
 8002378:	f006 fee4 	bl	8009144 <siprintf>
	              printf("Sending sensor data: %s", msg_to_Rpi);
 800237c:	4922      	ldr	r1, [pc, #136]	@ (8002408 <main+0x280>)
 800237e:	4823      	ldr	r0, [pc, #140]	@ (800240c <main+0x284>)
 8002380:	f006 fe70 	bl	8009064 <iprintf>
	              HAL_UART_Transmit(&huart1, (uint8_t*)msg_to_Rpi, strlen(msg_to_Rpi), 100);
 8002384:	4820      	ldr	r0, [pc, #128]	@ (8002408 <main+0x280>)
 8002386:	f7fd ffa3 	bl	80002d0 <strlen>
 800238a:	4603      	mov	r3, r0
 800238c:	b29a      	uxth	r2, r3
 800238e:	2364      	movs	r3, #100	@ 0x64
 8002390:	491d      	ldr	r1, [pc, #116]	@ (8002408 <main+0x280>)
 8002392:	4811      	ldr	r0, [pc, #68]	@ (80023d8 <main+0x250>)
 8002394:	f004 fad2 	bl	800693c <HAL_UART_Transmit>
	          }
	          HAL_UART_Receive_IT(&huart1, (uint8_t*)Cmd_Msg, 10);
 8002398:	220a      	movs	r2, #10
 800239a:	491d      	ldr	r1, [pc, #116]	@ (8002410 <main+0x288>)
 800239c:	480e      	ldr	r0, [pc, #56]	@ (80023d8 <main+0x250>)
 800239e:	f004 fb58 	bl	8006a52 <HAL_UART_Receive_IT>
	          HAL_Delay(1000);  // 1초 대기
 80023a2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80023a6:	f001 f93b 	bl	8003620 <HAL_Delay>
 80023aa:	e000      	b.n	80023ae <main+0x226>
	          if (strcmp(Test_Msg, "STM32 Test Mode") == 0)
 80023ac:	bf00      	nop
	      }

	      HAL_Delay(10);
 80023ae:	200a      	movs	r0, #10
 80023b0:	f001 f936 	bl	8003620 <HAL_Delay>
	  if (uart_state == UART_STATE_WAIT_TEST && test_ready)
 80023b4:	e737      	b.n	8002226 <main+0x9e>
 80023b6:	bf00      	nop
 80023b8:	20000504 	.word	0x20000504
 80023bc:	2000023c 	.word	0x2000023c
 80023c0:	200003e4 	.word	0x200003e4
 80023c4:	2000042c 	.word	0x2000042c
 80023c8:	20000474 	.word	0x20000474
 80023cc:	200004bc 	.word	0x200004bc
 80023d0:	20000594 	.word	0x20000594
 80023d4:	200002b0 	.word	0x200002b0
 80023d8:	200005dc 	.word	0x200005dc
 80023dc:	200002e6 	.word	0x200002e6
 80023e0:	200002e7 	.word	0x200002e7
 80023e4:	0800c9d0 	.word	0x0800c9d0
 80023e8:	0800c9e8 	.word	0x0800c9e8
 80023ec:	0800c9f8 	.word	0x0800c9f8
 80023f0:	200002e3 	.word	0x200002e3
 80023f4:	0800ca28 	.word	0x0800ca28
 80023f8:	20000040 	.word	0x20000040
 80023fc:	200002de 	.word	0x200002de
 8002400:	200002e4 	.word	0x200002e4
 8002404:	0800ca40 	.word	0x0800ca40
 8002408:	200002c0 	.word	0x200002c0
 800240c:	0800ca5c 	.word	0x0800ca5c
 8002410:	200002e8 	.word	0x200002e8

08002414 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b094      	sub	sp, #80	@ 0x50
 8002418:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800241a:	f107 031c 	add.w	r3, r7, #28
 800241e:	2234      	movs	r2, #52	@ 0x34
 8002420:	2100      	movs	r1, #0
 8002422:	4618      	mov	r0, r3
 8002424:	f006 ff88 	bl	8009338 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002428:	f107 0308 	add.w	r3, r7, #8
 800242c:	2200      	movs	r2, #0
 800242e:	601a      	str	r2, [r3, #0]
 8002430:	605a      	str	r2, [r3, #4]
 8002432:	609a      	str	r2, [r3, #8]
 8002434:	60da      	str	r2, [r3, #12]
 8002436:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002438:	2300      	movs	r3, #0
 800243a:	607b      	str	r3, [r7, #4]
 800243c:	4b2a      	ldr	r3, [pc, #168]	@ (80024e8 <SystemClock_Config+0xd4>)
 800243e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002440:	4a29      	ldr	r2, [pc, #164]	@ (80024e8 <SystemClock_Config+0xd4>)
 8002442:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002446:	6413      	str	r3, [r2, #64]	@ 0x40
 8002448:	4b27      	ldr	r3, [pc, #156]	@ (80024e8 <SystemClock_Config+0xd4>)
 800244a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800244c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002450:	607b      	str	r3, [r7, #4]
 8002452:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002454:	2300      	movs	r3, #0
 8002456:	603b      	str	r3, [r7, #0]
 8002458:	4b24      	ldr	r3, [pc, #144]	@ (80024ec <SystemClock_Config+0xd8>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8002460:	4a22      	ldr	r2, [pc, #136]	@ (80024ec <SystemClock_Config+0xd8>)
 8002462:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002466:	6013      	str	r3, [r2, #0]
 8002468:	4b20      	ldr	r3, [pc, #128]	@ (80024ec <SystemClock_Config+0xd8>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002470:	603b      	str	r3, [r7, #0]
 8002472:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002474:	2301      	movs	r3, #1
 8002476:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002478:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800247c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800247e:	2302      	movs	r3, #2
 8002480:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002482:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002486:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002488:	2304      	movs	r3, #4
 800248a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 800248c:	23b4      	movs	r3, #180	@ 0xb4
 800248e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002490:	2302      	movs	r3, #2
 8002492:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002494:	2302      	movs	r3, #2
 8002496:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002498:	2302      	movs	r3, #2
 800249a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800249c:	f107 031c 	add.w	r3, r7, #28
 80024a0:	4618      	mov	r0, r3
 80024a2:	f002 fc23 	bl	8004cec <HAL_RCC_OscConfig>
 80024a6:	4603      	mov	r3, r0
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d001      	beq.n	80024b0 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80024ac:	f000 f95e 	bl	800276c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80024b0:	230f      	movs	r3, #15
 80024b2:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80024b4:	2302      	movs	r3, #2
 80024b6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80024b8:	2380      	movs	r3, #128	@ 0x80
 80024ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80024bc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80024c0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80024c2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80024c6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80024c8:	f107 0308 	add.w	r3, r7, #8
 80024cc:	2102      	movs	r1, #2
 80024ce:	4618      	mov	r0, r3
 80024d0:	f002 f890 	bl	80045f4 <HAL_RCC_ClockConfig>
 80024d4:	4603      	mov	r3, r0
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d001      	beq.n	80024de <SystemClock_Config+0xca>
  {
    Error_Handler();
 80024da:	f000 f947 	bl	800276c <Error_Handler>
  }
}
 80024de:	bf00      	nop
 80024e0:	3750      	adds	r7, #80	@ 0x50
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	40023800 	.word	0x40023800
 80024ec:	40007000 	.word	0x40007000

080024f0 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	af00      	add	r7, sp, #0
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80024f4:	2200      	movs	r2, #0
 80024f6:	2100      	movs	r1, #0
 80024f8:	201c      	movs	r0, #28
 80024fa:	f001 fd7d 	bl	8003ff8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80024fe:	201c      	movs	r0, #28
 8002500:	f001 fd96 	bl	8004030 <HAL_NVIC_EnableIRQ>
}
 8002504:	bf00      	nop
 8002506:	bd80      	pop	{r7, pc}

08002508 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b084      	sub	sp, #16
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]

    if (huart->Instance == USART1)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a2f      	ldr	r2, [pc, #188]	@ (80025d4 <HAL_UART_RxCpltCallback+0xcc>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d157      	bne.n	80025ca <HAL_UART_RxCpltCallback+0xc2>
    {
        if (uart_state == UART_STATE_WAIT_TEST)
 800251a:	4b2f      	ldr	r3, [pc, #188]	@ (80025d8 <HAL_UART_RxCpltCallback+0xd0>)
 800251c:	781b      	ldrb	r3, [r3, #0]
 800251e:	b2db      	uxtb	r3, r3
 8002520:	2b00      	cmp	r3, #0
 8002522:	d103      	bne.n	800252c <HAL_UART_RxCpltCallback+0x24>
        {
            test_ready = 1;
 8002524:	4b2d      	ldr	r3, [pc, #180]	@ (80025dc <HAL_UART_RxCpltCallback+0xd4>)
 8002526:	2201      	movs	r2, #1
 8002528:	701a      	strb	r2, [r3, #0]
 800252a:	e049      	b.n	80025c0 <HAL_UART_RxCpltCallback+0xb8>
        }
        else if (uart_state == UART_STATE_WAIT_CMD)
 800252c:	4b2a      	ldr	r3, [pc, #168]	@ (80025d8 <HAL_UART_RxCpltCallback+0xd0>)
 800252e:	781b      	ldrb	r3, [r3, #0]
 8002530:	b2db      	uxtb	r3, r3
 8002532:	2b01      	cmp	r3, #1
 8002534:	d144      	bne.n	80025c0 <HAL_UART_RxCpltCallback+0xb8>
        {
            Cmd_Msg[10] = '\0';
 8002536:	4b2a      	ldr	r3, [pc, #168]	@ (80025e0 <HAL_UART_RxCpltCallback+0xd8>)
 8002538:	2200      	movs	r2, #0
 800253a:	729a      	strb	r2, [r3, #10]
            printf("Cmd_Msg = %s\r\n", Cmd_Msg);
 800253c:	4928      	ldr	r1, [pc, #160]	@ (80025e0 <HAL_UART_RxCpltCallback+0xd8>)
 800253e:	4829      	ldr	r0, [pc, #164]	@ (80025e4 <HAL_UART_RxCpltCallback+0xdc>)
 8002540:	f006 fd90 	bl	8009064 <iprintf>

            parse_fixed_csv(Cmd_Msg);
 8002544:	4826      	ldr	r0, [pc, #152]	@ (80025e0 <HAL_UART_RxCpltCallback+0xd8>)
 8002546:	f7ff fb75 	bl	8001c34 <parse_fixed_csv>

            if (Cmd_values[0] == 1)
 800254a:	4b27      	ldr	r3, [pc, #156]	@ (80025e8 <HAL_UART_RxCpltCallback+0xe0>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	2b01      	cmp	r3, #1
 8002550:	d11b      	bne.n	800258a <HAL_UART_RxCpltCallback+0x82>
            {
            	printf("\n\n======Actuactor start by Sensor Value======\r\n");
 8002552:	4826      	ldr	r0, [pc, #152]	@ (80025ec <HAL_UART_RxCpltCallback+0xe4>)
 8002554:	f006 fdee 	bl	8009134 <puts>
                for (int i = 0; i < 5; i++)
 8002558:	2300      	movs	r3, #0
 800255a:	60fb      	str	r3, [r7, #12]
 800255c:	e00b      	b.n	8002576 <HAL_UART_RxCpltCallback+0x6e>
                    printf("Sensor Cmd_values[%d] = %d\r\n", i, Cmd_values[i]);
 800255e:	4a22      	ldr	r2, [pc, #136]	@ (80025e8 <HAL_UART_RxCpltCallback+0xe0>)
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002566:	461a      	mov	r2, r3
 8002568:	68f9      	ldr	r1, [r7, #12]
 800256a:	4821      	ldr	r0, [pc, #132]	@ (80025f0 <HAL_UART_RxCpltCallback+0xe8>)
 800256c:	f006 fd7a 	bl	8009064 <iprintf>
                for (int i = 0; i < 5; i++)
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	3301      	adds	r3, #1
 8002574:	60fb      	str	r3, [r7, #12]
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	2b04      	cmp	r3, #4
 800257a:	ddf0      	ble.n	800255e <HAL_UART_RxCpltCallback+0x56>
                process_commands(Cmd_values);
 800257c:	481a      	ldr	r0, [pc, #104]	@ (80025e8 <HAL_UART_RxCpltCallback+0xe0>)
 800257e:	f7ff fc5f 	bl	8001e40 <process_commands>
                printf("=====================================================\r\n\n\n");
 8002582:	481c      	ldr	r0, [pc, #112]	@ (80025f4 <HAL_UART_RxCpltCallback+0xec>)
 8002584:	f006 fdd6 	bl	8009134 <puts>
 8002588:	e01a      	b.n	80025c0 <HAL_UART_RxCpltCallback+0xb8>
            }
            else
            {
            	printf("\n\n======Actuactor start by Manual Control======\r\n");
 800258a:	481b      	ldr	r0, [pc, #108]	@ (80025f8 <HAL_UART_RxCpltCallback+0xf0>)
 800258c:	f006 fdd2 	bl	8009134 <puts>
                for (int i = 0; i < 5; i++)
 8002590:	2300      	movs	r3, #0
 8002592:	60bb      	str	r3, [r7, #8]
 8002594:	e00b      	b.n	80025ae <HAL_UART_RxCpltCallback+0xa6>
                    printf("Manual Cmd_values[%d] = %d\r\n", i, Cmd_values[i]);
 8002596:	4a14      	ldr	r2, [pc, #80]	@ (80025e8 <HAL_UART_RxCpltCallback+0xe0>)
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800259e:	461a      	mov	r2, r3
 80025a0:	68b9      	ldr	r1, [r7, #8]
 80025a2:	4816      	ldr	r0, [pc, #88]	@ (80025fc <HAL_UART_RxCpltCallback+0xf4>)
 80025a4:	f006 fd5e 	bl	8009064 <iprintf>
                for (int i = 0; i < 5; i++)
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	3301      	adds	r3, #1
 80025ac:	60bb      	str	r3, [r7, #8]
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	2b04      	cmp	r3, #4
 80025b2:	ddf0      	ble.n	8002596 <HAL_UART_RxCpltCallback+0x8e>
                manual_process(Cmd_values);
 80025b4:	480c      	ldr	r0, [pc, #48]	@ (80025e8 <HAL_UART_RxCpltCallback+0xe0>)
 80025b6:	f7ff fcd3 	bl	8001f60 <manual_process>
                printf("=====================================================\r\n\n\n");
 80025ba:	480e      	ldr	r0, [pc, #56]	@ (80025f4 <HAL_UART_RxCpltCallback+0xec>)
 80025bc:	f006 fdba 	bl	8009134 <puts>
            }

            // 다음 수신 준비
        }
        HAL_UART_Receive_IT(&huart1, (uint8_t*)Cmd_Msg, 10);
 80025c0:	220a      	movs	r2, #10
 80025c2:	4907      	ldr	r1, [pc, #28]	@ (80025e0 <HAL_UART_RxCpltCallback+0xd8>)
 80025c4:	480e      	ldr	r0, [pc, #56]	@ (8002600 <HAL_UART_RxCpltCallback+0xf8>)
 80025c6:	f004 fa44 	bl	8006a52 <HAL_UART_Receive_IT>
    }
}
 80025ca:	bf00      	nop
 80025cc:	3710      	adds	r7, #16
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	40011000 	.word	0x40011000
 80025d8:	200002e6 	.word	0x200002e6
 80025dc:	200002e7 	.word	0x200002e7
 80025e0:	200002e8 	.word	0x200002e8
 80025e4:	0800ca74 	.word	0x0800ca74
 80025e8:	2000029c 	.word	0x2000029c
 80025ec:	0800ca84 	.word	0x0800ca84
 80025f0:	0800cab4 	.word	0x0800cab4
 80025f4:	0800cad4 	.word	0x0800cad4
 80025f8:	0800cb10 	.word	0x0800cb10
 80025fc:	0800cb44 	.word	0x0800cb44
 8002600:	200005dc 	.word	0x200005dc

08002604 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b084      	sub	sp, #16
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */


	if (htim->Instance == TIM2)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002614:	d121      	bne.n	800265a <HAL_TIM_PeriodElapsedCallback+0x56>
	{	//	수위 실시간 인터럽트로 측정
		if(Sensor_flag == 1)
 8002616:	4b4c      	ldr	r3, [pc, #304]	@ (8002748 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8002618:	781b      	ldrb	r3, [r3, #0]
 800261a:	2b01      	cmp	r3, #1
 800261c:	d11d      	bne.n	800265a <HAL_TIM_PeriodElapsedCallback+0x56>
		{

			float light = read_light();				// 빛세기 adc로 읽기
 800261e:	f7ff f9f1 	bl	8001a04 <read_light>
 8002622:	ed87 0a03 	vstr	s0, [r7, #12]
			light_on((uint16_t)light);				// lux 구하기
 8002626:	edd7 7a03 	vldr	s15, [r7, #12]
 800262a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800262e:	ee17 3a90 	vmov	r3, s15
 8002632:	b29b      	uxth	r3, r3
 8002634:	4618      	mov	r0, r3
 8002636:	f7ff fbbb 	bl	8001db0 <light_on>
			float w_2 = isWaterDetected1();			// 수위센서
 800263a:	f7ff fadd 	bl	8001bf8 <isWaterDetected1>
 800263e:	ed87 0a02 	vstr	s0, [r7, #8]
			if(w_2 == 0.0){							// 수위 센서 측정 x
 8002642:	edd7 7a02 	vldr	s15, [r7, #8]
 8002646:	eef5 7a40 	vcmp.f32	s15, #0.0
 800264a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800264e:	d102      	bne.n	8002656 <HAL_TIM_PeriodElapsedCallback+0x52>
				Water_P1_Start(); //급수
 8002650:	f7ff fb7e 	bl	8001d50 <Water_P1_Start>
 8002654:	e001      	b.n	800265a <HAL_TIM_PeriodElapsedCallback+0x56>

			}else{									// 수위 센서 측정 o
				Water_P1_Stop();
 8002656:	f7ff fb93 	bl	8001d80 <Water_P1_Stop>
			}

		}
	}
	if (htim->Instance == TIM3)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a3b      	ldr	r2, [pc, #236]	@ (800274c <HAL_TIM_PeriodElapsedCallback+0x148>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d153      	bne.n	800270c <HAL_TIM_PeriodElapsedCallback+0x108>
	{	// 30s초마다 인터럽트 발생하는 코드 => 1시간 경과를 측정하는 인터럽트
		if(Sensor_flag == 1)
 8002664:	4b38      	ldr	r3, [pc, #224]	@ (8002748 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8002666:	781b      	ldrb	r3, [r3, #0]
 8002668:	2b01      	cmp	r3, #1
 800266a:	d14f      	bne.n	800270c <HAL_TIM_PeriodElapsedCallback+0x108>
		{
			(flag->timer1)+=1;									// 30초 마다 카운트
 800266c:	4b38      	ldr	r3, [pc, #224]	@ (8002750 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	785a      	ldrb	r2, [r3, #1]
 8002672:	4b37      	ldr	r3, [pc, #220]	@ (8002750 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	3201      	adds	r2, #1
 8002678:	b2d2      	uxtb	r2, r2
 800267a:	705a      	strb	r2, [r3, #1]

				//시간 경과 측정
			printf("%.1f min left tp start\r\n", ((10 -flag->timer1)/2.0));
 800267c:	4b34      	ldr	r3, [pc, #208]	@ (8002750 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	785b      	ldrb	r3, [r3, #1]
 8002682:	f1c3 030a 	rsb	r3, r3, #10
 8002686:	4618      	mov	r0, r3
 8002688:	f7fd ff7c 	bl	8000584 <__aeabi_i2d>
 800268c:	f04f 0200 	mov.w	r2, #0
 8002690:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002694:	f7fe f90a 	bl	80008ac <__aeabi_ddiv>
 8002698:	4602      	mov	r2, r0
 800269a:	460b      	mov	r3, r1
 800269c:	482d      	ldr	r0, [pc, #180]	@ (8002754 <HAL_TIM_PeriodElapsedCallback+0x150>)
 800269e:	f006 fce1 	bl	8009064 <iprintf>

			if(flag->timer1 == 10){							//5분 마다 배수
 80026a2:	4b2b      	ldr	r3, [pc, #172]	@ (8002750 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	785b      	ldrb	r3, [r3, #1]
 80026a8:	2b0a      	cmp	r3, #10
 80026aa:	d107      	bne.n	80026bc <HAL_TIM_PeriodElapsedCallback+0xb8>

				flag->water_sensor_flag = 1;					// 배수flag = 1
 80026ac:	4b28      	ldr	r3, [pc, #160]	@ (8002750 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	2201      	movs	r2, #1
 80026b2:	701a      	strb	r2, [r3, #0]
				printf("Water Drainage Start\r\n");
 80026b4:	4828      	ldr	r0, [pc, #160]	@ (8002758 <HAL_TIM_PeriodElapsedCallback+0x154>)
 80026b6:	f006 fd3d 	bl	8009134 <puts>
 80026ba:	e00f      	b.n	80026dc <HAL_TIM_PeriodElapsedCallback+0xd8>
			}
			else if(flag -> timer1 == 16){						// 배수 flag  3분간 1로 고정
 80026bc:	4b24      	ldr	r3, [pc, #144]	@ (8002750 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	785b      	ldrb	r3, [r3, #1]
 80026c2:	2b10      	cmp	r3, #16
 80026c4:	d10a      	bne.n	80026dc <HAL_TIM_PeriodElapsedCallback+0xd8>

				flag->timer1 = 0;								// 배수 후 0으로 초기화
 80026c6:	4b22      	ldr	r3, [pc, #136]	@ (8002750 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	2200      	movs	r2, #0
 80026cc:	705a      	strb	r2, [r3, #1]
				flag->water_sensor_flag = 0;
 80026ce:	4b20      	ldr	r3, [pc, #128]	@ (8002750 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	2200      	movs	r2, #0
 80026d4:	701a      	strb	r2, [r3, #0]
				printf("Water Drainage Stop\r\n");
 80026d6:	4821      	ldr	r0, [pc, #132]	@ (800275c <HAL_TIM_PeriodElapsedCallback+0x158>)
 80026d8:	f006 fd2c 	bl	8009134 <puts>
			}
			if(flag->timer1 > 10){
 80026dc:	4b1c      	ldr	r3, [pc, #112]	@ (8002750 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	785b      	ldrb	r3, [r3, #1]
 80026e2:	2b0a      	cmp	r3, #10
 80026e4:	d912      	bls.n	800270c <HAL_TIM_PeriodElapsedCallback+0x108>
				printf("%.1f min left to stop\r\n", (16 - flag->timer1)/2.0);
 80026e6:	4b1a      	ldr	r3, [pc, #104]	@ (8002750 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	785b      	ldrb	r3, [r3, #1]
 80026ec:	f1c3 0310 	rsb	r3, r3, #16
 80026f0:	4618      	mov	r0, r3
 80026f2:	f7fd ff47 	bl	8000584 <__aeabi_i2d>
 80026f6:	f04f 0200 	mov.w	r2, #0
 80026fa:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80026fe:	f7fe f8d5 	bl	80008ac <__aeabi_ddiv>
 8002702:	4602      	mov	r2, r0
 8002704:	460b      	mov	r3, r1
 8002706:	4816      	ldr	r0, [pc, #88]	@ (8002760 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8002708:	f006 fcac 	bl	8009064 <iprintf>
		}
	}



	if (htim->Instance == TIM5)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a14      	ldr	r2, [pc, #80]	@ (8002764 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d10d      	bne.n	8002732 <HAL_TIM_PeriodElapsedCallback+0x12e>
	{	//
		// 0.1초마다 배수 플레그 확인
		if(Sensor_flag == 1){
 8002716:	4b0c      	ldr	r3, [pc, #48]	@ (8002748 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8002718:	781b      	ldrb	r3, [r3, #0]
 800271a:	2b01      	cmp	r3, #1
 800271c:	d109      	bne.n	8002732 <HAL_TIM_PeriodElapsedCallback+0x12e>

			if(flag->water_sensor_flag == 1){
 800271e:	4b0c      	ldr	r3, [pc, #48]	@ (8002750 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	781b      	ldrb	r3, [r3, #0]
 8002724:	2b01      	cmp	r3, #1
 8002726:	d102      	bne.n	800272e <HAL_TIM_PeriodElapsedCallback+0x12a>
				//printf("Water drainage Start\r\n");
				Water_P2_Start();
 8002728:	f7ff fb1e 	bl	8001d68 <Water_P2_Start>
 800272c:	e001      	b.n	8002732 <HAL_TIM_PeriodElapsedCallback+0x12e>

			}else{
				//printf("Water drainage Stop\r\n");
				Water_P2_Stop();
 800272e:	f7ff fb33 	bl	8001d98 <Water_P2_Stop>
			}
		}
	}

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a0c      	ldr	r2, [pc, #48]	@ (8002768 <HAL_TIM_PeriodElapsedCallback+0x164>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d101      	bne.n	8002740 <HAL_TIM_PeriodElapsedCallback+0x13c>
  {
    HAL_IncTick();
 800273c:	f000 ff50 	bl	80035e0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002740:	bf00      	nop
 8002742:	3710      	adds	r7, #16
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}
 8002748:	200002e3 	.word	0x200002e3
 800274c:	40000400 	.word	0x40000400
 8002750:	20000048 	.word	0x20000048
 8002754:	0800cb64 	.word	0x0800cb64
 8002758:	0800cb80 	.word	0x0800cb80
 800275c:	0800cb98 	.word	0x0800cb98
 8002760:	0800cbb0 	.word	0x0800cbb0
 8002764:	40000c00 	.word	0x40000c00
 8002768:	40002000 	.word	0x40002000

0800276c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800276c:	b480      	push	{r7}
 800276e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002770:	b672      	cpsid	i
}
 8002772:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002774:	bf00      	nop
 8002776:	e7fd      	b.n	8002774 <Error_Handler+0x8>

08002778 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800277c:	4b17      	ldr	r3, [pc, #92]	@ (80027dc <MX_SPI1_Init+0x64>)
 800277e:	4a18      	ldr	r2, [pc, #96]	@ (80027e0 <MX_SPI1_Init+0x68>)
 8002780:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002782:	4b16      	ldr	r3, [pc, #88]	@ (80027dc <MX_SPI1_Init+0x64>)
 8002784:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002788:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800278a:	4b14      	ldr	r3, [pc, #80]	@ (80027dc <MX_SPI1_Init+0x64>)
 800278c:	2200      	movs	r2, #0
 800278e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002790:	4b12      	ldr	r3, [pc, #72]	@ (80027dc <MX_SPI1_Init+0x64>)
 8002792:	2200      	movs	r2, #0
 8002794:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002796:	4b11      	ldr	r3, [pc, #68]	@ (80027dc <MX_SPI1_Init+0x64>)
 8002798:	2200      	movs	r2, #0
 800279a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800279c:	4b0f      	ldr	r3, [pc, #60]	@ (80027dc <MX_SPI1_Init+0x64>)
 800279e:	2200      	movs	r2, #0
 80027a0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80027a2:	4b0e      	ldr	r3, [pc, #56]	@ (80027dc <MX_SPI1_Init+0x64>)
 80027a4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80027a8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80027aa:	4b0c      	ldr	r3, [pc, #48]	@ (80027dc <MX_SPI1_Init+0x64>)
 80027ac:	2218      	movs	r2, #24
 80027ae:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80027b0:	4b0a      	ldr	r3, [pc, #40]	@ (80027dc <MX_SPI1_Init+0x64>)
 80027b2:	2200      	movs	r2, #0
 80027b4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80027b6:	4b09      	ldr	r3, [pc, #36]	@ (80027dc <MX_SPI1_Init+0x64>)
 80027b8:	2200      	movs	r2, #0
 80027ba:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80027bc:	4b07      	ldr	r3, [pc, #28]	@ (80027dc <MX_SPI1_Init+0x64>)
 80027be:	2200      	movs	r2, #0
 80027c0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80027c2:	4b06      	ldr	r3, [pc, #24]	@ (80027dc <MX_SPI1_Init+0x64>)
 80027c4:	220a      	movs	r2, #10
 80027c6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80027c8:	4804      	ldr	r0, [pc, #16]	@ (80027dc <MX_SPI1_Init+0x64>)
 80027ca:	f002 fd2d 	bl	8005228 <HAL_SPI_Init>
 80027ce:	4603      	mov	r3, r0
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d001      	beq.n	80027d8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80027d4:	f7ff ffca 	bl	800276c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80027d8:	bf00      	nop
 80027da:	bd80      	pop	{r7, pc}
 80027dc:	200002f8 	.word	0x200002f8
 80027e0:	40013000 	.word	0x40013000

080027e4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b08a      	sub	sp, #40	@ 0x28
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027ec:	f107 0314 	add.w	r3, r7, #20
 80027f0:	2200      	movs	r2, #0
 80027f2:	601a      	str	r2, [r3, #0]
 80027f4:	605a      	str	r2, [r3, #4]
 80027f6:	609a      	str	r2, [r3, #8]
 80027f8:	60da      	str	r2, [r3, #12]
 80027fa:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a19      	ldr	r2, [pc, #100]	@ (8002868 <HAL_SPI_MspInit+0x84>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d12b      	bne.n	800285e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002806:	2300      	movs	r3, #0
 8002808:	613b      	str	r3, [r7, #16]
 800280a:	4b18      	ldr	r3, [pc, #96]	@ (800286c <HAL_SPI_MspInit+0x88>)
 800280c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800280e:	4a17      	ldr	r2, [pc, #92]	@ (800286c <HAL_SPI_MspInit+0x88>)
 8002810:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002814:	6453      	str	r3, [r2, #68]	@ 0x44
 8002816:	4b15      	ldr	r3, [pc, #84]	@ (800286c <HAL_SPI_MspInit+0x88>)
 8002818:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800281a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800281e:	613b      	str	r3, [r7, #16]
 8002820:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002822:	2300      	movs	r3, #0
 8002824:	60fb      	str	r3, [r7, #12]
 8002826:	4b11      	ldr	r3, [pc, #68]	@ (800286c <HAL_SPI_MspInit+0x88>)
 8002828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800282a:	4a10      	ldr	r2, [pc, #64]	@ (800286c <HAL_SPI_MspInit+0x88>)
 800282c:	f043 0302 	orr.w	r3, r3, #2
 8002830:	6313      	str	r3, [r2, #48]	@ 0x30
 8002832:	4b0e      	ldr	r3, [pc, #56]	@ (800286c <HAL_SPI_MspInit+0x88>)
 8002834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002836:	f003 0302 	and.w	r3, r3, #2
 800283a:	60fb      	str	r3, [r7, #12]
 800283c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800283e:	2338      	movs	r3, #56	@ 0x38
 8002840:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002842:	2302      	movs	r3, #2
 8002844:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002846:	2300      	movs	r3, #0
 8002848:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800284a:	2303      	movs	r3, #3
 800284c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800284e:	2305      	movs	r3, #5
 8002850:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002852:	f107 0314 	add.w	r3, r7, #20
 8002856:	4619      	mov	r1, r3
 8002858:	4805      	ldr	r0, [pc, #20]	@ (8002870 <HAL_SPI_MspInit+0x8c>)
 800285a:	f001 fd05 	bl	8004268 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800285e:	bf00      	nop
 8002860:	3728      	adds	r7, #40	@ 0x28
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}
 8002866:	bf00      	nop
 8002868:	40013000 	.word	0x40013000
 800286c:	40023800 	.word	0x40023800
 8002870:	40020400 	.word	0x40020400

08002874 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002874:	b480      	push	{r7}
 8002876:	b083      	sub	sp, #12
 8002878:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800287a:	2300      	movs	r3, #0
 800287c:	607b      	str	r3, [r7, #4]
 800287e:	4b10      	ldr	r3, [pc, #64]	@ (80028c0 <HAL_MspInit+0x4c>)
 8002880:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002882:	4a0f      	ldr	r2, [pc, #60]	@ (80028c0 <HAL_MspInit+0x4c>)
 8002884:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002888:	6453      	str	r3, [r2, #68]	@ 0x44
 800288a:	4b0d      	ldr	r3, [pc, #52]	@ (80028c0 <HAL_MspInit+0x4c>)
 800288c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800288e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002892:	607b      	str	r3, [r7, #4]
 8002894:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002896:	2300      	movs	r3, #0
 8002898:	603b      	str	r3, [r7, #0]
 800289a:	4b09      	ldr	r3, [pc, #36]	@ (80028c0 <HAL_MspInit+0x4c>)
 800289c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800289e:	4a08      	ldr	r2, [pc, #32]	@ (80028c0 <HAL_MspInit+0x4c>)
 80028a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80028a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80028a6:	4b06      	ldr	r3, [pc, #24]	@ (80028c0 <HAL_MspInit+0x4c>)
 80028a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028ae:	603b      	str	r3, [r7, #0]
 80028b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80028b2:	bf00      	nop
 80028b4:	370c      	adds	r7, #12
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr
 80028be:	bf00      	nop
 80028c0:	40023800 	.word	0x40023800

080028c4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b08e      	sub	sp, #56	@ 0x38
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80028cc:	2300      	movs	r3, #0
 80028ce:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80028d0:	2300      	movs	r3, #0
 80028d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 80028d4:	2300      	movs	r3, #0
 80028d6:	60fb      	str	r3, [r7, #12]
 80028d8:	4b33      	ldr	r3, [pc, #204]	@ (80029a8 <HAL_InitTick+0xe4>)
 80028da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028dc:	4a32      	ldr	r2, [pc, #200]	@ (80029a8 <HAL_InitTick+0xe4>)
 80028de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028e2:	6413      	str	r3, [r2, #64]	@ 0x40
 80028e4:	4b30      	ldr	r3, [pc, #192]	@ (80029a8 <HAL_InitTick+0xe4>)
 80028e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028ec:	60fb      	str	r3, [r7, #12]
 80028ee:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80028f0:	f107 0210 	add.w	r2, r7, #16
 80028f4:	f107 0314 	add.w	r3, r7, #20
 80028f8:	4611      	mov	r1, r2
 80028fa:	4618      	mov	r0, r3
 80028fc:	f001 ff94 	bl	8004828 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002900:	6a3b      	ldr	r3, [r7, #32]
 8002902:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM14 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002904:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002906:	2b00      	cmp	r3, #0
 8002908:	d103      	bne.n	8002912 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800290a:	f001 ff65 	bl	80047d8 <HAL_RCC_GetPCLK1Freq>
 800290e:	6378      	str	r0, [r7, #52]	@ 0x34
 8002910:	e004      	b.n	800291c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002912:	f001 ff61 	bl	80047d8 <HAL_RCC_GetPCLK1Freq>
 8002916:	4603      	mov	r3, r0
 8002918:	005b      	lsls	r3, r3, #1
 800291a:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800291c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800291e:	4a23      	ldr	r2, [pc, #140]	@ (80029ac <HAL_InitTick+0xe8>)
 8002920:	fba2 2303 	umull	r2, r3, r2, r3
 8002924:	0c9b      	lsrs	r3, r3, #18
 8002926:	3b01      	subs	r3, #1
 8002928:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 800292a:	4b21      	ldr	r3, [pc, #132]	@ (80029b0 <HAL_InitTick+0xec>)
 800292c:	4a21      	ldr	r2, [pc, #132]	@ (80029b4 <HAL_InitTick+0xf0>)
 800292e:	601a      	str	r2, [r3, #0]
   * Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 8002930:	4b1f      	ldr	r3, [pc, #124]	@ (80029b0 <HAL_InitTick+0xec>)
 8002932:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002936:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8002938:	4a1d      	ldr	r2, [pc, #116]	@ (80029b0 <HAL_InitTick+0xec>)
 800293a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800293c:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 800293e:	4b1c      	ldr	r3, [pc, #112]	@ (80029b0 <HAL_InitTick+0xec>)
 8002940:	2200      	movs	r2, #0
 8002942:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002944:	4b1a      	ldr	r3, [pc, #104]	@ (80029b0 <HAL_InitTick+0xec>)
 8002946:	2200      	movs	r2, #0
 8002948:	609a      	str	r2, [r3, #8]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800294a:	4b19      	ldr	r3, [pc, #100]	@ (80029b0 <HAL_InitTick+0xec>)
 800294c:	2200      	movs	r2, #0
 800294e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim14);
 8002950:	4817      	ldr	r0, [pc, #92]	@ (80029b0 <HAL_InitTick+0xec>)
 8002952:	f002 fcf2 	bl	800533a <HAL_TIM_Base_Init>
 8002956:	4603      	mov	r3, r0
 8002958:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 800295c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002960:	2b00      	cmp	r3, #0
 8002962:	d11b      	bne.n	800299c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim14);
 8002964:	4812      	ldr	r0, [pc, #72]	@ (80029b0 <HAL_InitTick+0xec>)
 8002966:	f002 fd9f 	bl	80054a8 <HAL_TIM_Base_Start_IT>
 800296a:	4603      	mov	r3, r0
 800296c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8002970:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002974:	2b00      	cmp	r3, #0
 8002976:	d111      	bne.n	800299c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM14 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8002978:	202d      	movs	r0, #45	@ 0x2d
 800297a:	f001 fb59 	bl	8004030 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2b0f      	cmp	r3, #15
 8002982:	d808      	bhi.n	8002996 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority, 0U);
 8002984:	2200      	movs	r2, #0
 8002986:	6879      	ldr	r1, [r7, #4]
 8002988:	202d      	movs	r0, #45	@ 0x2d
 800298a:	f001 fb35 	bl	8003ff8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800298e:	4a0a      	ldr	r2, [pc, #40]	@ (80029b8 <HAL_InitTick+0xf4>)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6013      	str	r3, [r2, #0]
 8002994:	e002      	b.n	800299c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800299c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	3738      	adds	r7, #56	@ 0x38
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}
 80029a8:	40023800 	.word	0x40023800
 80029ac:	431bde83 	.word	0x431bde83
 80029b0:	20000350 	.word	0x20000350
 80029b4:	40002000 	.word	0x40002000
 80029b8:	20000050 	.word	0x20000050

080029bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80029bc:	b480      	push	{r7}
 80029be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80029c0:	bf00      	nop
 80029c2:	e7fd      	b.n	80029c0 <NMI_Handler+0x4>

080029c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80029c4:	b480      	push	{r7}
 80029c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80029c8:	bf00      	nop
 80029ca:	e7fd      	b.n	80029c8 <HardFault_Handler+0x4>

080029cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80029cc:	b480      	push	{r7}
 80029ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80029d0:	bf00      	nop
 80029d2:	e7fd      	b.n	80029d0 <MemManage_Handler+0x4>

080029d4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80029d4:	b480      	push	{r7}
 80029d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80029d8:	bf00      	nop
 80029da:	e7fd      	b.n	80029d8 <BusFault_Handler+0x4>

080029dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80029dc:	b480      	push	{r7}
 80029de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80029e0:	bf00      	nop
 80029e2:	e7fd      	b.n	80029e0 <UsageFault_Handler+0x4>

080029e4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80029e4:	b480      	push	{r7}
 80029e6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80029e8:	bf00      	nop
 80029ea:	46bd      	mov	sp, r7
 80029ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f0:	4770      	bx	lr

080029f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80029f2:	b480      	push	{r7}
 80029f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80029f6:	bf00      	nop
 80029f8:	46bd      	mov	sp, r7
 80029fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fe:	4770      	bx	lr

08002a00 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a00:	b480      	push	{r7}
 8002a02:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a04:	bf00      	nop
 8002a06:	46bd      	mov	sp, r7
 8002a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0c:	4770      	bx	lr

08002a0e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a0e:	b480      	push	{r7}
 8002a10:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a12:	bf00      	nop
 8002a14:	46bd      	mov	sp, r7
 8002a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1a:	4770      	bx	lr

08002a1c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002a20:	4802      	ldr	r0, [pc, #8]	@ (8002a2c <TIM1_CC_IRQHandler+0x10>)
 8002a22:	f002 ff2c 	bl	800587e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8002a26:	bf00      	nop
 8002a28:	bd80      	pop	{r7, pc}
 8002a2a:	bf00      	nop
 8002a2c:	2000039c 	.word	0x2000039c

08002a30 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002a34:	4802      	ldr	r0, [pc, #8]	@ (8002a40 <TIM2_IRQHandler+0x10>)
 8002a36:	f002 ff22 	bl	800587e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002a3a:	bf00      	nop
 8002a3c:	bd80      	pop	{r7, pc}
 8002a3e:	bf00      	nop
 8002a40:	200003e4 	.word	0x200003e4

08002a44 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002a48:	4802      	ldr	r0, [pc, #8]	@ (8002a54 <TIM3_IRQHandler+0x10>)
 8002a4a:	f002 ff18 	bl	800587e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002a4e:	bf00      	nop
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	bf00      	nop
 8002a54:	2000042c 	.word	0x2000042c

08002a58 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002a5c:	4802      	ldr	r0, [pc, #8]	@ (8002a68 <TIM4_IRQHandler+0x10>)
 8002a5e:	f002 ff0e 	bl	800587e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002a62:	bf00      	nop
 8002a64:	bd80      	pop	{r7, pc}
 8002a66:	bf00      	nop
 8002a68:	20000474 	.word	0x20000474

08002a6c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002a70:	4802      	ldr	r0, [pc, #8]	@ (8002a7c <USART1_IRQHandler+0x10>)
 8002a72:	f004 f813 	bl	8006a9c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002a76:	bf00      	nop
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	200005dc 	.word	0x200005dc

08002a80 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8002a84:	4802      	ldr	r0, [pc, #8]	@ (8002a90 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8002a86:	f002 fefa 	bl	800587e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8002a8a:	bf00      	nop
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	bf00      	nop
 8002a90:	20000350 	.word	0x20000350

08002a94 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002a98:	4802      	ldr	r0, [pc, #8]	@ (8002aa4 <TIM5_IRQHandler+0x10>)
 8002a9a:	f002 fef0 	bl	800587e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002a9e:	bf00      	nop
 8002aa0:	bd80      	pop	{r7, pc}
 8002aa2:	bf00      	nop
 8002aa4:	200004bc 	.word	0x200004bc

08002aa8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	af00      	add	r7, sp, #0
  return 1;
 8002aac:	2301      	movs	r3, #1
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab6:	4770      	bx	lr

08002ab8 <_kill>:

int _kill(int pid, int sig)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b082      	sub	sp, #8
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
 8002ac0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002ac2:	f006 fc8b 	bl	80093dc <__errno>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	2216      	movs	r2, #22
 8002aca:	601a      	str	r2, [r3, #0]
  return -1;
 8002acc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	3708      	adds	r7, #8
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}

08002ad8 <_exit>:

void _exit (int status)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b082      	sub	sp, #8
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002ae0:	f04f 31ff 	mov.w	r1, #4294967295
 8002ae4:	6878      	ldr	r0, [r7, #4]
 8002ae6:	f7ff ffe7 	bl	8002ab8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002aea:	bf00      	nop
 8002aec:	e7fd      	b.n	8002aea <_exit+0x12>

08002aee <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002aee:	b580      	push	{r7, lr}
 8002af0:	b086      	sub	sp, #24
 8002af2:	af00      	add	r7, sp, #0
 8002af4:	60f8      	str	r0, [r7, #12]
 8002af6:	60b9      	str	r1, [r7, #8]
 8002af8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002afa:	2300      	movs	r3, #0
 8002afc:	617b      	str	r3, [r7, #20]
 8002afe:	e00a      	b.n	8002b16 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002b00:	f3af 8000 	nop.w
 8002b04:	4601      	mov	r1, r0
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	1c5a      	adds	r2, r3, #1
 8002b0a:	60ba      	str	r2, [r7, #8]
 8002b0c:	b2ca      	uxtb	r2, r1
 8002b0e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	3301      	adds	r3, #1
 8002b14:	617b      	str	r3, [r7, #20]
 8002b16:	697a      	ldr	r2, [r7, #20]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	429a      	cmp	r2, r3
 8002b1c:	dbf0      	blt.n	8002b00 <_read+0x12>
  }

  return len;
 8002b1e:	687b      	ldr	r3, [r7, #4]
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	3718      	adds	r7, #24
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}

08002b28 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b086      	sub	sp, #24
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	60f8      	str	r0, [r7, #12]
 8002b30:	60b9      	str	r1, [r7, #8]
 8002b32:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b34:	2300      	movs	r3, #0
 8002b36:	617b      	str	r3, [r7, #20]
 8002b38:	e009      	b.n	8002b4e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	1c5a      	adds	r2, r3, #1
 8002b3e:	60ba      	str	r2, [r7, #8]
 8002b40:	781b      	ldrb	r3, [r3, #0]
 8002b42:	4618      	mov	r0, r3
 8002b44:	f7fe fc8c 	bl	8001460 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	3301      	adds	r3, #1
 8002b4c:	617b      	str	r3, [r7, #20]
 8002b4e:	697a      	ldr	r2, [r7, #20]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	429a      	cmp	r2, r3
 8002b54:	dbf1      	blt.n	8002b3a <_write+0x12>
  }
  return len;
 8002b56:	687b      	ldr	r3, [r7, #4]
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	3718      	adds	r7, #24
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}

08002b60 <_close>:

int _close(int file)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b083      	sub	sp, #12
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002b68:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	370c      	adds	r7, #12
 8002b70:	46bd      	mov	sp, r7
 8002b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b76:	4770      	bx	lr

08002b78 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b083      	sub	sp, #12
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
 8002b80:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002b88:	605a      	str	r2, [r3, #4]
  return 0;
 8002b8a:	2300      	movs	r3, #0
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	370c      	adds	r7, #12
 8002b90:	46bd      	mov	sp, r7
 8002b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b96:	4770      	bx	lr

08002b98 <_isatty>:

int _isatty(int file)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b083      	sub	sp, #12
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002ba0:	2301      	movs	r3, #1
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	370c      	adds	r7, #12
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bac:	4770      	bx	lr

08002bae <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002bae:	b480      	push	{r7}
 8002bb0:	b085      	sub	sp, #20
 8002bb2:	af00      	add	r7, sp, #0
 8002bb4:	60f8      	str	r0, [r7, #12]
 8002bb6:	60b9      	str	r1, [r7, #8]
 8002bb8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002bba:	2300      	movs	r3, #0
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	3714      	adds	r7, #20
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc6:	4770      	bx	lr

08002bc8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b086      	sub	sp, #24
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002bd0:	4a14      	ldr	r2, [pc, #80]	@ (8002c24 <_sbrk+0x5c>)
 8002bd2:	4b15      	ldr	r3, [pc, #84]	@ (8002c28 <_sbrk+0x60>)
 8002bd4:	1ad3      	subs	r3, r2, r3
 8002bd6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002bdc:	4b13      	ldr	r3, [pc, #76]	@ (8002c2c <_sbrk+0x64>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d102      	bne.n	8002bea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002be4:	4b11      	ldr	r3, [pc, #68]	@ (8002c2c <_sbrk+0x64>)
 8002be6:	4a12      	ldr	r2, [pc, #72]	@ (8002c30 <_sbrk+0x68>)
 8002be8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002bea:	4b10      	ldr	r3, [pc, #64]	@ (8002c2c <_sbrk+0x64>)
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	4413      	add	r3, r2
 8002bf2:	693a      	ldr	r2, [r7, #16]
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	d207      	bcs.n	8002c08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002bf8:	f006 fbf0 	bl	80093dc <__errno>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	220c      	movs	r2, #12
 8002c00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002c02:	f04f 33ff 	mov.w	r3, #4294967295
 8002c06:	e009      	b.n	8002c1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002c08:	4b08      	ldr	r3, [pc, #32]	@ (8002c2c <_sbrk+0x64>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002c0e:	4b07      	ldr	r3, [pc, #28]	@ (8002c2c <_sbrk+0x64>)
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	4413      	add	r3, r2
 8002c16:	4a05      	ldr	r2, [pc, #20]	@ (8002c2c <_sbrk+0x64>)
 8002c18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	3718      	adds	r7, #24
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bd80      	pop	{r7, pc}
 8002c24:	20020000 	.word	0x20020000
 8002c28:	00000400 	.word	0x00000400
 8002c2c:	20000398 	.word	0x20000398
 8002c30:	200007c0 	.word	0x200007c0

08002c34 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002c34:	b480      	push	{r7}
 8002c36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002c38:	4b06      	ldr	r3, [pc, #24]	@ (8002c54 <SystemInit+0x20>)
 8002c3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c3e:	4a05      	ldr	r2, [pc, #20]	@ (8002c54 <SystemInit+0x20>)
 8002c40:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002c44:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002c48:	bf00      	nop
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c50:	4770      	bx	lr
 8002c52:	bf00      	nop
 8002c54:	e000ed00 	.word	0xe000ed00

08002c58 <MX_TIM1_Init>:
TIM_HandleTypeDef htim7;
TIM_HandleTypeDef htim11;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b08a      	sub	sp, #40	@ 0x28
 8002c5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002c5e:	f107 0318 	add.w	r3, r7, #24
 8002c62:	2200      	movs	r2, #0
 8002c64:	601a      	str	r2, [r3, #0]
 8002c66:	605a      	str	r2, [r3, #4]
 8002c68:	609a      	str	r2, [r3, #8]
 8002c6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c6c:	f107 0310 	add.w	r3, r7, #16
 8002c70:	2200      	movs	r2, #0
 8002c72:	601a      	str	r2, [r3, #0]
 8002c74:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002c76:	463b      	mov	r3, r7
 8002c78:	2200      	movs	r2, #0
 8002c7a:	601a      	str	r2, [r3, #0]
 8002c7c:	605a      	str	r2, [r3, #4]
 8002c7e:	609a      	str	r2, [r3, #8]
 8002c80:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002c82:	4b2d      	ldr	r3, [pc, #180]	@ (8002d38 <MX_TIM1_Init+0xe0>)
 8002c84:	4a2d      	ldr	r2, [pc, #180]	@ (8002d3c <MX_TIM1_Init+0xe4>)
 8002c86:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 90-1;
 8002c88:	4b2b      	ldr	r3, [pc, #172]	@ (8002d38 <MX_TIM1_Init+0xe0>)
 8002c8a:	2259      	movs	r2, #89	@ 0x59
 8002c8c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c8e:	4b2a      	ldr	r3, [pc, #168]	@ (8002d38 <MX_TIM1_Init+0xe0>)
 8002c90:	2200      	movs	r2, #0
 8002c92:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 8002c94:	4b28      	ldr	r3, [pc, #160]	@ (8002d38 <MX_TIM1_Init+0xe0>)
 8002c96:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8002c9a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c9c:	4b26      	ldr	r3, [pc, #152]	@ (8002d38 <MX_TIM1_Init+0xe0>)
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002ca2:	4b25      	ldr	r3, [pc, #148]	@ (8002d38 <MX_TIM1_Init+0xe0>)
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ca8:	4b23      	ldr	r3, [pc, #140]	@ (8002d38 <MX_TIM1_Init+0xe0>)
 8002caa:	2200      	movs	r2, #0
 8002cac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002cae:	4822      	ldr	r0, [pc, #136]	@ (8002d38 <MX_TIM1_Init+0xe0>)
 8002cb0:	f002 fb43 	bl	800533a <HAL_TIM_Base_Init>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d001      	beq.n	8002cbe <MX_TIM1_Init+0x66>
  {
    Error_Handler();
 8002cba:	f7ff fd57 	bl	800276c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002cbe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002cc2:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002cc4:	f107 0318 	add.w	r3, r7, #24
 8002cc8:	4619      	mov	r1, r3
 8002cca:	481b      	ldr	r0, [pc, #108]	@ (8002d38 <MX_TIM1_Init+0xe0>)
 8002ccc:	f003 f826 	bl	8005d1c <HAL_TIM_ConfigClockSource>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d001      	beq.n	8002cda <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8002cd6:	f7ff fd49 	bl	800276c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8002cda:	4817      	ldr	r0, [pc, #92]	@ (8002d38 <MX_TIM1_Init+0xe0>)
 8002cdc:	f002 fd76 	bl	80057cc <HAL_TIM_IC_Init>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d001      	beq.n	8002cea <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8002ce6:	f7ff fd41 	bl	800276c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002cea:	2300      	movs	r3, #0
 8002cec:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002cf2:	f107 0310 	add.w	r3, r7, #16
 8002cf6:	4619      	mov	r1, r3
 8002cf8:	480f      	ldr	r0, [pc, #60]	@ (8002d38 <MX_TIM1_Init+0xe0>)
 8002cfa:	f003 fd3f 	bl	800677c <HAL_TIMEx_MasterConfigSynchronization>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d001      	beq.n	8002d08 <MX_TIM1_Init+0xb0>
  {
    Error_Handler();
 8002d04:	f7ff fd32 	bl	800276c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002d10:	2300      	movs	r3, #0
 8002d12:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8002d14:	2300      	movs	r3, #0
 8002d16:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002d18:	463b      	mov	r3, r7
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	4619      	mov	r1, r3
 8002d1e:	4806      	ldr	r0, [pc, #24]	@ (8002d38 <MX_TIM1_Init+0xe0>)
 8002d20:	f002 fe9d 	bl	8005a5e <HAL_TIM_IC_ConfigChannel>
 8002d24:	4603      	mov	r3, r0
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d001      	beq.n	8002d2e <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8002d2a:	f7ff fd1f 	bl	800276c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002d2e:	bf00      	nop
 8002d30:	3728      	adds	r7, #40	@ 0x28
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}
 8002d36:	bf00      	nop
 8002d38:	2000039c 	.word	0x2000039c
 8002d3c:	40010000 	.word	0x40010000

08002d40 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b086      	sub	sp, #24
 8002d44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d46:	f107 0308 	add.w	r3, r7, #8
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	601a      	str	r2, [r3, #0]
 8002d4e:	605a      	str	r2, [r3, #4]
 8002d50:	609a      	str	r2, [r3, #8]
 8002d52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d54:	463b      	mov	r3, r7
 8002d56:	2200      	movs	r2, #0
 8002d58:	601a      	str	r2, [r3, #0]
 8002d5a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002d5c:	4b1e      	ldr	r3, [pc, #120]	@ (8002dd8 <MX_TIM2_Init+0x98>)
 8002d5e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002d62:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 9000-1;
 8002d64:	4b1c      	ldr	r3, [pc, #112]	@ (8002dd8 <MX_TIM2_Init+0x98>)
 8002d66:	f242 3227 	movw	r2, #8999	@ 0x2327
 8002d6a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d6c:	4b1a      	ldr	r3, [pc, #104]	@ (8002dd8 <MX_TIM2_Init+0x98>)
 8002d6e:	2200      	movs	r2, #0
 8002d70:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8002d72:	4b19      	ldr	r3, [pc, #100]	@ (8002dd8 <MX_TIM2_Init+0x98>)
 8002d74:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002d78:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d7a:	4b17      	ldr	r3, [pc, #92]	@ (8002dd8 <MX_TIM2_Init+0x98>)
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002d80:	4b15      	ldr	r3, [pc, #84]	@ (8002dd8 <MX_TIM2_Init+0x98>)
 8002d82:	2280      	movs	r2, #128	@ 0x80
 8002d84:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002d86:	4814      	ldr	r0, [pc, #80]	@ (8002dd8 <MX_TIM2_Init+0x98>)
 8002d88:	f002 fad7 	bl	800533a <HAL_TIM_Base_Init>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d001      	beq.n	8002d96 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8002d92:	f7ff fceb 	bl	800276c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d96:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002d9a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002d9c:	f107 0308 	add.w	r3, r7, #8
 8002da0:	4619      	mov	r1, r3
 8002da2:	480d      	ldr	r0, [pc, #52]	@ (8002dd8 <MX_TIM2_Init+0x98>)
 8002da4:	f002 ffba 	bl	8005d1c <HAL_TIM_ConfigClockSource>
 8002da8:	4603      	mov	r3, r0
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d001      	beq.n	8002db2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8002dae:	f7ff fcdd 	bl	800276c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002db2:	2300      	movs	r3, #0
 8002db4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002db6:	2300      	movs	r3, #0
 8002db8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002dba:	463b      	mov	r3, r7
 8002dbc:	4619      	mov	r1, r3
 8002dbe:	4806      	ldr	r0, [pc, #24]	@ (8002dd8 <MX_TIM2_Init+0x98>)
 8002dc0:	f003 fcdc 	bl	800677c <HAL_TIMEx_MasterConfigSynchronization>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d001      	beq.n	8002dce <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8002dca:	f7ff fccf 	bl	800276c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002dce:	bf00      	nop
 8002dd0:	3718      	adds	r7, #24
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}
 8002dd6:	bf00      	nop
 8002dd8:	200003e4 	.word	0x200003e4

08002ddc <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b086      	sub	sp, #24
 8002de0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002de2:	f107 0308 	add.w	r3, r7, #8
 8002de6:	2200      	movs	r2, #0
 8002de8:	601a      	str	r2, [r3, #0]
 8002dea:	605a      	str	r2, [r3, #4]
 8002dec:	609a      	str	r2, [r3, #8]
 8002dee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002df0:	463b      	mov	r3, r7
 8002df2:	2200      	movs	r2, #0
 8002df4:	601a      	str	r2, [r3, #0]
 8002df6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002df8:	4b1d      	ldr	r3, [pc, #116]	@ (8002e70 <MX_TIM3_Init+0x94>)
 8002dfa:	4a1e      	ldr	r2, [pc, #120]	@ (8002e74 <MX_TIM3_Init+0x98>)
 8002dfc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 45000-1;
 8002dfe:	4b1c      	ldr	r3, [pc, #112]	@ (8002e70 <MX_TIM3_Init+0x94>)
 8002e00:	f64a 72c7 	movw	r2, #44999	@ 0xafc7
 8002e04:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e06:	4b1a      	ldr	r3, [pc, #104]	@ (8002e70 <MX_TIM3_Init+0x94>)
 8002e08:	2200      	movs	r2, #0
 8002e0a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 60000-1;
 8002e0c:	4b18      	ldr	r3, [pc, #96]	@ (8002e70 <MX_TIM3_Init+0x94>)
 8002e0e:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 8002e12:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e14:	4b16      	ldr	r3, [pc, #88]	@ (8002e70 <MX_TIM3_Init+0x94>)
 8002e16:	2200      	movs	r2, #0
 8002e18:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e1a:	4b15      	ldr	r3, [pc, #84]	@ (8002e70 <MX_TIM3_Init+0x94>)
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002e20:	4813      	ldr	r0, [pc, #76]	@ (8002e70 <MX_TIM3_Init+0x94>)
 8002e22:	f002 fa8a 	bl	800533a <HAL_TIM_Base_Init>
 8002e26:	4603      	mov	r3, r0
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d001      	beq.n	8002e30 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8002e2c:	f7ff fc9e 	bl	800276c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e30:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002e34:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002e36:	f107 0308 	add.w	r3, r7, #8
 8002e3a:	4619      	mov	r1, r3
 8002e3c:	480c      	ldr	r0, [pc, #48]	@ (8002e70 <MX_TIM3_Init+0x94>)
 8002e3e:	f002 ff6d 	bl	8005d1c <HAL_TIM_ConfigClockSource>
 8002e42:	4603      	mov	r3, r0
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d001      	beq.n	8002e4c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8002e48:	f7ff fc90 	bl	800276c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e50:	2300      	movs	r3, #0
 8002e52:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002e54:	463b      	mov	r3, r7
 8002e56:	4619      	mov	r1, r3
 8002e58:	4805      	ldr	r0, [pc, #20]	@ (8002e70 <MX_TIM3_Init+0x94>)
 8002e5a:	f003 fc8f 	bl	800677c <HAL_TIMEx_MasterConfigSynchronization>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d001      	beq.n	8002e68 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8002e64:	f7ff fc82 	bl	800276c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002e68:	bf00      	nop
 8002e6a:	3718      	adds	r7, #24
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}
 8002e70:	2000042c 	.word	0x2000042c
 8002e74:	40000400 	.word	0x40000400

08002e78 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b086      	sub	sp, #24
 8002e7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002e7e:	f107 0308 	add.w	r3, r7, #8
 8002e82:	2200      	movs	r2, #0
 8002e84:	601a      	str	r2, [r3, #0]
 8002e86:	605a      	str	r2, [r3, #4]
 8002e88:	609a      	str	r2, [r3, #8]
 8002e8a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e8c:	463b      	mov	r3, r7
 8002e8e:	2200      	movs	r2, #0
 8002e90:	601a      	str	r2, [r3, #0]
 8002e92:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002e94:	4b1d      	ldr	r3, [pc, #116]	@ (8002f0c <MX_TIM4_Init+0x94>)
 8002e96:	4a1e      	ldr	r2, [pc, #120]	@ (8002f10 <MX_TIM4_Init+0x98>)
 8002e98:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 9000-1;
 8002e9a:	4b1c      	ldr	r3, [pc, #112]	@ (8002f0c <MX_TIM4_Init+0x94>)
 8002e9c:	f242 3227 	movw	r2, #8999	@ 0x2327
 8002ea0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ea2:	4b1a      	ldr	r3, [pc, #104]	@ (8002f0c <MX_TIM4_Init+0x94>)
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 8002ea8:	4b18      	ldr	r3, [pc, #96]	@ (8002f0c <MX_TIM4_Init+0x94>)
 8002eaa:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002eae:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002eb0:	4b16      	ldr	r3, [pc, #88]	@ (8002f0c <MX_TIM4_Init+0x94>)
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002eb6:	4b15      	ldr	r3, [pc, #84]	@ (8002f0c <MX_TIM4_Init+0x94>)
 8002eb8:	2200      	movs	r2, #0
 8002eba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002ebc:	4813      	ldr	r0, [pc, #76]	@ (8002f0c <MX_TIM4_Init+0x94>)
 8002ebe:	f002 fa3c 	bl	800533a <HAL_TIM_Base_Init>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d001      	beq.n	8002ecc <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8002ec8:	f7ff fc50 	bl	800276c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ecc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002ed0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002ed2:	f107 0308 	add.w	r3, r7, #8
 8002ed6:	4619      	mov	r1, r3
 8002ed8:	480c      	ldr	r0, [pc, #48]	@ (8002f0c <MX_TIM4_Init+0x94>)
 8002eda:	f002 ff1f 	bl	8005d1c <HAL_TIM_ConfigClockSource>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d001      	beq.n	8002ee8 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8002ee4:	f7ff fc42 	bl	800276c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002eec:	2300      	movs	r3, #0
 8002eee:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002ef0:	463b      	mov	r3, r7
 8002ef2:	4619      	mov	r1, r3
 8002ef4:	4805      	ldr	r0, [pc, #20]	@ (8002f0c <MX_TIM4_Init+0x94>)
 8002ef6:	f003 fc41 	bl	800677c <HAL_TIMEx_MasterConfigSynchronization>
 8002efa:	4603      	mov	r3, r0
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d001      	beq.n	8002f04 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8002f00:	f7ff fc34 	bl	800276c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002f04:	bf00      	nop
 8002f06:	3718      	adds	r7, #24
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd80      	pop	{r7, pc}
 8002f0c:	20000474 	.word	0x20000474
 8002f10:	40000800 	.word	0x40000800

08002f14 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b086      	sub	sp, #24
 8002f18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002f1a:	f107 0308 	add.w	r3, r7, #8
 8002f1e:	2200      	movs	r2, #0
 8002f20:	601a      	str	r2, [r3, #0]
 8002f22:	605a      	str	r2, [r3, #4]
 8002f24:	609a      	str	r2, [r3, #8]
 8002f26:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f28:	463b      	mov	r3, r7
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	601a      	str	r2, [r3, #0]
 8002f2e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002f30:	4b1d      	ldr	r3, [pc, #116]	@ (8002fa8 <MX_TIM5_Init+0x94>)
 8002f32:	4a1e      	ldr	r2, [pc, #120]	@ (8002fac <MX_TIM5_Init+0x98>)
 8002f34:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 9000-1;
 8002f36:	4b1c      	ldr	r3, [pc, #112]	@ (8002fa8 <MX_TIM5_Init+0x94>)
 8002f38:	f242 3227 	movw	r2, #8999	@ 0x2327
 8002f3c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f3e:	4b1a      	ldr	r3, [pc, #104]	@ (8002fa8 <MX_TIM5_Init+0x94>)
 8002f40:	2200      	movs	r2, #0
 8002f42:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1000-1;
 8002f44:	4b18      	ldr	r3, [pc, #96]	@ (8002fa8 <MX_TIM5_Init+0x94>)
 8002f46:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002f4a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f4c:	4b16      	ldr	r3, [pc, #88]	@ (8002fa8 <MX_TIM5_Init+0x94>)
 8002f4e:	2200      	movs	r2, #0
 8002f50:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f52:	4b15      	ldr	r3, [pc, #84]	@ (8002fa8 <MX_TIM5_Init+0x94>)
 8002f54:	2200      	movs	r2, #0
 8002f56:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002f58:	4813      	ldr	r0, [pc, #76]	@ (8002fa8 <MX_TIM5_Init+0x94>)
 8002f5a:	f002 f9ee 	bl	800533a <HAL_TIM_Base_Init>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d001      	beq.n	8002f68 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8002f64:	f7ff fc02 	bl	800276c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002f68:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002f6c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002f6e:	f107 0308 	add.w	r3, r7, #8
 8002f72:	4619      	mov	r1, r3
 8002f74:	480c      	ldr	r0, [pc, #48]	@ (8002fa8 <MX_TIM5_Init+0x94>)
 8002f76:	f002 fed1 	bl	8005d1c <HAL_TIM_ConfigClockSource>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d001      	beq.n	8002f84 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8002f80:	f7ff fbf4 	bl	800276c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f84:	2300      	movs	r3, #0
 8002f86:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002f8c:	463b      	mov	r3, r7
 8002f8e:	4619      	mov	r1, r3
 8002f90:	4805      	ldr	r0, [pc, #20]	@ (8002fa8 <MX_TIM5_Init+0x94>)
 8002f92:	f003 fbf3 	bl	800677c <HAL_TIMEx_MasterConfigSynchronization>
 8002f96:	4603      	mov	r3, r0
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d001      	beq.n	8002fa0 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8002f9c:	f7ff fbe6 	bl	800276c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002fa0:	bf00      	nop
 8002fa2:	3718      	adds	r7, #24
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}
 8002fa8:	200004bc 	.word	0x200004bc
 8002fac:	40000c00 	.word	0x40000c00

08002fb0 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b082      	sub	sp, #8
 8002fb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002fb6:	463b      	mov	r3, r7
 8002fb8:	2200      	movs	r2, #0
 8002fba:	601a      	str	r2, [r3, #0]
 8002fbc:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002fbe:	4b15      	ldr	r3, [pc, #84]	@ (8003014 <MX_TIM6_Init+0x64>)
 8002fc0:	4a15      	ldr	r2, [pc, #84]	@ (8003018 <MX_TIM6_Init+0x68>)
 8002fc2:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 90-1;
 8002fc4:	4b13      	ldr	r3, [pc, #76]	@ (8003014 <MX_TIM6_Init+0x64>)
 8002fc6:	2259      	movs	r2, #89	@ 0x59
 8002fc8:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002fca:	4b12      	ldr	r3, [pc, #72]	@ (8003014 <MX_TIM6_Init+0x64>)
 8002fcc:	2200      	movs	r2, #0
 8002fce:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535-1;
 8002fd0:	4b10      	ldr	r3, [pc, #64]	@ (8003014 <MX_TIM6_Init+0x64>)
 8002fd2:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8002fd6:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002fd8:	4b0e      	ldr	r3, [pc, #56]	@ (8003014 <MX_TIM6_Init+0x64>)
 8002fda:	2200      	movs	r2, #0
 8002fdc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002fde:	480d      	ldr	r0, [pc, #52]	@ (8003014 <MX_TIM6_Init+0x64>)
 8002fe0:	f002 f9ab 	bl	800533a <HAL_TIM_Base_Init>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d001      	beq.n	8002fee <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8002fea:	f7ff fbbf 	bl	800276c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002ff6:	463b      	mov	r3, r7
 8002ff8:	4619      	mov	r1, r3
 8002ffa:	4806      	ldr	r0, [pc, #24]	@ (8003014 <MX_TIM6_Init+0x64>)
 8002ffc:	f003 fbbe 	bl	800677c <HAL_TIMEx_MasterConfigSynchronization>
 8003000:	4603      	mov	r3, r0
 8003002:	2b00      	cmp	r3, #0
 8003004:	d001      	beq.n	800300a <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8003006:	f7ff fbb1 	bl	800276c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800300a:	bf00      	nop
 800300c:	3708      	adds	r7, #8
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}
 8003012:	bf00      	nop
 8003014:	20000504 	.word	0x20000504
 8003018:	40001000 	.word	0x40001000

0800301c <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b082      	sub	sp, #8
 8003020:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003022:	463b      	mov	r3, r7
 8003024:	2200      	movs	r2, #0
 8003026:	601a      	str	r2, [r3, #0]
 8003028:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800302a:	4b15      	ldr	r3, [pc, #84]	@ (8003080 <MX_TIM7_Init+0x64>)
 800302c:	4a15      	ldr	r2, [pc, #84]	@ (8003084 <MX_TIM7_Init+0x68>)
 800302e:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 90-1;
 8003030:	4b13      	ldr	r3, [pc, #76]	@ (8003080 <MX_TIM7_Init+0x64>)
 8003032:	2259      	movs	r2, #89	@ 0x59
 8003034:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003036:	4b12      	ldr	r3, [pc, #72]	@ (8003080 <MX_TIM7_Init+0x64>)
 8003038:	2200      	movs	r2, #0
 800303a:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535-1;
 800303c:	4b10      	ldr	r3, [pc, #64]	@ (8003080 <MX_TIM7_Init+0x64>)
 800303e:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8003042:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003044:	4b0e      	ldr	r3, [pc, #56]	@ (8003080 <MX_TIM7_Init+0x64>)
 8003046:	2200      	movs	r2, #0
 8003048:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800304a:	480d      	ldr	r0, [pc, #52]	@ (8003080 <MX_TIM7_Init+0x64>)
 800304c:	f002 f975 	bl	800533a <HAL_TIM_Base_Init>
 8003050:	4603      	mov	r3, r0
 8003052:	2b00      	cmp	r3, #0
 8003054:	d001      	beq.n	800305a <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8003056:	f7ff fb89 	bl	800276c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800305a:	2300      	movs	r3, #0
 800305c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800305e:	2300      	movs	r3, #0
 8003060:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8003062:	463b      	mov	r3, r7
 8003064:	4619      	mov	r1, r3
 8003066:	4806      	ldr	r0, [pc, #24]	@ (8003080 <MX_TIM7_Init+0x64>)
 8003068:	f003 fb88 	bl	800677c <HAL_TIMEx_MasterConfigSynchronization>
 800306c:	4603      	mov	r3, r0
 800306e:	2b00      	cmp	r3, #0
 8003070:	d001      	beq.n	8003076 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8003072:	f7ff fb7b 	bl	800276c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8003076:	bf00      	nop
 8003078:	3708      	adds	r7, #8
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}
 800307e:	bf00      	nop
 8003080:	2000054c 	.word	0x2000054c
 8003084:	40001400 	.word	0x40001400

08003088 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b088      	sub	sp, #32
 800308c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800308e:	1d3b      	adds	r3, r7, #4
 8003090:	2200      	movs	r2, #0
 8003092:	601a      	str	r2, [r3, #0]
 8003094:	605a      	str	r2, [r3, #4]
 8003096:	609a      	str	r2, [r3, #8]
 8003098:	60da      	str	r2, [r3, #12]
 800309a:	611a      	str	r2, [r3, #16]
 800309c:	615a      	str	r2, [r3, #20]
 800309e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80030a0:	4b1e      	ldr	r3, [pc, #120]	@ (800311c <MX_TIM11_Init+0x94>)
 80030a2:	4a1f      	ldr	r2, [pc, #124]	@ (8003120 <MX_TIM11_Init+0x98>)
 80030a4:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 9-1;
 80030a6:	4b1d      	ldr	r3, [pc, #116]	@ (800311c <MX_TIM11_Init+0x94>)
 80030a8:	2208      	movs	r2, #8
 80030aa:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80030ac:	4b1b      	ldr	r3, [pc, #108]	@ (800311c <MX_TIM11_Init+0x94>)
 80030ae:	2200      	movs	r2, #0
 80030b0:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 4096-1;
 80030b2:	4b1a      	ldr	r3, [pc, #104]	@ (800311c <MX_TIM11_Init+0x94>)
 80030b4:	f640 72ff 	movw	r2, #4095	@ 0xfff
 80030b8:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80030ba:	4b18      	ldr	r3, [pc, #96]	@ (800311c <MX_TIM11_Init+0x94>)
 80030bc:	2200      	movs	r2, #0
 80030be:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80030c0:	4b16      	ldr	r3, [pc, #88]	@ (800311c <MX_TIM11_Init+0x94>)
 80030c2:	2200      	movs	r2, #0
 80030c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80030c6:	4815      	ldr	r0, [pc, #84]	@ (800311c <MX_TIM11_Init+0x94>)
 80030c8:	f002 f937 	bl	800533a <HAL_TIM_Base_Init>
 80030cc:	4603      	mov	r3, r0
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d001      	beq.n	80030d6 <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 80030d2:	f7ff fb4b 	bl	800276c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 80030d6:	4811      	ldr	r0, [pc, #68]	@ (800311c <MX_TIM11_Init+0x94>)
 80030d8:	f002 fa56 	bl	8005588 <HAL_TIM_PWM_Init>
 80030dc:	4603      	mov	r3, r0
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d001      	beq.n	80030e6 <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 80030e2:	f7ff fb43 	bl	800276c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80030e6:	2360      	movs	r3, #96	@ 0x60
 80030e8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80030ea:	2300      	movs	r3, #0
 80030ec:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80030ee:	2300      	movs	r3, #0
 80030f0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80030f2:	2300      	movs	r3, #0
 80030f4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80030f6:	1d3b      	adds	r3, r7, #4
 80030f8:	2200      	movs	r2, #0
 80030fa:	4619      	mov	r1, r3
 80030fc:	4807      	ldr	r0, [pc, #28]	@ (800311c <MX_TIM11_Init+0x94>)
 80030fe:	f002 fd4b 	bl	8005b98 <HAL_TIM_PWM_ConfigChannel>
 8003102:	4603      	mov	r3, r0
 8003104:	2b00      	cmp	r3, #0
 8003106:	d001      	beq.n	800310c <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 8003108:	f7ff fb30 	bl	800276c <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 800310c:	4803      	ldr	r0, [pc, #12]	@ (800311c <MX_TIM11_Init+0x94>)
 800310e:	f000 f909 	bl	8003324 <HAL_TIM_MspPostInit>

}
 8003112:	bf00      	nop
 8003114:	3720      	adds	r7, #32
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}
 800311a:	bf00      	nop
 800311c:	20000594 	.word	0x20000594
 8003120:	40014800 	.word	0x40014800

08003124 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b090      	sub	sp, #64	@ 0x40
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800312c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003130:	2200      	movs	r2, #0
 8003132:	601a      	str	r2, [r3, #0]
 8003134:	605a      	str	r2, [r3, #4]
 8003136:	609a      	str	r2, [r3, #8]
 8003138:	60da      	str	r2, [r3, #12]
 800313a:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a6f      	ldr	r2, [pc, #444]	@ (8003300 <HAL_TIM_Base_MspInit+0x1dc>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d135      	bne.n	80031b2 <HAL_TIM_Base_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003146:	2300      	movs	r3, #0
 8003148:	62bb      	str	r3, [r7, #40]	@ 0x28
 800314a:	4b6e      	ldr	r3, [pc, #440]	@ (8003304 <HAL_TIM_Base_MspInit+0x1e0>)
 800314c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800314e:	4a6d      	ldr	r2, [pc, #436]	@ (8003304 <HAL_TIM_Base_MspInit+0x1e0>)
 8003150:	f043 0301 	orr.w	r3, r3, #1
 8003154:	6453      	str	r3, [r2, #68]	@ 0x44
 8003156:	4b6b      	ldr	r3, [pc, #428]	@ (8003304 <HAL_TIM_Base_MspInit+0x1e0>)
 8003158:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800315a:	f003 0301 	and.w	r3, r3, #1
 800315e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003160:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003162:	2300      	movs	r3, #0
 8003164:	627b      	str	r3, [r7, #36]	@ 0x24
 8003166:	4b67      	ldr	r3, [pc, #412]	@ (8003304 <HAL_TIM_Base_MspInit+0x1e0>)
 8003168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800316a:	4a66      	ldr	r2, [pc, #408]	@ (8003304 <HAL_TIM_Base_MspInit+0x1e0>)
 800316c:	f043 0301 	orr.w	r3, r3, #1
 8003170:	6313      	str	r3, [r2, #48]	@ 0x30
 8003172:	4b64      	ldr	r3, [pc, #400]	@ (8003304 <HAL_TIM_Base_MspInit+0x1e0>)
 8003174:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003176:	f003 0301 	and.w	r3, r3, #1
 800317a:	627b      	str	r3, [r7, #36]	@ 0x24
 800317c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800317e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003182:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003184:	2302      	movs	r3, #2
 8003186:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003188:	2300      	movs	r3, #0
 800318a:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800318c:	2302      	movs	r3, #2
 800318e:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003190:	2301      	movs	r3, #1
 8003192:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003194:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003198:	4619      	mov	r1, r3
 800319a:	485b      	ldr	r0, [pc, #364]	@ (8003308 <HAL_TIM_Base_MspInit+0x1e4>)
 800319c:	f001 f864 	bl	8004268 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80031a0:	2200      	movs	r2, #0
 80031a2:	2100      	movs	r1, #0
 80031a4:	201b      	movs	r0, #27
 80031a6:	f000 ff27 	bl	8003ff8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80031aa:	201b      	movs	r0, #27
 80031ac:	f000 ff40 	bl	8004030 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM11_CLK_ENABLE();
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 80031b0:	e0a2      	b.n	80032f8 <HAL_TIM_Base_MspInit+0x1d4>
  else if(tim_baseHandle->Instance==TIM2)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031ba:	d10e      	bne.n	80031da <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80031bc:	2300      	movs	r3, #0
 80031be:	623b      	str	r3, [r7, #32]
 80031c0:	4b50      	ldr	r3, [pc, #320]	@ (8003304 <HAL_TIM_Base_MspInit+0x1e0>)
 80031c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031c4:	4a4f      	ldr	r2, [pc, #316]	@ (8003304 <HAL_TIM_Base_MspInit+0x1e0>)
 80031c6:	f043 0301 	orr.w	r3, r3, #1
 80031ca:	6413      	str	r3, [r2, #64]	@ 0x40
 80031cc:	4b4d      	ldr	r3, [pc, #308]	@ (8003304 <HAL_TIM_Base_MspInit+0x1e0>)
 80031ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031d0:	f003 0301 	and.w	r3, r3, #1
 80031d4:	623b      	str	r3, [r7, #32]
 80031d6:	6a3b      	ldr	r3, [r7, #32]
}
 80031d8:	e08e      	b.n	80032f8 <HAL_TIM_Base_MspInit+0x1d4>
  else if(tim_baseHandle->Instance==TIM3)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a4b      	ldr	r2, [pc, #300]	@ (800330c <HAL_TIM_Base_MspInit+0x1e8>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d116      	bne.n	8003212 <HAL_TIM_Base_MspInit+0xee>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80031e4:	2300      	movs	r3, #0
 80031e6:	61fb      	str	r3, [r7, #28]
 80031e8:	4b46      	ldr	r3, [pc, #280]	@ (8003304 <HAL_TIM_Base_MspInit+0x1e0>)
 80031ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031ec:	4a45      	ldr	r2, [pc, #276]	@ (8003304 <HAL_TIM_Base_MspInit+0x1e0>)
 80031ee:	f043 0302 	orr.w	r3, r3, #2
 80031f2:	6413      	str	r3, [r2, #64]	@ 0x40
 80031f4:	4b43      	ldr	r3, [pc, #268]	@ (8003304 <HAL_TIM_Base_MspInit+0x1e0>)
 80031f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031f8:	f003 0302 	and.w	r3, r3, #2
 80031fc:	61fb      	str	r3, [r7, #28]
 80031fe:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003200:	2200      	movs	r2, #0
 8003202:	2100      	movs	r1, #0
 8003204:	201d      	movs	r0, #29
 8003206:	f000 fef7 	bl	8003ff8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800320a:	201d      	movs	r0, #29
 800320c:	f000 ff10 	bl	8004030 <HAL_NVIC_EnableIRQ>
}
 8003210:	e072      	b.n	80032f8 <HAL_TIM_Base_MspInit+0x1d4>
  else if(tim_baseHandle->Instance==TIM4)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a3e      	ldr	r2, [pc, #248]	@ (8003310 <HAL_TIM_Base_MspInit+0x1ec>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d116      	bne.n	800324a <HAL_TIM_Base_MspInit+0x126>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800321c:	2300      	movs	r3, #0
 800321e:	61bb      	str	r3, [r7, #24]
 8003220:	4b38      	ldr	r3, [pc, #224]	@ (8003304 <HAL_TIM_Base_MspInit+0x1e0>)
 8003222:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003224:	4a37      	ldr	r2, [pc, #220]	@ (8003304 <HAL_TIM_Base_MspInit+0x1e0>)
 8003226:	f043 0304 	orr.w	r3, r3, #4
 800322a:	6413      	str	r3, [r2, #64]	@ 0x40
 800322c:	4b35      	ldr	r3, [pc, #212]	@ (8003304 <HAL_TIM_Base_MspInit+0x1e0>)
 800322e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003230:	f003 0304 	and.w	r3, r3, #4
 8003234:	61bb      	str	r3, [r7, #24]
 8003236:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8003238:	2200      	movs	r2, #0
 800323a:	2100      	movs	r1, #0
 800323c:	201e      	movs	r0, #30
 800323e:	f000 fedb 	bl	8003ff8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003242:	201e      	movs	r0, #30
 8003244:	f000 fef4 	bl	8004030 <HAL_NVIC_EnableIRQ>
}
 8003248:	e056      	b.n	80032f8 <HAL_TIM_Base_MspInit+0x1d4>
  else if(tim_baseHandle->Instance==TIM5)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a31      	ldr	r2, [pc, #196]	@ (8003314 <HAL_TIM_Base_MspInit+0x1f0>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d116      	bne.n	8003282 <HAL_TIM_Base_MspInit+0x15e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003254:	2300      	movs	r3, #0
 8003256:	617b      	str	r3, [r7, #20]
 8003258:	4b2a      	ldr	r3, [pc, #168]	@ (8003304 <HAL_TIM_Base_MspInit+0x1e0>)
 800325a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800325c:	4a29      	ldr	r2, [pc, #164]	@ (8003304 <HAL_TIM_Base_MspInit+0x1e0>)
 800325e:	f043 0308 	orr.w	r3, r3, #8
 8003262:	6413      	str	r3, [r2, #64]	@ 0x40
 8003264:	4b27      	ldr	r3, [pc, #156]	@ (8003304 <HAL_TIM_Base_MspInit+0x1e0>)
 8003266:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003268:	f003 0308 	and.w	r3, r3, #8
 800326c:	617b      	str	r3, [r7, #20]
 800326e:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8003270:	2200      	movs	r2, #0
 8003272:	2100      	movs	r1, #0
 8003274:	2032      	movs	r0, #50	@ 0x32
 8003276:	f000 febf 	bl	8003ff8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800327a:	2032      	movs	r0, #50	@ 0x32
 800327c:	f000 fed8 	bl	8004030 <HAL_NVIC_EnableIRQ>
}
 8003280:	e03a      	b.n	80032f8 <HAL_TIM_Base_MspInit+0x1d4>
  else if(tim_baseHandle->Instance==TIM6)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a24      	ldr	r2, [pc, #144]	@ (8003318 <HAL_TIM_Base_MspInit+0x1f4>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d10e      	bne.n	80032aa <HAL_TIM_Base_MspInit+0x186>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800328c:	2300      	movs	r3, #0
 800328e:	613b      	str	r3, [r7, #16]
 8003290:	4b1c      	ldr	r3, [pc, #112]	@ (8003304 <HAL_TIM_Base_MspInit+0x1e0>)
 8003292:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003294:	4a1b      	ldr	r2, [pc, #108]	@ (8003304 <HAL_TIM_Base_MspInit+0x1e0>)
 8003296:	f043 0310 	orr.w	r3, r3, #16
 800329a:	6413      	str	r3, [r2, #64]	@ 0x40
 800329c:	4b19      	ldr	r3, [pc, #100]	@ (8003304 <HAL_TIM_Base_MspInit+0x1e0>)
 800329e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032a0:	f003 0310 	and.w	r3, r3, #16
 80032a4:	613b      	str	r3, [r7, #16]
 80032a6:	693b      	ldr	r3, [r7, #16]
}
 80032a8:	e026      	b.n	80032f8 <HAL_TIM_Base_MspInit+0x1d4>
  else if(tim_baseHandle->Instance==TIM7)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a1b      	ldr	r2, [pc, #108]	@ (800331c <HAL_TIM_Base_MspInit+0x1f8>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d10e      	bne.n	80032d2 <HAL_TIM_Base_MspInit+0x1ae>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80032b4:	2300      	movs	r3, #0
 80032b6:	60fb      	str	r3, [r7, #12]
 80032b8:	4b12      	ldr	r3, [pc, #72]	@ (8003304 <HAL_TIM_Base_MspInit+0x1e0>)
 80032ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032bc:	4a11      	ldr	r2, [pc, #68]	@ (8003304 <HAL_TIM_Base_MspInit+0x1e0>)
 80032be:	f043 0320 	orr.w	r3, r3, #32
 80032c2:	6413      	str	r3, [r2, #64]	@ 0x40
 80032c4:	4b0f      	ldr	r3, [pc, #60]	@ (8003304 <HAL_TIM_Base_MspInit+0x1e0>)
 80032c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032c8:	f003 0320 	and.w	r3, r3, #32
 80032cc:	60fb      	str	r3, [r7, #12]
 80032ce:	68fb      	ldr	r3, [r7, #12]
}
 80032d0:	e012      	b.n	80032f8 <HAL_TIM_Base_MspInit+0x1d4>
  else if(tim_baseHandle->Instance==TIM11)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a12      	ldr	r2, [pc, #72]	@ (8003320 <HAL_TIM_Base_MspInit+0x1fc>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d10d      	bne.n	80032f8 <HAL_TIM_Base_MspInit+0x1d4>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80032dc:	2300      	movs	r3, #0
 80032de:	60bb      	str	r3, [r7, #8]
 80032e0:	4b08      	ldr	r3, [pc, #32]	@ (8003304 <HAL_TIM_Base_MspInit+0x1e0>)
 80032e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032e4:	4a07      	ldr	r2, [pc, #28]	@ (8003304 <HAL_TIM_Base_MspInit+0x1e0>)
 80032e6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80032ea:	6453      	str	r3, [r2, #68]	@ 0x44
 80032ec:	4b05      	ldr	r3, [pc, #20]	@ (8003304 <HAL_TIM_Base_MspInit+0x1e0>)
 80032ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032f0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80032f4:	60bb      	str	r3, [r7, #8]
 80032f6:	68bb      	ldr	r3, [r7, #8]
}
 80032f8:	bf00      	nop
 80032fa:	3740      	adds	r7, #64	@ 0x40
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}
 8003300:	40010000 	.word	0x40010000
 8003304:	40023800 	.word	0x40023800
 8003308:	40020000 	.word	0x40020000
 800330c:	40000400 	.word	0x40000400
 8003310:	40000800 	.word	0x40000800
 8003314:	40000c00 	.word	0x40000c00
 8003318:	40001000 	.word	0x40001000
 800331c:	40001400 	.word	0x40001400
 8003320:	40014800 	.word	0x40014800

08003324 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b088      	sub	sp, #32
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800332c:	f107 030c 	add.w	r3, r7, #12
 8003330:	2200      	movs	r2, #0
 8003332:	601a      	str	r2, [r3, #0]
 8003334:	605a      	str	r2, [r3, #4]
 8003336:	609a      	str	r2, [r3, #8]
 8003338:	60da      	str	r2, [r3, #12]
 800333a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM11)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a12      	ldr	r2, [pc, #72]	@ (800338c <HAL_TIM_MspPostInit+0x68>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d11e      	bne.n	8003384 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM11_MspPostInit 0 */

  /* USER CODE END TIM11_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003346:	2300      	movs	r3, #0
 8003348:	60bb      	str	r3, [r7, #8]
 800334a:	4b11      	ldr	r3, [pc, #68]	@ (8003390 <HAL_TIM_MspPostInit+0x6c>)
 800334c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800334e:	4a10      	ldr	r2, [pc, #64]	@ (8003390 <HAL_TIM_MspPostInit+0x6c>)
 8003350:	f043 0302 	orr.w	r3, r3, #2
 8003354:	6313      	str	r3, [r2, #48]	@ 0x30
 8003356:	4b0e      	ldr	r3, [pc, #56]	@ (8003390 <HAL_TIM_MspPostInit+0x6c>)
 8003358:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800335a:	f003 0302 	and.w	r3, r3, #2
 800335e:	60bb      	str	r3, [r7, #8]
 8003360:	68bb      	ldr	r3, [r7, #8]
    /**TIM11 GPIO Configuration
    PB9     ------> TIM11_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003362:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003366:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003368:	2302      	movs	r3, #2
 800336a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800336c:	2300      	movs	r3, #0
 800336e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003370:	2300      	movs	r3, #0
 8003372:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8003374:	2303      	movs	r3, #3
 8003376:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003378:	f107 030c 	add.w	r3, r7, #12
 800337c:	4619      	mov	r1, r3
 800337e:	4805      	ldr	r0, [pc, #20]	@ (8003394 <HAL_TIM_MspPostInit+0x70>)
 8003380:	f000 ff72 	bl	8004268 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 8003384:	bf00      	nop
 8003386:	3720      	adds	r7, #32
 8003388:	46bd      	mov	sp, r7
 800338a:	bd80      	pop	{r7, pc}
 800338c:	40014800 	.word	0x40014800
 8003390:	40023800 	.word	0x40023800
 8003394:	40020400 	.word	0x40020400

08003398 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800339c:	4b11      	ldr	r3, [pc, #68]	@ (80033e4 <MX_USART1_UART_Init+0x4c>)
 800339e:	4a12      	ldr	r2, [pc, #72]	@ (80033e8 <MX_USART1_UART_Init+0x50>)
 80033a0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80033a2:	4b10      	ldr	r3, [pc, #64]	@ (80033e4 <MX_USART1_UART_Init+0x4c>)
 80033a4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80033a8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80033aa:	4b0e      	ldr	r3, [pc, #56]	@ (80033e4 <MX_USART1_UART_Init+0x4c>)
 80033ac:	2200      	movs	r2, #0
 80033ae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80033b0:	4b0c      	ldr	r3, [pc, #48]	@ (80033e4 <MX_USART1_UART_Init+0x4c>)
 80033b2:	2200      	movs	r2, #0
 80033b4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80033b6:	4b0b      	ldr	r3, [pc, #44]	@ (80033e4 <MX_USART1_UART_Init+0x4c>)
 80033b8:	2200      	movs	r2, #0
 80033ba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80033bc:	4b09      	ldr	r3, [pc, #36]	@ (80033e4 <MX_USART1_UART_Init+0x4c>)
 80033be:	220c      	movs	r2, #12
 80033c0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80033c2:	4b08      	ldr	r3, [pc, #32]	@ (80033e4 <MX_USART1_UART_Init+0x4c>)
 80033c4:	2200      	movs	r2, #0
 80033c6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80033c8:	4b06      	ldr	r3, [pc, #24]	@ (80033e4 <MX_USART1_UART_Init+0x4c>)
 80033ca:	2200      	movs	r2, #0
 80033cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80033ce:	4805      	ldr	r0, [pc, #20]	@ (80033e4 <MX_USART1_UART_Init+0x4c>)
 80033d0:	f003 fa64 	bl	800689c <HAL_UART_Init>
 80033d4:	4603      	mov	r3, r0
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d001      	beq.n	80033de <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80033da:	f7ff f9c7 	bl	800276c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80033de:	bf00      	nop
 80033e0:	bd80      	pop	{r7, pc}
 80033e2:	bf00      	nop
 80033e4:	200005dc 	.word	0x200005dc
 80033e8:	40011000 	.word	0x40011000

080033ec <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80033f0:	4b11      	ldr	r3, [pc, #68]	@ (8003438 <MX_USART2_UART_Init+0x4c>)
 80033f2:	4a12      	ldr	r2, [pc, #72]	@ (800343c <MX_USART2_UART_Init+0x50>)
 80033f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80033f6:	4b10      	ldr	r3, [pc, #64]	@ (8003438 <MX_USART2_UART_Init+0x4c>)
 80033f8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80033fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80033fe:	4b0e      	ldr	r3, [pc, #56]	@ (8003438 <MX_USART2_UART_Init+0x4c>)
 8003400:	2200      	movs	r2, #0
 8003402:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003404:	4b0c      	ldr	r3, [pc, #48]	@ (8003438 <MX_USART2_UART_Init+0x4c>)
 8003406:	2200      	movs	r2, #0
 8003408:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800340a:	4b0b      	ldr	r3, [pc, #44]	@ (8003438 <MX_USART2_UART_Init+0x4c>)
 800340c:	2200      	movs	r2, #0
 800340e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003410:	4b09      	ldr	r3, [pc, #36]	@ (8003438 <MX_USART2_UART_Init+0x4c>)
 8003412:	220c      	movs	r2, #12
 8003414:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003416:	4b08      	ldr	r3, [pc, #32]	@ (8003438 <MX_USART2_UART_Init+0x4c>)
 8003418:	2200      	movs	r2, #0
 800341a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800341c:	4b06      	ldr	r3, [pc, #24]	@ (8003438 <MX_USART2_UART_Init+0x4c>)
 800341e:	2200      	movs	r2, #0
 8003420:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003422:	4805      	ldr	r0, [pc, #20]	@ (8003438 <MX_USART2_UART_Init+0x4c>)
 8003424:	f003 fa3a 	bl	800689c <HAL_UART_Init>
 8003428:	4603      	mov	r3, r0
 800342a:	2b00      	cmp	r3, #0
 800342c:	d001      	beq.n	8003432 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800342e:	f7ff f99d 	bl	800276c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003432:	bf00      	nop
 8003434:	bd80      	pop	{r7, pc}
 8003436:	bf00      	nop
 8003438:	20000624 	.word	0x20000624
 800343c:	40004400 	.word	0x40004400

08003440 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b08c      	sub	sp, #48	@ 0x30
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003448:	f107 031c 	add.w	r3, r7, #28
 800344c:	2200      	movs	r2, #0
 800344e:	601a      	str	r2, [r3, #0]
 8003450:	605a      	str	r2, [r3, #4]
 8003452:	609a      	str	r2, [r3, #8]
 8003454:	60da      	str	r2, [r3, #12]
 8003456:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a36      	ldr	r2, [pc, #216]	@ (8003538 <HAL_UART_MspInit+0xf8>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d135      	bne.n	80034ce <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003462:	2300      	movs	r3, #0
 8003464:	61bb      	str	r3, [r7, #24]
 8003466:	4b35      	ldr	r3, [pc, #212]	@ (800353c <HAL_UART_MspInit+0xfc>)
 8003468:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800346a:	4a34      	ldr	r2, [pc, #208]	@ (800353c <HAL_UART_MspInit+0xfc>)
 800346c:	f043 0310 	orr.w	r3, r3, #16
 8003470:	6453      	str	r3, [r2, #68]	@ 0x44
 8003472:	4b32      	ldr	r3, [pc, #200]	@ (800353c <HAL_UART_MspInit+0xfc>)
 8003474:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003476:	f003 0310 	and.w	r3, r3, #16
 800347a:	61bb      	str	r3, [r7, #24]
 800347c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800347e:	2300      	movs	r3, #0
 8003480:	617b      	str	r3, [r7, #20]
 8003482:	4b2e      	ldr	r3, [pc, #184]	@ (800353c <HAL_UART_MspInit+0xfc>)
 8003484:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003486:	4a2d      	ldr	r2, [pc, #180]	@ (800353c <HAL_UART_MspInit+0xfc>)
 8003488:	f043 0301 	orr.w	r3, r3, #1
 800348c:	6313      	str	r3, [r2, #48]	@ 0x30
 800348e:	4b2b      	ldr	r3, [pc, #172]	@ (800353c <HAL_UART_MspInit+0xfc>)
 8003490:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003492:	f003 0301 	and.w	r3, r3, #1
 8003496:	617b      	str	r3, [r7, #20]
 8003498:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800349a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800349e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034a0:	2302      	movs	r3, #2
 80034a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034a4:	2300      	movs	r3, #0
 80034a6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034a8:	2303      	movs	r3, #3
 80034aa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80034ac:	2307      	movs	r3, #7
 80034ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034b0:	f107 031c 	add.w	r3, r7, #28
 80034b4:	4619      	mov	r1, r3
 80034b6:	4822      	ldr	r0, [pc, #136]	@ (8003540 <HAL_UART_MspInit+0x100>)
 80034b8:	f000 fed6 	bl	8004268 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80034bc:	2200      	movs	r2, #0
 80034be:	2100      	movs	r1, #0
 80034c0:	2025      	movs	r0, #37	@ 0x25
 80034c2:	f000 fd99 	bl	8003ff8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80034c6:	2025      	movs	r0, #37	@ 0x25
 80034c8:	f000 fdb2 	bl	8004030 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80034cc:	e030      	b.n	8003530 <HAL_UART_MspInit+0xf0>
  else if(uartHandle->Instance==USART2)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a1c      	ldr	r2, [pc, #112]	@ (8003544 <HAL_UART_MspInit+0x104>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d12b      	bne.n	8003530 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 80034d8:	2300      	movs	r3, #0
 80034da:	613b      	str	r3, [r7, #16]
 80034dc:	4b17      	ldr	r3, [pc, #92]	@ (800353c <HAL_UART_MspInit+0xfc>)
 80034de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034e0:	4a16      	ldr	r2, [pc, #88]	@ (800353c <HAL_UART_MspInit+0xfc>)
 80034e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80034e6:	6413      	str	r3, [r2, #64]	@ 0x40
 80034e8:	4b14      	ldr	r3, [pc, #80]	@ (800353c <HAL_UART_MspInit+0xfc>)
 80034ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034f0:	613b      	str	r3, [r7, #16]
 80034f2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034f4:	2300      	movs	r3, #0
 80034f6:	60fb      	str	r3, [r7, #12]
 80034f8:	4b10      	ldr	r3, [pc, #64]	@ (800353c <HAL_UART_MspInit+0xfc>)
 80034fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034fc:	4a0f      	ldr	r2, [pc, #60]	@ (800353c <HAL_UART_MspInit+0xfc>)
 80034fe:	f043 0301 	orr.w	r3, r3, #1
 8003502:	6313      	str	r3, [r2, #48]	@ 0x30
 8003504:	4b0d      	ldr	r3, [pc, #52]	@ (800353c <HAL_UART_MspInit+0xfc>)
 8003506:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003508:	f003 0301 	and.w	r3, r3, #1
 800350c:	60fb      	str	r3, [r7, #12]
 800350e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003510:	230c      	movs	r3, #12
 8003512:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003514:	2302      	movs	r3, #2
 8003516:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003518:	2300      	movs	r3, #0
 800351a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800351c:	2303      	movs	r3, #3
 800351e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003520:	2307      	movs	r3, #7
 8003522:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003524:	f107 031c 	add.w	r3, r7, #28
 8003528:	4619      	mov	r1, r3
 800352a:	4805      	ldr	r0, [pc, #20]	@ (8003540 <HAL_UART_MspInit+0x100>)
 800352c:	f000 fe9c 	bl	8004268 <HAL_GPIO_Init>
}
 8003530:	bf00      	nop
 8003532:	3730      	adds	r7, #48	@ 0x30
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}
 8003538:	40011000 	.word	0x40011000
 800353c:	40023800 	.word	0x40023800
 8003540:	40020000 	.word	0x40020000
 8003544:	40004400 	.word	0x40004400

08003548 <Reset_Handler>:
 8003548:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003580 <LoopFillZerobss+0xe>
 800354c:	f7ff fb72 	bl	8002c34 <SystemInit>
 8003550:	480c      	ldr	r0, [pc, #48]	@ (8003584 <LoopFillZerobss+0x12>)
 8003552:	490d      	ldr	r1, [pc, #52]	@ (8003588 <LoopFillZerobss+0x16>)
 8003554:	4a0d      	ldr	r2, [pc, #52]	@ (800358c <LoopFillZerobss+0x1a>)
 8003556:	2300      	movs	r3, #0
 8003558:	e002      	b.n	8003560 <LoopCopyDataInit>

0800355a <CopyDataInit>:
 800355a:	58d4      	ldr	r4, [r2, r3]
 800355c:	50c4      	str	r4, [r0, r3]
 800355e:	3304      	adds	r3, #4

08003560 <LoopCopyDataInit>:
 8003560:	18c4      	adds	r4, r0, r3
 8003562:	428c      	cmp	r4, r1
 8003564:	d3f9      	bcc.n	800355a <CopyDataInit>
 8003566:	4a0a      	ldr	r2, [pc, #40]	@ (8003590 <LoopFillZerobss+0x1e>)
 8003568:	4c0a      	ldr	r4, [pc, #40]	@ (8003594 <LoopFillZerobss+0x22>)
 800356a:	2300      	movs	r3, #0
 800356c:	e001      	b.n	8003572 <LoopFillZerobss>

0800356e <FillZerobss>:
 800356e:	6013      	str	r3, [r2, #0]
 8003570:	3204      	adds	r2, #4

08003572 <LoopFillZerobss>:
 8003572:	42a2      	cmp	r2, r4
 8003574:	d3fb      	bcc.n	800356e <FillZerobss>
 8003576:	f005 ff37 	bl	80093e8 <__libc_init_array>
 800357a:	f7fe fe05 	bl	8002188 <main>
 800357e:	4770      	bx	lr
 8003580:	20020000 	.word	0x20020000
 8003584:	20000000 	.word	0x20000000
 8003588:	20000220 	.word	0x20000220
 800358c:	0800d030 	.word	0x0800d030
 8003590:	20000220 	.word	0x20000220
 8003594:	200007bc 	.word	0x200007bc

08003598 <ADC_IRQHandler>:
 8003598:	e7fe      	b.n	8003598 <ADC_IRQHandler>
	...

0800359c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80035a0:	4b0e      	ldr	r3, [pc, #56]	@ (80035dc <HAL_Init+0x40>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a0d      	ldr	r2, [pc, #52]	@ (80035dc <HAL_Init+0x40>)
 80035a6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80035aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80035ac:	4b0b      	ldr	r3, [pc, #44]	@ (80035dc <HAL_Init+0x40>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a0a      	ldr	r2, [pc, #40]	@ (80035dc <HAL_Init+0x40>)
 80035b2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80035b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80035b8:	4b08      	ldr	r3, [pc, #32]	@ (80035dc <HAL_Init+0x40>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a07      	ldr	r2, [pc, #28]	@ (80035dc <HAL_Init+0x40>)
 80035be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80035c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80035c4:	2003      	movs	r0, #3
 80035c6:	f000 fd0c 	bl	8003fe2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80035ca:	200f      	movs	r0, #15
 80035cc:	f7ff f97a 	bl	80028c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80035d0:	f7ff f950 	bl	8002874 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80035d4:	2300      	movs	r3, #0
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	bd80      	pop	{r7, pc}
 80035da:	bf00      	nop
 80035dc:	40023c00 	.word	0x40023c00

080035e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80035e0:	b480      	push	{r7}
 80035e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80035e4:	4b06      	ldr	r3, [pc, #24]	@ (8003600 <HAL_IncTick+0x20>)
 80035e6:	781b      	ldrb	r3, [r3, #0]
 80035e8:	461a      	mov	r2, r3
 80035ea:	4b06      	ldr	r3, [pc, #24]	@ (8003604 <HAL_IncTick+0x24>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4413      	add	r3, r2
 80035f0:	4a04      	ldr	r2, [pc, #16]	@ (8003604 <HAL_IncTick+0x24>)
 80035f2:	6013      	str	r3, [r2, #0]
}
 80035f4:	bf00      	nop
 80035f6:	46bd      	mov	sp, r7
 80035f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fc:	4770      	bx	lr
 80035fe:	bf00      	nop
 8003600:	20000054 	.word	0x20000054
 8003604:	2000066c 	.word	0x2000066c

08003608 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003608:	b480      	push	{r7}
 800360a:	af00      	add	r7, sp, #0
  return uwTick;
 800360c:	4b03      	ldr	r3, [pc, #12]	@ (800361c <HAL_GetTick+0x14>)
 800360e:	681b      	ldr	r3, [r3, #0]
}
 8003610:	4618      	mov	r0, r3
 8003612:	46bd      	mov	sp, r7
 8003614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003618:	4770      	bx	lr
 800361a:	bf00      	nop
 800361c:	2000066c 	.word	0x2000066c

08003620 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b084      	sub	sp, #16
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003628:	f7ff ffee 	bl	8003608 <HAL_GetTick>
 800362c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003638:	d005      	beq.n	8003646 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800363a:	4b0a      	ldr	r3, [pc, #40]	@ (8003664 <HAL_Delay+0x44>)
 800363c:	781b      	ldrb	r3, [r3, #0]
 800363e:	461a      	mov	r2, r3
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	4413      	add	r3, r2
 8003644:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003646:	bf00      	nop
 8003648:	f7ff ffde 	bl	8003608 <HAL_GetTick>
 800364c:	4602      	mov	r2, r0
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	1ad3      	subs	r3, r2, r3
 8003652:	68fa      	ldr	r2, [r7, #12]
 8003654:	429a      	cmp	r2, r3
 8003656:	d8f7      	bhi.n	8003648 <HAL_Delay+0x28>
  {
  }
}
 8003658:	bf00      	nop
 800365a:	bf00      	nop
 800365c:	3710      	adds	r7, #16
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}
 8003662:	bf00      	nop
 8003664:	20000054 	.word	0x20000054

08003668 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b084      	sub	sp, #16
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003670:	2300      	movs	r3, #0
 8003672:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d101      	bne.n	800367e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	e033      	b.n	80036e6 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003682:	2b00      	cmp	r3, #0
 8003684:	d109      	bne.n	800369a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	f7fd fd4c 	bl	8001124 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2200      	movs	r2, #0
 8003690:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2200      	movs	r2, #0
 8003696:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800369e:	f003 0310 	and.w	r3, r3, #16
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d118      	bne.n	80036d8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036aa:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80036ae:	f023 0302 	bic.w	r3, r3, #2
 80036b2:	f043 0202 	orr.w	r2, r3, #2
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	f000 fae8 	bl	8003c90 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2200      	movs	r2, #0
 80036c4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036ca:	f023 0303 	bic.w	r3, r3, #3
 80036ce:	f043 0201 	orr.w	r2, r3, #1
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	641a      	str	r2, [r3, #64]	@ 0x40
 80036d6:	e001      	b.n	80036dc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80036d8:	2301      	movs	r3, #1
 80036da:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2200      	movs	r2, #0
 80036e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80036e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	3710      	adds	r7, #16
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}
	...

080036f0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b085      	sub	sp, #20
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80036f8:	2300      	movs	r3, #0
 80036fa:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003702:	2b01      	cmp	r3, #1
 8003704:	d101      	bne.n	800370a <HAL_ADC_Start+0x1a>
 8003706:	2302      	movs	r3, #2
 8003708:	e0b2      	b.n	8003870 <HAL_ADC_Start+0x180>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2201      	movs	r2, #1
 800370e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	689b      	ldr	r3, [r3, #8]
 8003718:	f003 0301 	and.w	r3, r3, #1
 800371c:	2b01      	cmp	r3, #1
 800371e:	d018      	beq.n	8003752 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	689a      	ldr	r2, [r3, #8]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f042 0201 	orr.w	r2, r2, #1
 800372e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003730:	4b52      	ldr	r3, [pc, #328]	@ (800387c <HAL_ADC_Start+0x18c>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a52      	ldr	r2, [pc, #328]	@ (8003880 <HAL_ADC_Start+0x190>)
 8003736:	fba2 2303 	umull	r2, r3, r2, r3
 800373a:	0c9a      	lsrs	r2, r3, #18
 800373c:	4613      	mov	r3, r2
 800373e:	005b      	lsls	r3, r3, #1
 8003740:	4413      	add	r3, r2
 8003742:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8003744:	e002      	b.n	800374c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	3b01      	subs	r3, #1
 800374a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d1f9      	bne.n	8003746 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	f003 0301 	and.w	r3, r3, #1
 800375c:	2b01      	cmp	r3, #1
 800375e:	d17a      	bne.n	8003856 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003764:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8003768:	f023 0301 	bic.w	r3, r3, #1
 800376c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800377e:	2b00      	cmp	r3, #0
 8003780:	d007      	beq.n	8003792 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003786:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800378a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003796:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800379a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800379e:	d106      	bne.n	80037ae <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037a4:	f023 0206 	bic.w	r2, r3, #6
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	645a      	str	r2, [r3, #68]	@ 0x44
 80037ac:	e002      	b.n	80037b4 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2200      	movs	r2, #0
 80037b2:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2200      	movs	r2, #0
 80037b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80037bc:	4b31      	ldr	r3, [pc, #196]	@ (8003884 <HAL_ADC_Start+0x194>)
 80037be:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80037c8:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	f003 031f 	and.w	r3, r3, #31
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d12a      	bne.n	800382c <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a2b      	ldr	r2, [pc, #172]	@ (8003888 <HAL_ADC_Start+0x198>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d015      	beq.n	800380c <HAL_ADC_Start+0x11c>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a29      	ldr	r2, [pc, #164]	@ (800388c <HAL_ADC_Start+0x19c>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d105      	bne.n	80037f6 <HAL_ADC_Start+0x106>
 80037ea:	4b26      	ldr	r3, [pc, #152]	@ (8003884 <HAL_ADC_Start+0x194>)
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	f003 031f 	and.w	r3, r3, #31
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d00a      	beq.n	800380c <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a25      	ldr	r2, [pc, #148]	@ (8003890 <HAL_ADC_Start+0x1a0>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d136      	bne.n	800386e <HAL_ADC_Start+0x17e>
 8003800:	4b20      	ldr	r3, [pc, #128]	@ (8003884 <HAL_ADC_Start+0x194>)
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	f003 0310 	and.w	r3, r3, #16
 8003808:	2b00      	cmp	r3, #0
 800380a:	d130      	bne.n	800386e <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	689b      	ldr	r3, [r3, #8]
 8003812:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003816:	2b00      	cmp	r3, #0
 8003818:	d129      	bne.n	800386e <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	689a      	ldr	r2, [r3, #8]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003828:	609a      	str	r2, [r3, #8]
 800382a:	e020      	b.n	800386e <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a15      	ldr	r2, [pc, #84]	@ (8003888 <HAL_ADC_Start+0x198>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d11b      	bne.n	800386e <HAL_ADC_Start+0x17e>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003840:	2b00      	cmp	r3, #0
 8003842:	d114      	bne.n	800386e <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	689a      	ldr	r2, [r3, #8]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003852:	609a      	str	r2, [r3, #8]
 8003854:	e00b      	b.n	800386e <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800385a:	f043 0210 	orr.w	r2, r3, #16
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003866:	f043 0201 	orr.w	r2, r3, #1
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800386e:	2300      	movs	r3, #0
}
 8003870:	4618      	mov	r0, r3
 8003872:	3714      	adds	r7, #20
 8003874:	46bd      	mov	sp, r7
 8003876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387a:	4770      	bx	lr
 800387c:	2000004c 	.word	0x2000004c
 8003880:	431bde83 	.word	0x431bde83
 8003884:	40012300 	.word	0x40012300
 8003888:	40012000 	.word	0x40012000
 800388c:	40012100 	.word	0x40012100
 8003890:	40012200 	.word	0x40012200

08003894 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8003894:	b480      	push	{r7}
 8003896:	b083      	sub	sp, #12
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80038a2:	2b01      	cmp	r3, #1
 80038a4:	d101      	bne.n	80038aa <HAL_ADC_Stop+0x16>
 80038a6:	2302      	movs	r3, #2
 80038a8:	e021      	b.n	80038ee <HAL_ADC_Stop+0x5a>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2201      	movs	r2, #1
 80038ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	689a      	ldr	r2, [r3, #8]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f022 0201 	bic.w	r2, r2, #1
 80038c0:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	f003 0301 	and.w	r3, r3, #1
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d109      	bne.n	80038e4 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038d4:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80038d8:	f023 0301 	bic.w	r3, r3, #1
 80038dc:	f043 0201 	orr.w	r2, r3, #1
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2200      	movs	r2, #0
 80038e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80038ec:	2300      	movs	r3, #0
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	370c      	adds	r7, #12
 80038f2:	46bd      	mov	sp, r7
 80038f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f8:	4770      	bx	lr

080038fa <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80038fa:	b580      	push	{r7, lr}
 80038fc:	b084      	sub	sp, #16
 80038fe:	af00      	add	r7, sp, #0
 8003900:	6078      	str	r0, [r7, #4]
 8003902:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003904:	2300      	movs	r3, #0
 8003906:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	689b      	ldr	r3, [r3, #8]
 800390e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003912:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003916:	d113      	bne.n	8003940 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003922:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003926:	d10b      	bne.n	8003940 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800392c:	f043 0220 	orr.w	r2, r3, #32
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2200      	movs	r2, #0
 8003938:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800393c:	2301      	movs	r3, #1
 800393e:	e063      	b.n	8003a08 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8003940:	f7ff fe62 	bl	8003608 <HAL_GetTick>
 8003944:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003946:	e021      	b.n	800398c <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800394e:	d01d      	beq.n	800398c <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d007      	beq.n	8003966 <HAL_ADC_PollForConversion+0x6c>
 8003956:	f7ff fe57 	bl	8003608 <HAL_GetTick>
 800395a:	4602      	mov	r2, r0
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	1ad3      	subs	r3, r2, r3
 8003960:	683a      	ldr	r2, [r7, #0]
 8003962:	429a      	cmp	r2, r3
 8003964:	d212      	bcs.n	800398c <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f003 0302 	and.w	r3, r3, #2
 8003970:	2b02      	cmp	r3, #2
 8003972:	d00b      	beq.n	800398c <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003978:	f043 0204 	orr.w	r2, r3, #4
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2200      	movs	r2, #0
 8003984:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8003988:	2303      	movs	r3, #3
 800398a:	e03d      	b.n	8003a08 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f003 0302 	and.w	r3, r3, #2
 8003996:	2b02      	cmp	r3, #2
 8003998:	d1d6      	bne.n	8003948 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f06f 0212 	mvn.w	r2, #18
 80039a2:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039a8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d123      	bne.n	8003a06 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d11f      	bne.n	8003a06 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039cc:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d006      	beq.n	80039e2 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d111      	bne.n	8003a06 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039e6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039f2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d105      	bne.n	8003a06 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039fe:	f043 0201 	orr.w	r2, r3, #1
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8003a06:	2300      	movs	r3, #0
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	3710      	adds	r7, #16
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bd80      	pop	{r7, pc}

08003a10 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003a10:	b480      	push	{r7}
 8003a12:	b083      	sub	sp, #12
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	370c      	adds	r7, #12
 8003a22:	46bd      	mov	sp, r7
 8003a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a28:	4770      	bx	lr
	...

08003a2c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b085      	sub	sp, #20
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
 8003a34:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003a36:	2300      	movs	r3, #0
 8003a38:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a40:	2b01      	cmp	r3, #1
 8003a42:	d101      	bne.n	8003a48 <HAL_ADC_ConfigChannel+0x1c>
 8003a44:	2302      	movs	r3, #2
 8003a46:	e113      	b.n	8003c70 <HAL_ADC_ConfigChannel+0x244>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	2b09      	cmp	r3, #9
 8003a56:	d925      	bls.n	8003aa4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	68d9      	ldr	r1, [r3, #12]
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	b29b      	uxth	r3, r3
 8003a64:	461a      	mov	r2, r3
 8003a66:	4613      	mov	r3, r2
 8003a68:	005b      	lsls	r3, r3, #1
 8003a6a:	4413      	add	r3, r2
 8003a6c:	3b1e      	subs	r3, #30
 8003a6e:	2207      	movs	r2, #7
 8003a70:	fa02 f303 	lsl.w	r3, r2, r3
 8003a74:	43da      	mvns	r2, r3
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	400a      	ands	r2, r1
 8003a7c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	68d9      	ldr	r1, [r3, #12]
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	689a      	ldr	r2, [r3, #8]
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	b29b      	uxth	r3, r3
 8003a8e:	4618      	mov	r0, r3
 8003a90:	4603      	mov	r3, r0
 8003a92:	005b      	lsls	r3, r3, #1
 8003a94:	4403      	add	r3, r0
 8003a96:	3b1e      	subs	r3, #30
 8003a98:	409a      	lsls	r2, r3
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	430a      	orrs	r2, r1
 8003aa0:	60da      	str	r2, [r3, #12]
 8003aa2:	e022      	b.n	8003aea <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	6919      	ldr	r1, [r3, #16]
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	b29b      	uxth	r3, r3
 8003ab0:	461a      	mov	r2, r3
 8003ab2:	4613      	mov	r3, r2
 8003ab4:	005b      	lsls	r3, r3, #1
 8003ab6:	4413      	add	r3, r2
 8003ab8:	2207      	movs	r2, #7
 8003aba:	fa02 f303 	lsl.w	r3, r2, r3
 8003abe:	43da      	mvns	r2, r3
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	400a      	ands	r2, r1
 8003ac6:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	6919      	ldr	r1, [r3, #16]
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	689a      	ldr	r2, [r3, #8]
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	b29b      	uxth	r3, r3
 8003ad8:	4618      	mov	r0, r3
 8003ada:	4603      	mov	r3, r0
 8003adc:	005b      	lsls	r3, r3, #1
 8003ade:	4403      	add	r3, r0
 8003ae0:	409a      	lsls	r2, r3
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	430a      	orrs	r2, r1
 8003ae8:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	2b06      	cmp	r3, #6
 8003af0:	d824      	bhi.n	8003b3c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	685a      	ldr	r2, [r3, #4]
 8003afc:	4613      	mov	r3, r2
 8003afe:	009b      	lsls	r3, r3, #2
 8003b00:	4413      	add	r3, r2
 8003b02:	3b05      	subs	r3, #5
 8003b04:	221f      	movs	r2, #31
 8003b06:	fa02 f303 	lsl.w	r3, r2, r3
 8003b0a:	43da      	mvns	r2, r3
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	400a      	ands	r2, r1
 8003b12:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	b29b      	uxth	r3, r3
 8003b20:	4618      	mov	r0, r3
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	685a      	ldr	r2, [r3, #4]
 8003b26:	4613      	mov	r3, r2
 8003b28:	009b      	lsls	r3, r3, #2
 8003b2a:	4413      	add	r3, r2
 8003b2c:	3b05      	subs	r3, #5
 8003b2e:	fa00 f203 	lsl.w	r2, r0, r3
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	430a      	orrs	r2, r1
 8003b38:	635a      	str	r2, [r3, #52]	@ 0x34
 8003b3a:	e04c      	b.n	8003bd6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	2b0c      	cmp	r3, #12
 8003b42:	d824      	bhi.n	8003b8e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	685a      	ldr	r2, [r3, #4]
 8003b4e:	4613      	mov	r3, r2
 8003b50:	009b      	lsls	r3, r3, #2
 8003b52:	4413      	add	r3, r2
 8003b54:	3b23      	subs	r3, #35	@ 0x23
 8003b56:	221f      	movs	r2, #31
 8003b58:	fa02 f303 	lsl.w	r3, r2, r3
 8003b5c:	43da      	mvns	r2, r3
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	400a      	ands	r2, r1
 8003b64:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	b29b      	uxth	r3, r3
 8003b72:	4618      	mov	r0, r3
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	685a      	ldr	r2, [r3, #4]
 8003b78:	4613      	mov	r3, r2
 8003b7a:	009b      	lsls	r3, r3, #2
 8003b7c:	4413      	add	r3, r2
 8003b7e:	3b23      	subs	r3, #35	@ 0x23
 8003b80:	fa00 f203 	lsl.w	r2, r0, r3
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	430a      	orrs	r2, r1
 8003b8a:	631a      	str	r2, [r3, #48]	@ 0x30
 8003b8c:	e023      	b.n	8003bd6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	685a      	ldr	r2, [r3, #4]
 8003b98:	4613      	mov	r3, r2
 8003b9a:	009b      	lsls	r3, r3, #2
 8003b9c:	4413      	add	r3, r2
 8003b9e:	3b41      	subs	r3, #65	@ 0x41
 8003ba0:	221f      	movs	r2, #31
 8003ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba6:	43da      	mvns	r2, r3
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	400a      	ands	r2, r1
 8003bae:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	b29b      	uxth	r3, r3
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	685a      	ldr	r2, [r3, #4]
 8003bc2:	4613      	mov	r3, r2
 8003bc4:	009b      	lsls	r3, r3, #2
 8003bc6:	4413      	add	r3, r2
 8003bc8:	3b41      	subs	r3, #65	@ 0x41
 8003bca:	fa00 f203 	lsl.w	r2, r0, r3
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	430a      	orrs	r2, r1
 8003bd4:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003bd6:	4b29      	ldr	r3, [pc, #164]	@ (8003c7c <HAL_ADC_ConfigChannel+0x250>)
 8003bd8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a28      	ldr	r2, [pc, #160]	@ (8003c80 <HAL_ADC_ConfigChannel+0x254>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d10f      	bne.n	8003c04 <HAL_ADC_ConfigChannel+0x1d8>
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	2b12      	cmp	r3, #18
 8003bea:	d10b      	bne.n	8003c04 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a1d      	ldr	r2, [pc, #116]	@ (8003c80 <HAL_ADC_ConfigChannel+0x254>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d12b      	bne.n	8003c66 <HAL_ADC_ConfigChannel+0x23a>
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a1c      	ldr	r2, [pc, #112]	@ (8003c84 <HAL_ADC_ConfigChannel+0x258>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d003      	beq.n	8003c20 <HAL_ADC_ConfigChannel+0x1f4>
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	2b11      	cmp	r3, #17
 8003c1e:	d122      	bne.n	8003c66 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a11      	ldr	r2, [pc, #68]	@ (8003c84 <HAL_ADC_ConfigChannel+0x258>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d111      	bne.n	8003c66 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003c42:	4b11      	ldr	r3, [pc, #68]	@ (8003c88 <HAL_ADC_ConfigChannel+0x25c>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a11      	ldr	r2, [pc, #68]	@ (8003c8c <HAL_ADC_ConfigChannel+0x260>)
 8003c48:	fba2 2303 	umull	r2, r3, r2, r3
 8003c4c:	0c9a      	lsrs	r2, r3, #18
 8003c4e:	4613      	mov	r3, r2
 8003c50:	009b      	lsls	r3, r3, #2
 8003c52:	4413      	add	r3, r2
 8003c54:	005b      	lsls	r3, r3, #1
 8003c56:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003c58:	e002      	b.n	8003c60 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003c5a:	68bb      	ldr	r3, [r7, #8]
 8003c5c:	3b01      	subs	r3, #1
 8003c5e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d1f9      	bne.n	8003c5a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8003c6e:	2300      	movs	r3, #0
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	3714      	adds	r7, #20
 8003c74:	46bd      	mov	sp, r7
 8003c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7a:	4770      	bx	lr
 8003c7c:	40012300 	.word	0x40012300
 8003c80:	40012000 	.word	0x40012000
 8003c84:	10000012 	.word	0x10000012
 8003c88:	2000004c 	.word	0x2000004c
 8003c8c:	431bde83 	.word	0x431bde83

08003c90 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b085      	sub	sp, #20
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003c98:	4b79      	ldr	r3, [pc, #484]	@ (8003e80 <ADC_Init+0x1f0>)
 8003c9a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	685a      	ldr	r2, [r3, #4]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	431a      	orrs	r2, r3
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	685a      	ldr	r2, [r3, #4]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003cc4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	6859      	ldr	r1, [r3, #4]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	691b      	ldr	r3, [r3, #16]
 8003cd0:	021a      	lsls	r2, r3, #8
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	430a      	orrs	r2, r1
 8003cd8:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	685a      	ldr	r2, [r3, #4]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003ce8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	6859      	ldr	r1, [r3, #4]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	689a      	ldr	r2, [r3, #8]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	430a      	orrs	r2, r1
 8003cfa:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	689a      	ldr	r2, [r3, #8]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003d0a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	6899      	ldr	r1, [r3, #8]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	68da      	ldr	r2, [r3, #12]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	430a      	orrs	r2, r1
 8003d1c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d22:	4a58      	ldr	r2, [pc, #352]	@ (8003e84 <ADC_Init+0x1f4>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d022      	beq.n	8003d6e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	689a      	ldr	r2, [r3, #8]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003d36:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	6899      	ldr	r1, [r3, #8]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	430a      	orrs	r2, r1
 8003d48:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	689a      	ldr	r2, [r3, #8]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003d58:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	6899      	ldr	r1, [r3, #8]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	430a      	orrs	r2, r1
 8003d6a:	609a      	str	r2, [r3, #8]
 8003d6c:	e00f      	b.n	8003d8e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	689a      	ldr	r2, [r3, #8]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003d7c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	689a      	ldr	r2, [r3, #8]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003d8c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	689a      	ldr	r2, [r3, #8]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f022 0202 	bic.w	r2, r2, #2
 8003d9c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	6899      	ldr	r1, [r3, #8]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	7e1b      	ldrb	r3, [r3, #24]
 8003da8:	005a      	lsls	r2, r3, #1
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	430a      	orrs	r2, r1
 8003db0:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d01b      	beq.n	8003df4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	685a      	ldr	r2, [r3, #4]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003dca:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	685a      	ldr	r2, [r3, #4]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8003dda:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	6859      	ldr	r1, [r3, #4]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003de6:	3b01      	subs	r3, #1
 8003de8:	035a      	lsls	r2, r3, #13
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	430a      	orrs	r2, r1
 8003df0:	605a      	str	r2, [r3, #4]
 8003df2:	e007      	b.n	8003e04 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	685a      	ldr	r2, [r3, #4]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003e02:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8003e12:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	69db      	ldr	r3, [r3, #28]
 8003e1e:	3b01      	subs	r3, #1
 8003e20:	051a      	lsls	r2, r3, #20
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	430a      	orrs	r2, r1
 8003e28:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	689a      	ldr	r2, [r3, #8]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003e38:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	6899      	ldr	r1, [r3, #8]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003e46:	025a      	lsls	r2, r3, #9
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	430a      	orrs	r2, r1
 8003e4e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	689a      	ldr	r2, [r3, #8]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e5e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	6899      	ldr	r1, [r3, #8]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	695b      	ldr	r3, [r3, #20]
 8003e6a:	029a      	lsls	r2, r3, #10
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	430a      	orrs	r2, r1
 8003e72:	609a      	str	r2, [r3, #8]
}
 8003e74:	bf00      	nop
 8003e76:	3714      	adds	r7, #20
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7e:	4770      	bx	lr
 8003e80:	40012300 	.word	0x40012300
 8003e84:	0f000001 	.word	0x0f000001

08003e88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	b085      	sub	sp, #20
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	f003 0307 	and.w	r3, r3, #7
 8003e96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003e98:	4b0c      	ldr	r3, [pc, #48]	@ (8003ecc <__NVIC_SetPriorityGrouping+0x44>)
 8003e9a:	68db      	ldr	r3, [r3, #12]
 8003e9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003e9e:	68ba      	ldr	r2, [r7, #8]
 8003ea0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003ea4:	4013      	ands	r3, r2
 8003ea6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003eb0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003eb4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003eb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003eba:	4a04      	ldr	r2, [pc, #16]	@ (8003ecc <__NVIC_SetPriorityGrouping+0x44>)
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	60d3      	str	r3, [r2, #12]
}
 8003ec0:	bf00      	nop
 8003ec2:	3714      	adds	r7, #20
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eca:	4770      	bx	lr
 8003ecc:	e000ed00 	.word	0xe000ed00

08003ed0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ed4:	4b04      	ldr	r3, [pc, #16]	@ (8003ee8 <__NVIC_GetPriorityGrouping+0x18>)
 8003ed6:	68db      	ldr	r3, [r3, #12]
 8003ed8:	0a1b      	lsrs	r3, r3, #8
 8003eda:	f003 0307 	and.w	r3, r3, #7
}
 8003ede:	4618      	mov	r0, r3
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee6:	4770      	bx	lr
 8003ee8:	e000ed00 	.word	0xe000ed00

08003eec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b083      	sub	sp, #12
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ef6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	db0b      	blt.n	8003f16 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003efe:	79fb      	ldrb	r3, [r7, #7]
 8003f00:	f003 021f 	and.w	r2, r3, #31
 8003f04:	4907      	ldr	r1, [pc, #28]	@ (8003f24 <__NVIC_EnableIRQ+0x38>)
 8003f06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f0a:	095b      	lsrs	r3, r3, #5
 8003f0c:	2001      	movs	r0, #1
 8003f0e:	fa00 f202 	lsl.w	r2, r0, r2
 8003f12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003f16:	bf00      	nop
 8003f18:	370c      	adds	r7, #12
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f20:	4770      	bx	lr
 8003f22:	bf00      	nop
 8003f24:	e000e100 	.word	0xe000e100

08003f28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	b083      	sub	sp, #12
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	4603      	mov	r3, r0
 8003f30:	6039      	str	r1, [r7, #0]
 8003f32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	db0a      	blt.n	8003f52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	b2da      	uxtb	r2, r3
 8003f40:	490c      	ldr	r1, [pc, #48]	@ (8003f74 <__NVIC_SetPriority+0x4c>)
 8003f42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f46:	0112      	lsls	r2, r2, #4
 8003f48:	b2d2      	uxtb	r2, r2
 8003f4a:	440b      	add	r3, r1
 8003f4c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003f50:	e00a      	b.n	8003f68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	b2da      	uxtb	r2, r3
 8003f56:	4908      	ldr	r1, [pc, #32]	@ (8003f78 <__NVIC_SetPriority+0x50>)
 8003f58:	79fb      	ldrb	r3, [r7, #7]
 8003f5a:	f003 030f 	and.w	r3, r3, #15
 8003f5e:	3b04      	subs	r3, #4
 8003f60:	0112      	lsls	r2, r2, #4
 8003f62:	b2d2      	uxtb	r2, r2
 8003f64:	440b      	add	r3, r1
 8003f66:	761a      	strb	r2, [r3, #24]
}
 8003f68:	bf00      	nop
 8003f6a:	370c      	adds	r7, #12
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f72:	4770      	bx	lr
 8003f74:	e000e100 	.word	0xe000e100
 8003f78:	e000ed00 	.word	0xe000ed00

08003f7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b089      	sub	sp, #36	@ 0x24
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	60f8      	str	r0, [r7, #12]
 8003f84:	60b9      	str	r1, [r7, #8]
 8003f86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	f003 0307 	and.w	r3, r3, #7
 8003f8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003f90:	69fb      	ldr	r3, [r7, #28]
 8003f92:	f1c3 0307 	rsb	r3, r3, #7
 8003f96:	2b04      	cmp	r3, #4
 8003f98:	bf28      	it	cs
 8003f9a:	2304      	movcs	r3, #4
 8003f9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003f9e:	69fb      	ldr	r3, [r7, #28]
 8003fa0:	3304      	adds	r3, #4
 8003fa2:	2b06      	cmp	r3, #6
 8003fa4:	d902      	bls.n	8003fac <NVIC_EncodePriority+0x30>
 8003fa6:	69fb      	ldr	r3, [r7, #28]
 8003fa8:	3b03      	subs	r3, #3
 8003faa:	e000      	b.n	8003fae <NVIC_EncodePriority+0x32>
 8003fac:	2300      	movs	r3, #0
 8003fae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fb0:	f04f 32ff 	mov.w	r2, #4294967295
 8003fb4:	69bb      	ldr	r3, [r7, #24]
 8003fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8003fba:	43da      	mvns	r2, r3
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	401a      	ands	r2, r3
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003fc4:	f04f 31ff 	mov.w	r1, #4294967295
 8003fc8:	697b      	ldr	r3, [r7, #20]
 8003fca:	fa01 f303 	lsl.w	r3, r1, r3
 8003fce:	43d9      	mvns	r1, r3
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fd4:	4313      	orrs	r3, r2
         );
}
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	3724      	adds	r7, #36	@ 0x24
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe0:	4770      	bx	lr

08003fe2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003fe2:	b580      	push	{r7, lr}
 8003fe4:	b082      	sub	sp, #8
 8003fe6:	af00      	add	r7, sp, #0
 8003fe8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003fea:	6878      	ldr	r0, [r7, #4]
 8003fec:	f7ff ff4c 	bl	8003e88 <__NVIC_SetPriorityGrouping>
}
 8003ff0:	bf00      	nop
 8003ff2:	3708      	adds	r7, #8
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bd80      	pop	{r7, pc}

08003ff8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b086      	sub	sp, #24
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	4603      	mov	r3, r0
 8004000:	60b9      	str	r1, [r7, #8]
 8004002:	607a      	str	r2, [r7, #4]
 8004004:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004006:	2300      	movs	r3, #0
 8004008:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800400a:	f7ff ff61 	bl	8003ed0 <__NVIC_GetPriorityGrouping>
 800400e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004010:	687a      	ldr	r2, [r7, #4]
 8004012:	68b9      	ldr	r1, [r7, #8]
 8004014:	6978      	ldr	r0, [r7, #20]
 8004016:	f7ff ffb1 	bl	8003f7c <NVIC_EncodePriority>
 800401a:	4602      	mov	r2, r0
 800401c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004020:	4611      	mov	r1, r2
 8004022:	4618      	mov	r0, r3
 8004024:	f7ff ff80 	bl	8003f28 <__NVIC_SetPriority>
}
 8004028:	bf00      	nop
 800402a:	3718      	adds	r7, #24
 800402c:	46bd      	mov	sp, r7
 800402e:	bd80      	pop	{r7, pc}

08004030 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b082      	sub	sp, #8
 8004034:	af00      	add	r7, sp, #0
 8004036:	4603      	mov	r3, r0
 8004038:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800403a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800403e:	4618      	mov	r0, r3
 8004040:	f7ff ff54 	bl	8003eec <__NVIC_EnableIRQ>
}
 8004044:	bf00      	nop
 8004046:	3708      	adds	r7, #8
 8004048:	46bd      	mov	sp, r7
 800404a:	bd80      	pop	{r7, pc}

0800404c <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b082      	sub	sp, #8
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d101      	bne.n	800405e <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800405a:	2301      	movs	r3, #1
 800405c:	e014      	b.n	8004088 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	791b      	ldrb	r3, [r3, #4]
 8004062:	b2db      	uxtb	r3, r3
 8004064:	2b00      	cmp	r3, #0
 8004066:	d105      	bne.n	8004074 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2200      	movs	r2, #0
 800406c:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800406e:	6878      	ldr	r0, [r7, #4]
 8004070:	f7fd f8c6 	bl	8001200 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2202      	movs	r2, #2
 8004078:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2200      	movs	r2, #0
 800407e:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2201      	movs	r2, #1
 8004084:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004086:	2300      	movs	r3, #0
}
 8004088:	4618      	mov	r0, r3
 800408a:	3708      	adds	r7, #8
 800408c:	46bd      	mov	sp, r7
 800408e:	bd80      	pop	{r7, pc}

08004090 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8004090:	b480      	push	{r7}
 8004092:	b089      	sub	sp, #36	@ 0x24
 8004094:	af00      	add	r7, sp, #0
 8004096:	60f8      	str	r0, [r7, #12]
 8004098:	60b9      	str	r1, [r7, #8]
 800409a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800409c:	2300      	movs	r3, #0
 800409e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d002      	beq.n	80040ac <HAL_DAC_ConfigChannel+0x1c>
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d101      	bne.n	80040b0 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 80040ac:	2301      	movs	r3, #1
 80040ae:	e042      	b.n	8004136 <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	795b      	ldrb	r3, [r3, #5]
 80040b4:	2b01      	cmp	r3, #1
 80040b6:	d101      	bne.n	80040bc <HAL_DAC_ConfigChannel+0x2c>
 80040b8:	2302      	movs	r3, #2
 80040ba:	e03c      	b.n	8004136 <HAL_DAC_ConfigChannel+0xa6>
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	2201      	movs	r2, #1
 80040c0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	2202      	movs	r2, #2
 80040c6:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	f003 0310 	and.w	r3, r3, #16
 80040d6:	f640 72fe 	movw	r2, #4094	@ 0xffe
 80040da:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 80040de:	43db      	mvns	r3, r3
 80040e0:	69ba      	ldr	r2, [r7, #24]
 80040e2:	4013      	ands	r3, r2
 80040e4:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80040e6:	68bb      	ldr	r3, [r7, #8]
 80040e8:	681a      	ldr	r2, [r3, #0]
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	4313      	orrs	r3, r2
 80040f0:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	f003 0310 	and.w	r3, r3, #16
 80040f8:	697a      	ldr	r2, [r7, #20]
 80040fa:	fa02 f303 	lsl.w	r3, r2, r3
 80040fe:	69ba      	ldr	r2, [r7, #24]
 8004100:	4313      	orrs	r3, r2
 8004102:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	69ba      	ldr	r2, [r7, #24]
 800410a:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	6819      	ldr	r1, [r3, #0]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	f003 0310 	and.w	r3, r3, #16
 8004118:	22c0      	movs	r2, #192	@ 0xc0
 800411a:	fa02 f303 	lsl.w	r3, r2, r3
 800411e:	43da      	mvns	r2, r3
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	400a      	ands	r2, r1
 8004126:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	2201      	movs	r2, #1
 800412c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	2200      	movs	r2, #0
 8004132:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8004134:	7ffb      	ldrb	r3, [r7, #31]
}
 8004136:	4618      	mov	r0, r3
 8004138:	3724      	adds	r7, #36	@ 0x24
 800413a:	46bd      	mov	sp, r7
 800413c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004140:	4770      	bx	lr

08004142 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004142:	b580      	push	{r7, lr}
 8004144:	b084      	sub	sp, #16
 8004146:	af00      	add	r7, sp, #0
 8004148:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800414e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004150:	f7ff fa5a 	bl	8003608 <HAL_GetTick>
 8004154:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800415c:	b2db      	uxtb	r3, r3
 800415e:	2b02      	cmp	r3, #2
 8004160:	d008      	beq.n	8004174 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2280      	movs	r2, #128	@ 0x80
 8004166:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2200      	movs	r2, #0
 800416c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8004170:	2301      	movs	r3, #1
 8004172:	e052      	b.n	800421a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	681a      	ldr	r2, [r3, #0]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f022 0216 	bic.w	r2, r2, #22
 8004182:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	695a      	ldr	r2, [r3, #20]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004192:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004198:	2b00      	cmp	r3, #0
 800419a:	d103      	bne.n	80041a4 <HAL_DMA_Abort+0x62>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d007      	beq.n	80041b4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	681a      	ldr	r2, [r3, #0]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f022 0208 	bic.w	r2, r2, #8
 80041b2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	681a      	ldr	r2, [r3, #0]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f022 0201 	bic.w	r2, r2, #1
 80041c2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80041c4:	e013      	b.n	80041ee <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80041c6:	f7ff fa1f 	bl	8003608 <HAL_GetTick>
 80041ca:	4602      	mov	r2, r0
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	1ad3      	subs	r3, r2, r3
 80041d0:	2b05      	cmp	r3, #5
 80041d2:	d90c      	bls.n	80041ee <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2220      	movs	r2, #32
 80041d8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2203      	movs	r2, #3
 80041de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2200      	movs	r2, #0
 80041e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80041ea:	2303      	movs	r3, #3
 80041ec:	e015      	b.n	800421a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f003 0301 	and.w	r3, r3, #1
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d1e4      	bne.n	80041c6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004200:	223f      	movs	r2, #63	@ 0x3f
 8004202:	409a      	lsls	r2, r3
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2201      	movs	r2, #1
 800420c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2200      	movs	r2, #0
 8004214:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8004218:	2300      	movs	r3, #0
}
 800421a:	4618      	mov	r0, r3
 800421c:	3710      	adds	r7, #16
 800421e:	46bd      	mov	sp, r7
 8004220:	bd80      	pop	{r7, pc}

08004222 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004222:	b480      	push	{r7}
 8004224:	b083      	sub	sp, #12
 8004226:	af00      	add	r7, sp, #0
 8004228:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004230:	b2db      	uxtb	r3, r3
 8004232:	2b02      	cmp	r3, #2
 8004234:	d004      	beq.n	8004240 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2280      	movs	r2, #128	@ 0x80
 800423a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800423c:	2301      	movs	r3, #1
 800423e:	e00c      	b.n	800425a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2205      	movs	r2, #5
 8004244:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	681a      	ldr	r2, [r3, #0]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f022 0201 	bic.w	r2, r2, #1
 8004256:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004258:	2300      	movs	r3, #0
}
 800425a:	4618      	mov	r0, r3
 800425c:	370c      	adds	r7, #12
 800425e:	46bd      	mov	sp, r7
 8004260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004264:	4770      	bx	lr
	...

08004268 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004268:	b480      	push	{r7}
 800426a:	b089      	sub	sp, #36	@ 0x24
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
 8004270:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004272:	2300      	movs	r3, #0
 8004274:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004276:	2300      	movs	r3, #0
 8004278:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800427a:	2300      	movs	r3, #0
 800427c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800427e:	2300      	movs	r3, #0
 8004280:	61fb      	str	r3, [r7, #28]
 8004282:	e165      	b.n	8004550 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004284:	2201      	movs	r2, #1
 8004286:	69fb      	ldr	r3, [r7, #28]
 8004288:	fa02 f303 	lsl.w	r3, r2, r3
 800428c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	697a      	ldr	r2, [r7, #20]
 8004294:	4013      	ands	r3, r2
 8004296:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004298:	693a      	ldr	r2, [r7, #16]
 800429a:	697b      	ldr	r3, [r7, #20]
 800429c:	429a      	cmp	r2, r3
 800429e:	f040 8154 	bne.w	800454a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	f003 0303 	and.w	r3, r3, #3
 80042aa:	2b01      	cmp	r3, #1
 80042ac:	d005      	beq.n	80042ba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80042b6:	2b02      	cmp	r3, #2
 80042b8:	d130      	bne.n	800431c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	689b      	ldr	r3, [r3, #8]
 80042be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80042c0:	69fb      	ldr	r3, [r7, #28]
 80042c2:	005b      	lsls	r3, r3, #1
 80042c4:	2203      	movs	r2, #3
 80042c6:	fa02 f303 	lsl.w	r3, r2, r3
 80042ca:	43db      	mvns	r3, r3
 80042cc:	69ba      	ldr	r2, [r7, #24]
 80042ce:	4013      	ands	r3, r2
 80042d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	68da      	ldr	r2, [r3, #12]
 80042d6:	69fb      	ldr	r3, [r7, #28]
 80042d8:	005b      	lsls	r3, r3, #1
 80042da:	fa02 f303 	lsl.w	r3, r2, r3
 80042de:	69ba      	ldr	r2, [r7, #24]
 80042e0:	4313      	orrs	r3, r2
 80042e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	69ba      	ldr	r2, [r7, #24]
 80042e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80042f0:	2201      	movs	r2, #1
 80042f2:	69fb      	ldr	r3, [r7, #28]
 80042f4:	fa02 f303 	lsl.w	r3, r2, r3
 80042f8:	43db      	mvns	r3, r3
 80042fa:	69ba      	ldr	r2, [r7, #24]
 80042fc:	4013      	ands	r3, r2
 80042fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	091b      	lsrs	r3, r3, #4
 8004306:	f003 0201 	and.w	r2, r3, #1
 800430a:	69fb      	ldr	r3, [r7, #28]
 800430c:	fa02 f303 	lsl.w	r3, r2, r3
 8004310:	69ba      	ldr	r2, [r7, #24]
 8004312:	4313      	orrs	r3, r2
 8004314:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	69ba      	ldr	r2, [r7, #24]
 800431a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	f003 0303 	and.w	r3, r3, #3
 8004324:	2b03      	cmp	r3, #3
 8004326:	d017      	beq.n	8004358 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	68db      	ldr	r3, [r3, #12]
 800432c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800432e:	69fb      	ldr	r3, [r7, #28]
 8004330:	005b      	lsls	r3, r3, #1
 8004332:	2203      	movs	r2, #3
 8004334:	fa02 f303 	lsl.w	r3, r2, r3
 8004338:	43db      	mvns	r3, r3
 800433a:	69ba      	ldr	r2, [r7, #24]
 800433c:	4013      	ands	r3, r2
 800433e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	689a      	ldr	r2, [r3, #8]
 8004344:	69fb      	ldr	r3, [r7, #28]
 8004346:	005b      	lsls	r3, r3, #1
 8004348:	fa02 f303 	lsl.w	r3, r2, r3
 800434c:	69ba      	ldr	r2, [r7, #24]
 800434e:	4313      	orrs	r3, r2
 8004350:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	69ba      	ldr	r2, [r7, #24]
 8004356:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	f003 0303 	and.w	r3, r3, #3
 8004360:	2b02      	cmp	r3, #2
 8004362:	d123      	bne.n	80043ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004364:	69fb      	ldr	r3, [r7, #28]
 8004366:	08da      	lsrs	r2, r3, #3
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	3208      	adds	r2, #8
 800436c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004370:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004372:	69fb      	ldr	r3, [r7, #28]
 8004374:	f003 0307 	and.w	r3, r3, #7
 8004378:	009b      	lsls	r3, r3, #2
 800437a:	220f      	movs	r2, #15
 800437c:	fa02 f303 	lsl.w	r3, r2, r3
 8004380:	43db      	mvns	r3, r3
 8004382:	69ba      	ldr	r2, [r7, #24]
 8004384:	4013      	ands	r3, r2
 8004386:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	691a      	ldr	r2, [r3, #16]
 800438c:	69fb      	ldr	r3, [r7, #28]
 800438e:	f003 0307 	and.w	r3, r3, #7
 8004392:	009b      	lsls	r3, r3, #2
 8004394:	fa02 f303 	lsl.w	r3, r2, r3
 8004398:	69ba      	ldr	r2, [r7, #24]
 800439a:	4313      	orrs	r3, r2
 800439c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800439e:	69fb      	ldr	r3, [r7, #28]
 80043a0:	08da      	lsrs	r2, r3, #3
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	3208      	adds	r2, #8
 80043a6:	69b9      	ldr	r1, [r7, #24]
 80043a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80043b2:	69fb      	ldr	r3, [r7, #28]
 80043b4:	005b      	lsls	r3, r3, #1
 80043b6:	2203      	movs	r2, #3
 80043b8:	fa02 f303 	lsl.w	r3, r2, r3
 80043bc:	43db      	mvns	r3, r3
 80043be:	69ba      	ldr	r2, [r7, #24]
 80043c0:	4013      	ands	r3, r2
 80043c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	f003 0203 	and.w	r2, r3, #3
 80043cc:	69fb      	ldr	r3, [r7, #28]
 80043ce:	005b      	lsls	r3, r3, #1
 80043d0:	fa02 f303 	lsl.w	r3, r2, r3
 80043d4:	69ba      	ldr	r2, [r7, #24]
 80043d6:	4313      	orrs	r3, r2
 80043d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	69ba      	ldr	r2, [r7, #24]
 80043de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	f000 80ae 	beq.w	800454a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80043ee:	2300      	movs	r3, #0
 80043f0:	60fb      	str	r3, [r7, #12]
 80043f2:	4b5d      	ldr	r3, [pc, #372]	@ (8004568 <HAL_GPIO_Init+0x300>)
 80043f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043f6:	4a5c      	ldr	r2, [pc, #368]	@ (8004568 <HAL_GPIO_Init+0x300>)
 80043f8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80043fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80043fe:	4b5a      	ldr	r3, [pc, #360]	@ (8004568 <HAL_GPIO_Init+0x300>)
 8004400:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004402:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004406:	60fb      	str	r3, [r7, #12]
 8004408:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800440a:	4a58      	ldr	r2, [pc, #352]	@ (800456c <HAL_GPIO_Init+0x304>)
 800440c:	69fb      	ldr	r3, [r7, #28]
 800440e:	089b      	lsrs	r3, r3, #2
 8004410:	3302      	adds	r3, #2
 8004412:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004416:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004418:	69fb      	ldr	r3, [r7, #28]
 800441a:	f003 0303 	and.w	r3, r3, #3
 800441e:	009b      	lsls	r3, r3, #2
 8004420:	220f      	movs	r2, #15
 8004422:	fa02 f303 	lsl.w	r3, r2, r3
 8004426:	43db      	mvns	r3, r3
 8004428:	69ba      	ldr	r2, [r7, #24]
 800442a:	4013      	ands	r3, r2
 800442c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	4a4f      	ldr	r2, [pc, #316]	@ (8004570 <HAL_GPIO_Init+0x308>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d025      	beq.n	8004482 <HAL_GPIO_Init+0x21a>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	4a4e      	ldr	r2, [pc, #312]	@ (8004574 <HAL_GPIO_Init+0x30c>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d01f      	beq.n	800447e <HAL_GPIO_Init+0x216>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	4a4d      	ldr	r2, [pc, #308]	@ (8004578 <HAL_GPIO_Init+0x310>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d019      	beq.n	800447a <HAL_GPIO_Init+0x212>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	4a4c      	ldr	r2, [pc, #304]	@ (800457c <HAL_GPIO_Init+0x314>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d013      	beq.n	8004476 <HAL_GPIO_Init+0x20e>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	4a4b      	ldr	r2, [pc, #300]	@ (8004580 <HAL_GPIO_Init+0x318>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d00d      	beq.n	8004472 <HAL_GPIO_Init+0x20a>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	4a4a      	ldr	r2, [pc, #296]	@ (8004584 <HAL_GPIO_Init+0x31c>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d007      	beq.n	800446e <HAL_GPIO_Init+0x206>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	4a49      	ldr	r2, [pc, #292]	@ (8004588 <HAL_GPIO_Init+0x320>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d101      	bne.n	800446a <HAL_GPIO_Init+0x202>
 8004466:	2306      	movs	r3, #6
 8004468:	e00c      	b.n	8004484 <HAL_GPIO_Init+0x21c>
 800446a:	2307      	movs	r3, #7
 800446c:	e00a      	b.n	8004484 <HAL_GPIO_Init+0x21c>
 800446e:	2305      	movs	r3, #5
 8004470:	e008      	b.n	8004484 <HAL_GPIO_Init+0x21c>
 8004472:	2304      	movs	r3, #4
 8004474:	e006      	b.n	8004484 <HAL_GPIO_Init+0x21c>
 8004476:	2303      	movs	r3, #3
 8004478:	e004      	b.n	8004484 <HAL_GPIO_Init+0x21c>
 800447a:	2302      	movs	r3, #2
 800447c:	e002      	b.n	8004484 <HAL_GPIO_Init+0x21c>
 800447e:	2301      	movs	r3, #1
 8004480:	e000      	b.n	8004484 <HAL_GPIO_Init+0x21c>
 8004482:	2300      	movs	r3, #0
 8004484:	69fa      	ldr	r2, [r7, #28]
 8004486:	f002 0203 	and.w	r2, r2, #3
 800448a:	0092      	lsls	r2, r2, #2
 800448c:	4093      	lsls	r3, r2
 800448e:	69ba      	ldr	r2, [r7, #24]
 8004490:	4313      	orrs	r3, r2
 8004492:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004494:	4935      	ldr	r1, [pc, #212]	@ (800456c <HAL_GPIO_Init+0x304>)
 8004496:	69fb      	ldr	r3, [r7, #28]
 8004498:	089b      	lsrs	r3, r3, #2
 800449a:	3302      	adds	r3, #2
 800449c:	69ba      	ldr	r2, [r7, #24]
 800449e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80044a2:	4b3a      	ldr	r3, [pc, #232]	@ (800458c <HAL_GPIO_Init+0x324>)
 80044a4:	689b      	ldr	r3, [r3, #8]
 80044a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044a8:	693b      	ldr	r3, [r7, #16]
 80044aa:	43db      	mvns	r3, r3
 80044ac:	69ba      	ldr	r2, [r7, #24]
 80044ae:	4013      	ands	r3, r2
 80044b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d003      	beq.n	80044c6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80044be:	69ba      	ldr	r2, [r7, #24]
 80044c0:	693b      	ldr	r3, [r7, #16]
 80044c2:	4313      	orrs	r3, r2
 80044c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80044c6:	4a31      	ldr	r2, [pc, #196]	@ (800458c <HAL_GPIO_Init+0x324>)
 80044c8:	69bb      	ldr	r3, [r7, #24]
 80044ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80044cc:	4b2f      	ldr	r3, [pc, #188]	@ (800458c <HAL_GPIO_Init+0x324>)
 80044ce:	68db      	ldr	r3, [r3, #12]
 80044d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044d2:	693b      	ldr	r3, [r7, #16]
 80044d4:	43db      	mvns	r3, r3
 80044d6:	69ba      	ldr	r2, [r7, #24]
 80044d8:	4013      	ands	r3, r2
 80044da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d003      	beq.n	80044f0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80044e8:	69ba      	ldr	r2, [r7, #24]
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	4313      	orrs	r3, r2
 80044ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80044f0:	4a26      	ldr	r2, [pc, #152]	@ (800458c <HAL_GPIO_Init+0x324>)
 80044f2:	69bb      	ldr	r3, [r7, #24]
 80044f4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80044f6:	4b25      	ldr	r3, [pc, #148]	@ (800458c <HAL_GPIO_Init+0x324>)
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044fc:	693b      	ldr	r3, [r7, #16]
 80044fe:	43db      	mvns	r3, r3
 8004500:	69ba      	ldr	r2, [r7, #24]
 8004502:	4013      	ands	r3, r2
 8004504:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800450e:	2b00      	cmp	r3, #0
 8004510:	d003      	beq.n	800451a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8004512:	69ba      	ldr	r2, [r7, #24]
 8004514:	693b      	ldr	r3, [r7, #16]
 8004516:	4313      	orrs	r3, r2
 8004518:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800451a:	4a1c      	ldr	r2, [pc, #112]	@ (800458c <HAL_GPIO_Init+0x324>)
 800451c:	69bb      	ldr	r3, [r7, #24]
 800451e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004520:	4b1a      	ldr	r3, [pc, #104]	@ (800458c <HAL_GPIO_Init+0x324>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	43db      	mvns	r3, r3
 800452a:	69ba      	ldr	r2, [r7, #24]
 800452c:	4013      	ands	r3, r2
 800452e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004538:	2b00      	cmp	r3, #0
 800453a:	d003      	beq.n	8004544 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800453c:	69ba      	ldr	r2, [r7, #24]
 800453e:	693b      	ldr	r3, [r7, #16]
 8004540:	4313      	orrs	r3, r2
 8004542:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004544:	4a11      	ldr	r2, [pc, #68]	@ (800458c <HAL_GPIO_Init+0x324>)
 8004546:	69bb      	ldr	r3, [r7, #24]
 8004548:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800454a:	69fb      	ldr	r3, [r7, #28]
 800454c:	3301      	adds	r3, #1
 800454e:	61fb      	str	r3, [r7, #28]
 8004550:	69fb      	ldr	r3, [r7, #28]
 8004552:	2b0f      	cmp	r3, #15
 8004554:	f67f ae96 	bls.w	8004284 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004558:	bf00      	nop
 800455a:	bf00      	nop
 800455c:	3724      	adds	r7, #36	@ 0x24
 800455e:	46bd      	mov	sp, r7
 8004560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004564:	4770      	bx	lr
 8004566:	bf00      	nop
 8004568:	40023800 	.word	0x40023800
 800456c:	40013800 	.word	0x40013800
 8004570:	40020000 	.word	0x40020000
 8004574:	40020400 	.word	0x40020400
 8004578:	40020800 	.word	0x40020800
 800457c:	40020c00 	.word	0x40020c00
 8004580:	40021000 	.word	0x40021000
 8004584:	40021400 	.word	0x40021400
 8004588:	40021800 	.word	0x40021800
 800458c:	40013c00 	.word	0x40013c00

08004590 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004590:	b480      	push	{r7}
 8004592:	b085      	sub	sp, #20
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
 8004598:	460b      	mov	r3, r1
 800459a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	691a      	ldr	r2, [r3, #16]
 80045a0:	887b      	ldrh	r3, [r7, #2]
 80045a2:	4013      	ands	r3, r2
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d002      	beq.n	80045ae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80045a8:	2301      	movs	r3, #1
 80045aa:	73fb      	strb	r3, [r7, #15]
 80045ac:	e001      	b.n	80045b2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80045ae:	2300      	movs	r3, #0
 80045b0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80045b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	3714      	adds	r7, #20
 80045b8:	46bd      	mov	sp, r7
 80045ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045be:	4770      	bx	lr

080045c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80045c0:	b480      	push	{r7}
 80045c2:	b083      	sub	sp, #12
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
 80045c8:	460b      	mov	r3, r1
 80045ca:	807b      	strh	r3, [r7, #2]
 80045cc:	4613      	mov	r3, r2
 80045ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80045d0:	787b      	ldrb	r3, [r7, #1]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d003      	beq.n	80045de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80045d6:	887a      	ldrh	r2, [r7, #2]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80045dc:	e003      	b.n	80045e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80045de:	887b      	ldrh	r3, [r7, #2]
 80045e0:	041a      	lsls	r2, r3, #16
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	619a      	str	r2, [r3, #24]
}
 80045e6:	bf00      	nop
 80045e8:	370c      	adds	r7, #12
 80045ea:	46bd      	mov	sp, r7
 80045ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f0:	4770      	bx	lr
	...

080045f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b084      	sub	sp, #16
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
 80045fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d101      	bne.n	8004608 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004604:	2301      	movs	r3, #1
 8004606:	e0cc      	b.n	80047a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004608:	4b68      	ldr	r3, [pc, #416]	@ (80047ac <HAL_RCC_ClockConfig+0x1b8>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f003 030f 	and.w	r3, r3, #15
 8004610:	683a      	ldr	r2, [r7, #0]
 8004612:	429a      	cmp	r2, r3
 8004614:	d90c      	bls.n	8004630 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004616:	4b65      	ldr	r3, [pc, #404]	@ (80047ac <HAL_RCC_ClockConfig+0x1b8>)
 8004618:	683a      	ldr	r2, [r7, #0]
 800461a:	b2d2      	uxtb	r2, r2
 800461c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800461e:	4b63      	ldr	r3, [pc, #396]	@ (80047ac <HAL_RCC_ClockConfig+0x1b8>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f003 030f 	and.w	r3, r3, #15
 8004626:	683a      	ldr	r2, [r7, #0]
 8004628:	429a      	cmp	r2, r3
 800462a:	d001      	beq.n	8004630 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800462c:	2301      	movs	r3, #1
 800462e:	e0b8      	b.n	80047a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f003 0302 	and.w	r3, r3, #2
 8004638:	2b00      	cmp	r3, #0
 800463a:	d020      	beq.n	800467e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f003 0304 	and.w	r3, r3, #4
 8004644:	2b00      	cmp	r3, #0
 8004646:	d005      	beq.n	8004654 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004648:	4b59      	ldr	r3, [pc, #356]	@ (80047b0 <HAL_RCC_ClockConfig+0x1bc>)
 800464a:	689b      	ldr	r3, [r3, #8]
 800464c:	4a58      	ldr	r2, [pc, #352]	@ (80047b0 <HAL_RCC_ClockConfig+0x1bc>)
 800464e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004652:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f003 0308 	and.w	r3, r3, #8
 800465c:	2b00      	cmp	r3, #0
 800465e:	d005      	beq.n	800466c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004660:	4b53      	ldr	r3, [pc, #332]	@ (80047b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004662:	689b      	ldr	r3, [r3, #8]
 8004664:	4a52      	ldr	r2, [pc, #328]	@ (80047b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004666:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800466a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800466c:	4b50      	ldr	r3, [pc, #320]	@ (80047b0 <HAL_RCC_ClockConfig+0x1bc>)
 800466e:	689b      	ldr	r3, [r3, #8]
 8004670:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	689b      	ldr	r3, [r3, #8]
 8004678:	494d      	ldr	r1, [pc, #308]	@ (80047b0 <HAL_RCC_ClockConfig+0x1bc>)
 800467a:	4313      	orrs	r3, r2
 800467c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f003 0301 	and.w	r3, r3, #1
 8004686:	2b00      	cmp	r3, #0
 8004688:	d044      	beq.n	8004714 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	2b01      	cmp	r3, #1
 8004690:	d107      	bne.n	80046a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004692:	4b47      	ldr	r3, [pc, #284]	@ (80047b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800469a:	2b00      	cmp	r3, #0
 800469c:	d119      	bne.n	80046d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800469e:	2301      	movs	r3, #1
 80046a0:	e07f      	b.n	80047a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	2b02      	cmp	r3, #2
 80046a8:	d003      	beq.n	80046b2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80046ae:	2b03      	cmp	r3, #3
 80046b0:	d107      	bne.n	80046c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046b2:	4b3f      	ldr	r3, [pc, #252]	@ (80047b0 <HAL_RCC_ClockConfig+0x1bc>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d109      	bne.n	80046d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046be:	2301      	movs	r3, #1
 80046c0:	e06f      	b.n	80047a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046c2:	4b3b      	ldr	r3, [pc, #236]	@ (80047b0 <HAL_RCC_ClockConfig+0x1bc>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f003 0302 	and.w	r3, r3, #2
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d101      	bne.n	80046d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046ce:	2301      	movs	r3, #1
 80046d0:	e067      	b.n	80047a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80046d2:	4b37      	ldr	r3, [pc, #220]	@ (80047b0 <HAL_RCC_ClockConfig+0x1bc>)
 80046d4:	689b      	ldr	r3, [r3, #8]
 80046d6:	f023 0203 	bic.w	r2, r3, #3
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	4934      	ldr	r1, [pc, #208]	@ (80047b0 <HAL_RCC_ClockConfig+0x1bc>)
 80046e0:	4313      	orrs	r3, r2
 80046e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80046e4:	f7fe ff90 	bl	8003608 <HAL_GetTick>
 80046e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046ea:	e00a      	b.n	8004702 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046ec:	f7fe ff8c 	bl	8003608 <HAL_GetTick>
 80046f0:	4602      	mov	r2, r0
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	1ad3      	subs	r3, r2, r3
 80046f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d901      	bls.n	8004702 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80046fe:	2303      	movs	r3, #3
 8004700:	e04f      	b.n	80047a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004702:	4b2b      	ldr	r3, [pc, #172]	@ (80047b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004704:	689b      	ldr	r3, [r3, #8]
 8004706:	f003 020c 	and.w	r2, r3, #12
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	009b      	lsls	r3, r3, #2
 8004710:	429a      	cmp	r2, r3
 8004712:	d1eb      	bne.n	80046ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004714:	4b25      	ldr	r3, [pc, #148]	@ (80047ac <HAL_RCC_ClockConfig+0x1b8>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f003 030f 	and.w	r3, r3, #15
 800471c:	683a      	ldr	r2, [r7, #0]
 800471e:	429a      	cmp	r2, r3
 8004720:	d20c      	bcs.n	800473c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004722:	4b22      	ldr	r3, [pc, #136]	@ (80047ac <HAL_RCC_ClockConfig+0x1b8>)
 8004724:	683a      	ldr	r2, [r7, #0]
 8004726:	b2d2      	uxtb	r2, r2
 8004728:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800472a:	4b20      	ldr	r3, [pc, #128]	@ (80047ac <HAL_RCC_ClockConfig+0x1b8>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f003 030f 	and.w	r3, r3, #15
 8004732:	683a      	ldr	r2, [r7, #0]
 8004734:	429a      	cmp	r2, r3
 8004736:	d001      	beq.n	800473c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004738:	2301      	movs	r3, #1
 800473a:	e032      	b.n	80047a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f003 0304 	and.w	r3, r3, #4
 8004744:	2b00      	cmp	r3, #0
 8004746:	d008      	beq.n	800475a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004748:	4b19      	ldr	r3, [pc, #100]	@ (80047b0 <HAL_RCC_ClockConfig+0x1bc>)
 800474a:	689b      	ldr	r3, [r3, #8]
 800474c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	68db      	ldr	r3, [r3, #12]
 8004754:	4916      	ldr	r1, [pc, #88]	@ (80047b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004756:	4313      	orrs	r3, r2
 8004758:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f003 0308 	and.w	r3, r3, #8
 8004762:	2b00      	cmp	r3, #0
 8004764:	d009      	beq.n	800477a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004766:	4b12      	ldr	r3, [pc, #72]	@ (80047b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004768:	689b      	ldr	r3, [r3, #8]
 800476a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	691b      	ldr	r3, [r3, #16]
 8004772:	00db      	lsls	r3, r3, #3
 8004774:	490e      	ldr	r1, [pc, #56]	@ (80047b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004776:	4313      	orrs	r3, r2
 8004778:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800477a:	f000 f887 	bl	800488c <HAL_RCC_GetSysClockFreq>
 800477e:	4602      	mov	r2, r0
 8004780:	4b0b      	ldr	r3, [pc, #44]	@ (80047b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004782:	689b      	ldr	r3, [r3, #8]
 8004784:	091b      	lsrs	r3, r3, #4
 8004786:	f003 030f 	and.w	r3, r3, #15
 800478a:	490a      	ldr	r1, [pc, #40]	@ (80047b4 <HAL_RCC_ClockConfig+0x1c0>)
 800478c:	5ccb      	ldrb	r3, [r1, r3]
 800478e:	fa22 f303 	lsr.w	r3, r2, r3
 8004792:	4a09      	ldr	r2, [pc, #36]	@ (80047b8 <HAL_RCC_ClockConfig+0x1c4>)
 8004794:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004796:	4b09      	ldr	r3, [pc, #36]	@ (80047bc <HAL_RCC_ClockConfig+0x1c8>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4618      	mov	r0, r3
 800479c:	f7fe f892 	bl	80028c4 <HAL_InitTick>

  return HAL_OK;
 80047a0:	2300      	movs	r3, #0
}
 80047a2:	4618      	mov	r0, r3
 80047a4:	3710      	adds	r7, #16
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}
 80047aa:	bf00      	nop
 80047ac:	40023c00 	.word	0x40023c00
 80047b0:	40023800 	.word	0x40023800
 80047b4:	0800cbc8 	.word	0x0800cbc8
 80047b8:	2000004c 	.word	0x2000004c
 80047bc:	20000050 	.word	0x20000050

080047c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80047c0:	b480      	push	{r7}
 80047c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80047c4:	4b03      	ldr	r3, [pc, #12]	@ (80047d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80047c6:	681b      	ldr	r3, [r3, #0]
}
 80047c8:	4618      	mov	r0, r3
 80047ca:	46bd      	mov	sp, r7
 80047cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d0:	4770      	bx	lr
 80047d2:	bf00      	nop
 80047d4:	2000004c 	.word	0x2000004c

080047d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80047dc:	f7ff fff0 	bl	80047c0 <HAL_RCC_GetHCLKFreq>
 80047e0:	4602      	mov	r2, r0
 80047e2:	4b05      	ldr	r3, [pc, #20]	@ (80047f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80047e4:	689b      	ldr	r3, [r3, #8]
 80047e6:	0a9b      	lsrs	r3, r3, #10
 80047e8:	f003 0307 	and.w	r3, r3, #7
 80047ec:	4903      	ldr	r1, [pc, #12]	@ (80047fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80047ee:	5ccb      	ldrb	r3, [r1, r3]
 80047f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	bd80      	pop	{r7, pc}
 80047f8:	40023800 	.word	0x40023800
 80047fc:	0800cbd8 	.word	0x0800cbd8

08004800 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004804:	f7ff ffdc 	bl	80047c0 <HAL_RCC_GetHCLKFreq>
 8004808:	4602      	mov	r2, r0
 800480a:	4b05      	ldr	r3, [pc, #20]	@ (8004820 <HAL_RCC_GetPCLK2Freq+0x20>)
 800480c:	689b      	ldr	r3, [r3, #8]
 800480e:	0b5b      	lsrs	r3, r3, #13
 8004810:	f003 0307 	and.w	r3, r3, #7
 8004814:	4903      	ldr	r1, [pc, #12]	@ (8004824 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004816:	5ccb      	ldrb	r3, [r1, r3]
 8004818:	fa22 f303 	lsr.w	r3, r2, r3
}
 800481c:	4618      	mov	r0, r3
 800481e:	bd80      	pop	{r7, pc}
 8004820:	40023800 	.word	0x40023800
 8004824:	0800cbd8 	.word	0x0800cbd8

08004828 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004828:	b480      	push	{r7}
 800482a:	b083      	sub	sp, #12
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
 8004830:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	220f      	movs	r2, #15
 8004836:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004838:	4b12      	ldr	r3, [pc, #72]	@ (8004884 <HAL_RCC_GetClockConfig+0x5c>)
 800483a:	689b      	ldr	r3, [r3, #8]
 800483c:	f003 0203 	and.w	r2, r3, #3
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004844:	4b0f      	ldr	r3, [pc, #60]	@ (8004884 <HAL_RCC_GetClockConfig+0x5c>)
 8004846:	689b      	ldr	r3, [r3, #8]
 8004848:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004850:	4b0c      	ldr	r3, [pc, #48]	@ (8004884 <HAL_RCC_GetClockConfig+0x5c>)
 8004852:	689b      	ldr	r3, [r3, #8]
 8004854:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800485c:	4b09      	ldr	r3, [pc, #36]	@ (8004884 <HAL_RCC_GetClockConfig+0x5c>)
 800485e:	689b      	ldr	r3, [r3, #8]
 8004860:	08db      	lsrs	r3, r3, #3
 8004862:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800486a:	4b07      	ldr	r3, [pc, #28]	@ (8004888 <HAL_RCC_GetClockConfig+0x60>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f003 020f 	and.w	r2, r3, #15
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	601a      	str	r2, [r3, #0]
}
 8004876:	bf00      	nop
 8004878:	370c      	adds	r7, #12
 800487a:	46bd      	mov	sp, r7
 800487c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004880:	4770      	bx	lr
 8004882:	bf00      	nop
 8004884:	40023800 	.word	0x40023800
 8004888:	40023c00 	.word	0x40023c00

0800488c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800488c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004890:	b0ae      	sub	sp, #184	@ 0xb8
 8004892:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004894:	2300      	movs	r3, #0
 8004896:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 800489a:	2300      	movs	r3, #0
 800489c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80048a0:	2300      	movs	r3, #0
 80048a2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80048a6:	2300      	movs	r3, #0
 80048a8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80048ac:	2300      	movs	r3, #0
 80048ae:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80048b2:	4bcb      	ldr	r3, [pc, #812]	@ (8004be0 <HAL_RCC_GetSysClockFreq+0x354>)
 80048b4:	689b      	ldr	r3, [r3, #8]
 80048b6:	f003 030c 	and.w	r3, r3, #12
 80048ba:	2b0c      	cmp	r3, #12
 80048bc:	f200 8206 	bhi.w	8004ccc <HAL_RCC_GetSysClockFreq+0x440>
 80048c0:	a201      	add	r2, pc, #4	@ (adr r2, 80048c8 <HAL_RCC_GetSysClockFreq+0x3c>)
 80048c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048c6:	bf00      	nop
 80048c8:	080048fd 	.word	0x080048fd
 80048cc:	08004ccd 	.word	0x08004ccd
 80048d0:	08004ccd 	.word	0x08004ccd
 80048d4:	08004ccd 	.word	0x08004ccd
 80048d8:	08004905 	.word	0x08004905
 80048dc:	08004ccd 	.word	0x08004ccd
 80048e0:	08004ccd 	.word	0x08004ccd
 80048e4:	08004ccd 	.word	0x08004ccd
 80048e8:	0800490d 	.word	0x0800490d
 80048ec:	08004ccd 	.word	0x08004ccd
 80048f0:	08004ccd 	.word	0x08004ccd
 80048f4:	08004ccd 	.word	0x08004ccd
 80048f8:	08004afd 	.word	0x08004afd
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80048fc:	4bb9      	ldr	r3, [pc, #740]	@ (8004be4 <HAL_RCC_GetSysClockFreq+0x358>)
 80048fe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004902:	e1e7      	b.n	8004cd4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004904:	4bb8      	ldr	r3, [pc, #736]	@ (8004be8 <HAL_RCC_GetSysClockFreq+0x35c>)
 8004906:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800490a:	e1e3      	b.n	8004cd4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800490c:	4bb4      	ldr	r3, [pc, #720]	@ (8004be0 <HAL_RCC_GetSysClockFreq+0x354>)
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004914:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004918:	4bb1      	ldr	r3, [pc, #708]	@ (8004be0 <HAL_RCC_GetSysClockFreq+0x354>)
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004920:	2b00      	cmp	r3, #0
 8004922:	d071      	beq.n	8004a08 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004924:	4bae      	ldr	r3, [pc, #696]	@ (8004be0 <HAL_RCC_GetSysClockFreq+0x354>)
 8004926:	685b      	ldr	r3, [r3, #4]
 8004928:	099b      	lsrs	r3, r3, #6
 800492a:	2200      	movs	r2, #0
 800492c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004930:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8004934:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004938:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800493c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004940:	2300      	movs	r3, #0
 8004942:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004946:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800494a:	4622      	mov	r2, r4
 800494c:	462b      	mov	r3, r5
 800494e:	f04f 0000 	mov.w	r0, #0
 8004952:	f04f 0100 	mov.w	r1, #0
 8004956:	0159      	lsls	r1, r3, #5
 8004958:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800495c:	0150      	lsls	r0, r2, #5
 800495e:	4602      	mov	r2, r0
 8004960:	460b      	mov	r3, r1
 8004962:	4621      	mov	r1, r4
 8004964:	1a51      	subs	r1, r2, r1
 8004966:	6439      	str	r1, [r7, #64]	@ 0x40
 8004968:	4629      	mov	r1, r5
 800496a:	eb63 0301 	sbc.w	r3, r3, r1
 800496e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004970:	f04f 0200 	mov.w	r2, #0
 8004974:	f04f 0300 	mov.w	r3, #0
 8004978:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 800497c:	4649      	mov	r1, r9
 800497e:	018b      	lsls	r3, r1, #6
 8004980:	4641      	mov	r1, r8
 8004982:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004986:	4641      	mov	r1, r8
 8004988:	018a      	lsls	r2, r1, #6
 800498a:	4641      	mov	r1, r8
 800498c:	1a51      	subs	r1, r2, r1
 800498e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004990:	4649      	mov	r1, r9
 8004992:	eb63 0301 	sbc.w	r3, r3, r1
 8004996:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004998:	f04f 0200 	mov.w	r2, #0
 800499c:	f04f 0300 	mov.w	r3, #0
 80049a0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80049a4:	4649      	mov	r1, r9
 80049a6:	00cb      	lsls	r3, r1, #3
 80049a8:	4641      	mov	r1, r8
 80049aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80049ae:	4641      	mov	r1, r8
 80049b0:	00ca      	lsls	r2, r1, #3
 80049b2:	4610      	mov	r0, r2
 80049b4:	4619      	mov	r1, r3
 80049b6:	4603      	mov	r3, r0
 80049b8:	4622      	mov	r2, r4
 80049ba:	189b      	adds	r3, r3, r2
 80049bc:	633b      	str	r3, [r7, #48]	@ 0x30
 80049be:	462b      	mov	r3, r5
 80049c0:	460a      	mov	r2, r1
 80049c2:	eb42 0303 	adc.w	r3, r2, r3
 80049c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80049c8:	f04f 0200 	mov.w	r2, #0
 80049cc:	f04f 0300 	mov.w	r3, #0
 80049d0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80049d4:	4629      	mov	r1, r5
 80049d6:	024b      	lsls	r3, r1, #9
 80049d8:	4621      	mov	r1, r4
 80049da:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80049de:	4621      	mov	r1, r4
 80049e0:	024a      	lsls	r2, r1, #9
 80049e2:	4610      	mov	r0, r2
 80049e4:	4619      	mov	r1, r3
 80049e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80049ea:	2200      	movs	r2, #0
 80049ec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80049f0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80049f4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80049f8:	f7fc f976 	bl	8000ce8 <__aeabi_uldivmod>
 80049fc:	4602      	mov	r2, r0
 80049fe:	460b      	mov	r3, r1
 8004a00:	4613      	mov	r3, r2
 8004a02:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004a06:	e067      	b.n	8004ad8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a08:	4b75      	ldr	r3, [pc, #468]	@ (8004be0 <HAL_RCC_GetSysClockFreq+0x354>)
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	099b      	lsrs	r3, r3, #6
 8004a0e:	2200      	movs	r2, #0
 8004a10:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004a14:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8004a18:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004a1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a20:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004a22:	2300      	movs	r3, #0
 8004a24:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004a26:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8004a2a:	4622      	mov	r2, r4
 8004a2c:	462b      	mov	r3, r5
 8004a2e:	f04f 0000 	mov.w	r0, #0
 8004a32:	f04f 0100 	mov.w	r1, #0
 8004a36:	0159      	lsls	r1, r3, #5
 8004a38:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a3c:	0150      	lsls	r0, r2, #5
 8004a3e:	4602      	mov	r2, r0
 8004a40:	460b      	mov	r3, r1
 8004a42:	4621      	mov	r1, r4
 8004a44:	1a51      	subs	r1, r2, r1
 8004a46:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004a48:	4629      	mov	r1, r5
 8004a4a:	eb63 0301 	sbc.w	r3, r3, r1
 8004a4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004a50:	f04f 0200 	mov.w	r2, #0
 8004a54:	f04f 0300 	mov.w	r3, #0
 8004a58:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8004a5c:	4649      	mov	r1, r9
 8004a5e:	018b      	lsls	r3, r1, #6
 8004a60:	4641      	mov	r1, r8
 8004a62:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004a66:	4641      	mov	r1, r8
 8004a68:	018a      	lsls	r2, r1, #6
 8004a6a:	4641      	mov	r1, r8
 8004a6c:	ebb2 0a01 	subs.w	sl, r2, r1
 8004a70:	4649      	mov	r1, r9
 8004a72:	eb63 0b01 	sbc.w	fp, r3, r1
 8004a76:	f04f 0200 	mov.w	r2, #0
 8004a7a:	f04f 0300 	mov.w	r3, #0
 8004a7e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004a82:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004a86:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004a8a:	4692      	mov	sl, r2
 8004a8c:	469b      	mov	fp, r3
 8004a8e:	4623      	mov	r3, r4
 8004a90:	eb1a 0303 	adds.w	r3, sl, r3
 8004a94:	623b      	str	r3, [r7, #32]
 8004a96:	462b      	mov	r3, r5
 8004a98:	eb4b 0303 	adc.w	r3, fp, r3
 8004a9c:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a9e:	f04f 0200 	mov.w	r2, #0
 8004aa2:	f04f 0300 	mov.w	r3, #0
 8004aa6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8004aaa:	4629      	mov	r1, r5
 8004aac:	028b      	lsls	r3, r1, #10
 8004aae:	4621      	mov	r1, r4
 8004ab0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004ab4:	4621      	mov	r1, r4
 8004ab6:	028a      	lsls	r2, r1, #10
 8004ab8:	4610      	mov	r0, r2
 8004aba:	4619      	mov	r1, r3
 8004abc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	673b      	str	r3, [r7, #112]	@ 0x70
 8004ac4:	677a      	str	r2, [r7, #116]	@ 0x74
 8004ac6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8004aca:	f7fc f90d 	bl	8000ce8 <__aeabi_uldivmod>
 8004ace:	4602      	mov	r2, r0
 8004ad0:	460b      	mov	r3, r1
 8004ad2:	4613      	mov	r3, r2
 8004ad4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004ad8:	4b41      	ldr	r3, [pc, #260]	@ (8004be0 <HAL_RCC_GetSysClockFreq+0x354>)
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	0c1b      	lsrs	r3, r3, #16
 8004ade:	f003 0303 	and.w	r3, r3, #3
 8004ae2:	3301      	adds	r3, #1
 8004ae4:	005b      	lsls	r3, r3, #1
 8004ae6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8004aea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004aee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004af2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004af6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004afa:	e0eb      	b.n	8004cd4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004afc:	4b38      	ldr	r3, [pc, #224]	@ (8004be0 <HAL_RCC_GetSysClockFreq+0x354>)
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004b04:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004b08:	4b35      	ldr	r3, [pc, #212]	@ (8004be0 <HAL_RCC_GetSysClockFreq+0x354>)
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d06b      	beq.n	8004bec <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b14:	4b32      	ldr	r3, [pc, #200]	@ (8004be0 <HAL_RCC_GetSysClockFreq+0x354>)
 8004b16:	685b      	ldr	r3, [r3, #4]
 8004b18:	099b      	lsrs	r3, r3, #6
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004b1e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004b20:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004b22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b26:	663b      	str	r3, [r7, #96]	@ 0x60
 8004b28:	2300      	movs	r3, #0
 8004b2a:	667b      	str	r3, [r7, #100]	@ 0x64
 8004b2c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8004b30:	4622      	mov	r2, r4
 8004b32:	462b      	mov	r3, r5
 8004b34:	f04f 0000 	mov.w	r0, #0
 8004b38:	f04f 0100 	mov.w	r1, #0
 8004b3c:	0159      	lsls	r1, r3, #5
 8004b3e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b42:	0150      	lsls	r0, r2, #5
 8004b44:	4602      	mov	r2, r0
 8004b46:	460b      	mov	r3, r1
 8004b48:	4621      	mov	r1, r4
 8004b4a:	1a51      	subs	r1, r2, r1
 8004b4c:	61b9      	str	r1, [r7, #24]
 8004b4e:	4629      	mov	r1, r5
 8004b50:	eb63 0301 	sbc.w	r3, r3, r1
 8004b54:	61fb      	str	r3, [r7, #28]
 8004b56:	f04f 0200 	mov.w	r2, #0
 8004b5a:	f04f 0300 	mov.w	r3, #0
 8004b5e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8004b62:	4659      	mov	r1, fp
 8004b64:	018b      	lsls	r3, r1, #6
 8004b66:	4651      	mov	r1, sl
 8004b68:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004b6c:	4651      	mov	r1, sl
 8004b6e:	018a      	lsls	r2, r1, #6
 8004b70:	4651      	mov	r1, sl
 8004b72:	ebb2 0801 	subs.w	r8, r2, r1
 8004b76:	4659      	mov	r1, fp
 8004b78:	eb63 0901 	sbc.w	r9, r3, r1
 8004b7c:	f04f 0200 	mov.w	r2, #0
 8004b80:	f04f 0300 	mov.w	r3, #0
 8004b84:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004b88:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004b8c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004b90:	4690      	mov	r8, r2
 8004b92:	4699      	mov	r9, r3
 8004b94:	4623      	mov	r3, r4
 8004b96:	eb18 0303 	adds.w	r3, r8, r3
 8004b9a:	613b      	str	r3, [r7, #16]
 8004b9c:	462b      	mov	r3, r5
 8004b9e:	eb49 0303 	adc.w	r3, r9, r3
 8004ba2:	617b      	str	r3, [r7, #20]
 8004ba4:	f04f 0200 	mov.w	r2, #0
 8004ba8:	f04f 0300 	mov.w	r3, #0
 8004bac:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004bb0:	4629      	mov	r1, r5
 8004bb2:	024b      	lsls	r3, r1, #9
 8004bb4:	4621      	mov	r1, r4
 8004bb6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004bba:	4621      	mov	r1, r4
 8004bbc:	024a      	lsls	r2, r1, #9
 8004bbe:	4610      	mov	r0, r2
 8004bc0:	4619      	mov	r1, r3
 8004bc2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004bca:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8004bcc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004bd0:	f7fc f88a 	bl	8000ce8 <__aeabi_uldivmod>
 8004bd4:	4602      	mov	r2, r0
 8004bd6:	460b      	mov	r3, r1
 8004bd8:	4613      	mov	r3, r2
 8004bda:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004bde:	e065      	b.n	8004cac <HAL_RCC_GetSysClockFreq+0x420>
 8004be0:	40023800 	.word	0x40023800
 8004be4:	00f42400 	.word	0x00f42400
 8004be8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004bec:	4b3d      	ldr	r3, [pc, #244]	@ (8004ce4 <HAL_RCC_GetSysClockFreq+0x458>)
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	099b      	lsrs	r3, r3, #6
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	4611      	mov	r1, r2
 8004bf8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004bfc:	653b      	str	r3, [r7, #80]	@ 0x50
 8004bfe:	2300      	movs	r3, #0
 8004c00:	657b      	str	r3, [r7, #84]	@ 0x54
 8004c02:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8004c06:	4642      	mov	r2, r8
 8004c08:	464b      	mov	r3, r9
 8004c0a:	f04f 0000 	mov.w	r0, #0
 8004c0e:	f04f 0100 	mov.w	r1, #0
 8004c12:	0159      	lsls	r1, r3, #5
 8004c14:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c18:	0150      	lsls	r0, r2, #5
 8004c1a:	4602      	mov	r2, r0
 8004c1c:	460b      	mov	r3, r1
 8004c1e:	4641      	mov	r1, r8
 8004c20:	1a51      	subs	r1, r2, r1
 8004c22:	60b9      	str	r1, [r7, #8]
 8004c24:	4649      	mov	r1, r9
 8004c26:	eb63 0301 	sbc.w	r3, r3, r1
 8004c2a:	60fb      	str	r3, [r7, #12]
 8004c2c:	f04f 0200 	mov.w	r2, #0
 8004c30:	f04f 0300 	mov.w	r3, #0
 8004c34:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004c38:	4659      	mov	r1, fp
 8004c3a:	018b      	lsls	r3, r1, #6
 8004c3c:	4651      	mov	r1, sl
 8004c3e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004c42:	4651      	mov	r1, sl
 8004c44:	018a      	lsls	r2, r1, #6
 8004c46:	4651      	mov	r1, sl
 8004c48:	1a54      	subs	r4, r2, r1
 8004c4a:	4659      	mov	r1, fp
 8004c4c:	eb63 0501 	sbc.w	r5, r3, r1
 8004c50:	f04f 0200 	mov.w	r2, #0
 8004c54:	f04f 0300 	mov.w	r3, #0
 8004c58:	00eb      	lsls	r3, r5, #3
 8004c5a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004c5e:	00e2      	lsls	r2, r4, #3
 8004c60:	4614      	mov	r4, r2
 8004c62:	461d      	mov	r5, r3
 8004c64:	4643      	mov	r3, r8
 8004c66:	18e3      	adds	r3, r4, r3
 8004c68:	603b      	str	r3, [r7, #0]
 8004c6a:	464b      	mov	r3, r9
 8004c6c:	eb45 0303 	adc.w	r3, r5, r3
 8004c70:	607b      	str	r3, [r7, #4]
 8004c72:	f04f 0200 	mov.w	r2, #0
 8004c76:	f04f 0300 	mov.w	r3, #0
 8004c7a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004c7e:	4629      	mov	r1, r5
 8004c80:	028b      	lsls	r3, r1, #10
 8004c82:	4621      	mov	r1, r4
 8004c84:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004c88:	4621      	mov	r1, r4
 8004c8a:	028a      	lsls	r2, r1, #10
 8004c8c:	4610      	mov	r0, r2
 8004c8e:	4619      	mov	r1, r3
 8004c90:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004c94:	2200      	movs	r2, #0
 8004c96:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004c98:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8004c9a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004c9e:	f7fc f823 	bl	8000ce8 <__aeabi_uldivmod>
 8004ca2:	4602      	mov	r2, r0
 8004ca4:	460b      	mov	r3, r1
 8004ca6:	4613      	mov	r3, r2
 8004ca8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004cac:	4b0d      	ldr	r3, [pc, #52]	@ (8004ce4 <HAL_RCC_GetSysClockFreq+0x458>)
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	0f1b      	lsrs	r3, r3, #28
 8004cb2:	f003 0307 	and.w	r3, r3, #7
 8004cb6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8004cba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004cbe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004cc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cc6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004cca:	e003      	b.n	8004cd4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004ccc:	4b06      	ldr	r3, [pc, #24]	@ (8004ce8 <HAL_RCC_GetSysClockFreq+0x45c>)
 8004cce:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004cd2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004cd4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8004cd8:	4618      	mov	r0, r3
 8004cda:	37b8      	adds	r7, #184	@ 0xb8
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ce2:	bf00      	nop
 8004ce4:	40023800 	.word	0x40023800
 8004ce8:	00f42400 	.word	0x00f42400

08004cec <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b086      	sub	sp, #24
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d101      	bne.n	8004cfe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	e28d      	b.n	800521a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f003 0301 	and.w	r3, r3, #1
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	f000 8083 	beq.w	8004e12 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004d0c:	4b94      	ldr	r3, [pc, #592]	@ (8004f60 <HAL_RCC_OscConfig+0x274>)
 8004d0e:	689b      	ldr	r3, [r3, #8]
 8004d10:	f003 030c 	and.w	r3, r3, #12
 8004d14:	2b04      	cmp	r3, #4
 8004d16:	d019      	beq.n	8004d4c <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004d18:	4b91      	ldr	r3, [pc, #580]	@ (8004f60 <HAL_RCC_OscConfig+0x274>)
 8004d1a:	689b      	ldr	r3, [r3, #8]
 8004d1c:	f003 030c 	and.w	r3, r3, #12
        || \
 8004d20:	2b08      	cmp	r3, #8
 8004d22:	d106      	bne.n	8004d32 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004d24:	4b8e      	ldr	r3, [pc, #568]	@ (8004f60 <HAL_RCC_OscConfig+0x274>)
 8004d26:	685b      	ldr	r3, [r3, #4]
 8004d28:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d2c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004d30:	d00c      	beq.n	8004d4c <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004d32:	4b8b      	ldr	r3, [pc, #556]	@ (8004f60 <HAL_RCC_OscConfig+0x274>)
 8004d34:	689b      	ldr	r3, [r3, #8]
 8004d36:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004d3a:	2b0c      	cmp	r3, #12
 8004d3c:	d112      	bne.n	8004d64 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004d3e:	4b88      	ldr	r3, [pc, #544]	@ (8004f60 <HAL_RCC_OscConfig+0x274>)
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d46:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004d4a:	d10b      	bne.n	8004d64 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d4c:	4b84      	ldr	r3, [pc, #528]	@ (8004f60 <HAL_RCC_OscConfig+0x274>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d05b      	beq.n	8004e10 <HAL_RCC_OscConfig+0x124>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d157      	bne.n	8004e10 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004d60:	2301      	movs	r3, #1
 8004d62:	e25a      	b.n	800521a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d6c:	d106      	bne.n	8004d7c <HAL_RCC_OscConfig+0x90>
 8004d6e:	4b7c      	ldr	r3, [pc, #496]	@ (8004f60 <HAL_RCC_OscConfig+0x274>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4a7b      	ldr	r2, [pc, #492]	@ (8004f60 <HAL_RCC_OscConfig+0x274>)
 8004d74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d78:	6013      	str	r3, [r2, #0]
 8004d7a:	e01d      	b.n	8004db8 <HAL_RCC_OscConfig+0xcc>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004d84:	d10c      	bne.n	8004da0 <HAL_RCC_OscConfig+0xb4>
 8004d86:	4b76      	ldr	r3, [pc, #472]	@ (8004f60 <HAL_RCC_OscConfig+0x274>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a75      	ldr	r2, [pc, #468]	@ (8004f60 <HAL_RCC_OscConfig+0x274>)
 8004d8c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004d90:	6013      	str	r3, [r2, #0]
 8004d92:	4b73      	ldr	r3, [pc, #460]	@ (8004f60 <HAL_RCC_OscConfig+0x274>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4a72      	ldr	r2, [pc, #456]	@ (8004f60 <HAL_RCC_OscConfig+0x274>)
 8004d98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d9c:	6013      	str	r3, [r2, #0]
 8004d9e:	e00b      	b.n	8004db8 <HAL_RCC_OscConfig+0xcc>
 8004da0:	4b6f      	ldr	r3, [pc, #444]	@ (8004f60 <HAL_RCC_OscConfig+0x274>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4a6e      	ldr	r2, [pc, #440]	@ (8004f60 <HAL_RCC_OscConfig+0x274>)
 8004da6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004daa:	6013      	str	r3, [r2, #0]
 8004dac:	4b6c      	ldr	r3, [pc, #432]	@ (8004f60 <HAL_RCC_OscConfig+0x274>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4a6b      	ldr	r2, [pc, #428]	@ (8004f60 <HAL_RCC_OscConfig+0x274>)
 8004db2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004db6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d013      	beq.n	8004de8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dc0:	f7fe fc22 	bl	8003608 <HAL_GetTick>
 8004dc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004dc6:	e008      	b.n	8004dda <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004dc8:	f7fe fc1e 	bl	8003608 <HAL_GetTick>
 8004dcc:	4602      	mov	r2, r0
 8004dce:	693b      	ldr	r3, [r7, #16]
 8004dd0:	1ad3      	subs	r3, r2, r3
 8004dd2:	2b64      	cmp	r3, #100	@ 0x64
 8004dd4:	d901      	bls.n	8004dda <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004dd6:	2303      	movs	r3, #3
 8004dd8:	e21f      	b.n	800521a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004dda:	4b61      	ldr	r3, [pc, #388]	@ (8004f60 <HAL_RCC_OscConfig+0x274>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d0f0      	beq.n	8004dc8 <HAL_RCC_OscConfig+0xdc>
 8004de6:	e014      	b.n	8004e12 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004de8:	f7fe fc0e 	bl	8003608 <HAL_GetTick>
 8004dec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004dee:	e008      	b.n	8004e02 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004df0:	f7fe fc0a 	bl	8003608 <HAL_GetTick>
 8004df4:	4602      	mov	r2, r0
 8004df6:	693b      	ldr	r3, [r7, #16]
 8004df8:	1ad3      	subs	r3, r2, r3
 8004dfa:	2b64      	cmp	r3, #100	@ 0x64
 8004dfc:	d901      	bls.n	8004e02 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004dfe:	2303      	movs	r3, #3
 8004e00:	e20b      	b.n	800521a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e02:	4b57      	ldr	r3, [pc, #348]	@ (8004f60 <HAL_RCC_OscConfig+0x274>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d1f0      	bne.n	8004df0 <HAL_RCC_OscConfig+0x104>
 8004e0e:	e000      	b.n	8004e12 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f003 0302 	and.w	r3, r3, #2
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d06f      	beq.n	8004efe <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004e1e:	4b50      	ldr	r3, [pc, #320]	@ (8004f60 <HAL_RCC_OscConfig+0x274>)
 8004e20:	689b      	ldr	r3, [r3, #8]
 8004e22:	f003 030c 	and.w	r3, r3, #12
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d017      	beq.n	8004e5a <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004e2a:	4b4d      	ldr	r3, [pc, #308]	@ (8004f60 <HAL_RCC_OscConfig+0x274>)
 8004e2c:	689b      	ldr	r3, [r3, #8]
 8004e2e:	f003 030c 	and.w	r3, r3, #12
        || \
 8004e32:	2b08      	cmp	r3, #8
 8004e34:	d105      	bne.n	8004e42 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004e36:	4b4a      	ldr	r3, [pc, #296]	@ (8004f60 <HAL_RCC_OscConfig+0x274>)
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d00b      	beq.n	8004e5a <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004e42:	4b47      	ldr	r3, [pc, #284]	@ (8004f60 <HAL_RCC_OscConfig+0x274>)
 8004e44:	689b      	ldr	r3, [r3, #8]
 8004e46:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004e4a:	2b0c      	cmp	r3, #12
 8004e4c:	d11c      	bne.n	8004e88 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004e4e:	4b44      	ldr	r3, [pc, #272]	@ (8004f60 <HAL_RCC_OscConfig+0x274>)
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d116      	bne.n	8004e88 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e5a:	4b41      	ldr	r3, [pc, #260]	@ (8004f60 <HAL_RCC_OscConfig+0x274>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f003 0302 	and.w	r3, r3, #2
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d005      	beq.n	8004e72 <HAL_RCC_OscConfig+0x186>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	68db      	ldr	r3, [r3, #12]
 8004e6a:	2b01      	cmp	r3, #1
 8004e6c:	d001      	beq.n	8004e72 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004e6e:	2301      	movs	r3, #1
 8004e70:	e1d3      	b.n	800521a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e72:	4b3b      	ldr	r3, [pc, #236]	@ (8004f60 <HAL_RCC_OscConfig+0x274>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	691b      	ldr	r3, [r3, #16]
 8004e7e:	00db      	lsls	r3, r3, #3
 8004e80:	4937      	ldr	r1, [pc, #220]	@ (8004f60 <HAL_RCC_OscConfig+0x274>)
 8004e82:	4313      	orrs	r3, r2
 8004e84:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e86:	e03a      	b.n	8004efe <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	68db      	ldr	r3, [r3, #12]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d020      	beq.n	8004ed2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e90:	4b34      	ldr	r3, [pc, #208]	@ (8004f64 <HAL_RCC_OscConfig+0x278>)
 8004e92:	2201      	movs	r2, #1
 8004e94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e96:	f7fe fbb7 	bl	8003608 <HAL_GetTick>
 8004e9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e9c:	e008      	b.n	8004eb0 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e9e:	f7fe fbb3 	bl	8003608 <HAL_GetTick>
 8004ea2:	4602      	mov	r2, r0
 8004ea4:	693b      	ldr	r3, [r7, #16]
 8004ea6:	1ad3      	subs	r3, r2, r3
 8004ea8:	2b02      	cmp	r3, #2
 8004eaa:	d901      	bls.n	8004eb0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004eac:	2303      	movs	r3, #3
 8004eae:	e1b4      	b.n	800521a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004eb0:	4b2b      	ldr	r3, [pc, #172]	@ (8004f60 <HAL_RCC_OscConfig+0x274>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f003 0302 	and.w	r3, r3, #2
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d0f0      	beq.n	8004e9e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ebc:	4b28      	ldr	r3, [pc, #160]	@ (8004f60 <HAL_RCC_OscConfig+0x274>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	691b      	ldr	r3, [r3, #16]
 8004ec8:	00db      	lsls	r3, r3, #3
 8004eca:	4925      	ldr	r1, [pc, #148]	@ (8004f60 <HAL_RCC_OscConfig+0x274>)
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	600b      	str	r3, [r1, #0]
 8004ed0:	e015      	b.n	8004efe <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ed2:	4b24      	ldr	r3, [pc, #144]	@ (8004f64 <HAL_RCC_OscConfig+0x278>)
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ed8:	f7fe fb96 	bl	8003608 <HAL_GetTick>
 8004edc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ede:	e008      	b.n	8004ef2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ee0:	f7fe fb92 	bl	8003608 <HAL_GetTick>
 8004ee4:	4602      	mov	r2, r0
 8004ee6:	693b      	ldr	r3, [r7, #16]
 8004ee8:	1ad3      	subs	r3, r2, r3
 8004eea:	2b02      	cmp	r3, #2
 8004eec:	d901      	bls.n	8004ef2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004eee:	2303      	movs	r3, #3
 8004ef0:	e193      	b.n	800521a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ef2:	4b1b      	ldr	r3, [pc, #108]	@ (8004f60 <HAL_RCC_OscConfig+0x274>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f003 0302 	and.w	r3, r3, #2
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d1f0      	bne.n	8004ee0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f003 0308 	and.w	r3, r3, #8
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d036      	beq.n	8004f78 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	695b      	ldr	r3, [r3, #20]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d016      	beq.n	8004f40 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f12:	4b15      	ldr	r3, [pc, #84]	@ (8004f68 <HAL_RCC_OscConfig+0x27c>)
 8004f14:	2201      	movs	r2, #1
 8004f16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f18:	f7fe fb76 	bl	8003608 <HAL_GetTick>
 8004f1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f1e:	e008      	b.n	8004f32 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f20:	f7fe fb72 	bl	8003608 <HAL_GetTick>
 8004f24:	4602      	mov	r2, r0
 8004f26:	693b      	ldr	r3, [r7, #16]
 8004f28:	1ad3      	subs	r3, r2, r3
 8004f2a:	2b02      	cmp	r3, #2
 8004f2c:	d901      	bls.n	8004f32 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004f2e:	2303      	movs	r3, #3
 8004f30:	e173      	b.n	800521a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f32:	4b0b      	ldr	r3, [pc, #44]	@ (8004f60 <HAL_RCC_OscConfig+0x274>)
 8004f34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f36:	f003 0302 	and.w	r3, r3, #2
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d0f0      	beq.n	8004f20 <HAL_RCC_OscConfig+0x234>
 8004f3e:	e01b      	b.n	8004f78 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f40:	4b09      	ldr	r3, [pc, #36]	@ (8004f68 <HAL_RCC_OscConfig+0x27c>)
 8004f42:	2200      	movs	r2, #0
 8004f44:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f46:	f7fe fb5f 	bl	8003608 <HAL_GetTick>
 8004f4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f4c:	e00e      	b.n	8004f6c <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f4e:	f7fe fb5b 	bl	8003608 <HAL_GetTick>
 8004f52:	4602      	mov	r2, r0
 8004f54:	693b      	ldr	r3, [r7, #16]
 8004f56:	1ad3      	subs	r3, r2, r3
 8004f58:	2b02      	cmp	r3, #2
 8004f5a:	d907      	bls.n	8004f6c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004f5c:	2303      	movs	r3, #3
 8004f5e:	e15c      	b.n	800521a <HAL_RCC_OscConfig+0x52e>
 8004f60:	40023800 	.word	0x40023800
 8004f64:	42470000 	.word	0x42470000
 8004f68:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f6c:	4b8a      	ldr	r3, [pc, #552]	@ (8005198 <HAL_RCC_OscConfig+0x4ac>)
 8004f6e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f70:	f003 0302 	and.w	r3, r3, #2
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d1ea      	bne.n	8004f4e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f003 0304 	and.w	r3, r3, #4
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	f000 8097 	beq.w	80050b4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f86:	2300      	movs	r3, #0
 8004f88:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f8a:	4b83      	ldr	r3, [pc, #524]	@ (8005198 <HAL_RCC_OscConfig+0x4ac>)
 8004f8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d10f      	bne.n	8004fb6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f96:	2300      	movs	r3, #0
 8004f98:	60bb      	str	r3, [r7, #8]
 8004f9a:	4b7f      	ldr	r3, [pc, #508]	@ (8005198 <HAL_RCC_OscConfig+0x4ac>)
 8004f9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f9e:	4a7e      	ldr	r2, [pc, #504]	@ (8005198 <HAL_RCC_OscConfig+0x4ac>)
 8004fa0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004fa4:	6413      	str	r3, [r2, #64]	@ 0x40
 8004fa6:	4b7c      	ldr	r3, [pc, #496]	@ (8005198 <HAL_RCC_OscConfig+0x4ac>)
 8004fa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004faa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004fae:	60bb      	str	r3, [r7, #8]
 8004fb0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fb6:	4b79      	ldr	r3, [pc, #484]	@ (800519c <HAL_RCC_OscConfig+0x4b0>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d118      	bne.n	8004ff4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004fc2:	4b76      	ldr	r3, [pc, #472]	@ (800519c <HAL_RCC_OscConfig+0x4b0>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4a75      	ldr	r2, [pc, #468]	@ (800519c <HAL_RCC_OscConfig+0x4b0>)
 8004fc8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004fcc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004fce:	f7fe fb1b 	bl	8003608 <HAL_GetTick>
 8004fd2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fd4:	e008      	b.n	8004fe8 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004fd6:	f7fe fb17 	bl	8003608 <HAL_GetTick>
 8004fda:	4602      	mov	r2, r0
 8004fdc:	693b      	ldr	r3, [r7, #16]
 8004fde:	1ad3      	subs	r3, r2, r3
 8004fe0:	2b02      	cmp	r3, #2
 8004fe2:	d901      	bls.n	8004fe8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004fe4:	2303      	movs	r3, #3
 8004fe6:	e118      	b.n	800521a <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fe8:	4b6c      	ldr	r3, [pc, #432]	@ (800519c <HAL_RCC_OscConfig+0x4b0>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d0f0      	beq.n	8004fd6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	689b      	ldr	r3, [r3, #8]
 8004ff8:	2b01      	cmp	r3, #1
 8004ffa:	d106      	bne.n	800500a <HAL_RCC_OscConfig+0x31e>
 8004ffc:	4b66      	ldr	r3, [pc, #408]	@ (8005198 <HAL_RCC_OscConfig+0x4ac>)
 8004ffe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005000:	4a65      	ldr	r2, [pc, #404]	@ (8005198 <HAL_RCC_OscConfig+0x4ac>)
 8005002:	f043 0301 	orr.w	r3, r3, #1
 8005006:	6713      	str	r3, [r2, #112]	@ 0x70
 8005008:	e01c      	b.n	8005044 <HAL_RCC_OscConfig+0x358>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	689b      	ldr	r3, [r3, #8]
 800500e:	2b05      	cmp	r3, #5
 8005010:	d10c      	bne.n	800502c <HAL_RCC_OscConfig+0x340>
 8005012:	4b61      	ldr	r3, [pc, #388]	@ (8005198 <HAL_RCC_OscConfig+0x4ac>)
 8005014:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005016:	4a60      	ldr	r2, [pc, #384]	@ (8005198 <HAL_RCC_OscConfig+0x4ac>)
 8005018:	f043 0304 	orr.w	r3, r3, #4
 800501c:	6713      	str	r3, [r2, #112]	@ 0x70
 800501e:	4b5e      	ldr	r3, [pc, #376]	@ (8005198 <HAL_RCC_OscConfig+0x4ac>)
 8005020:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005022:	4a5d      	ldr	r2, [pc, #372]	@ (8005198 <HAL_RCC_OscConfig+0x4ac>)
 8005024:	f043 0301 	orr.w	r3, r3, #1
 8005028:	6713      	str	r3, [r2, #112]	@ 0x70
 800502a:	e00b      	b.n	8005044 <HAL_RCC_OscConfig+0x358>
 800502c:	4b5a      	ldr	r3, [pc, #360]	@ (8005198 <HAL_RCC_OscConfig+0x4ac>)
 800502e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005030:	4a59      	ldr	r2, [pc, #356]	@ (8005198 <HAL_RCC_OscConfig+0x4ac>)
 8005032:	f023 0301 	bic.w	r3, r3, #1
 8005036:	6713      	str	r3, [r2, #112]	@ 0x70
 8005038:	4b57      	ldr	r3, [pc, #348]	@ (8005198 <HAL_RCC_OscConfig+0x4ac>)
 800503a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800503c:	4a56      	ldr	r2, [pc, #344]	@ (8005198 <HAL_RCC_OscConfig+0x4ac>)
 800503e:	f023 0304 	bic.w	r3, r3, #4
 8005042:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	689b      	ldr	r3, [r3, #8]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d015      	beq.n	8005078 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800504c:	f7fe fadc 	bl	8003608 <HAL_GetTick>
 8005050:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005052:	e00a      	b.n	800506a <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005054:	f7fe fad8 	bl	8003608 <HAL_GetTick>
 8005058:	4602      	mov	r2, r0
 800505a:	693b      	ldr	r3, [r7, #16]
 800505c:	1ad3      	subs	r3, r2, r3
 800505e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005062:	4293      	cmp	r3, r2
 8005064:	d901      	bls.n	800506a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8005066:	2303      	movs	r3, #3
 8005068:	e0d7      	b.n	800521a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800506a:	4b4b      	ldr	r3, [pc, #300]	@ (8005198 <HAL_RCC_OscConfig+0x4ac>)
 800506c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800506e:	f003 0302 	and.w	r3, r3, #2
 8005072:	2b00      	cmp	r3, #0
 8005074:	d0ee      	beq.n	8005054 <HAL_RCC_OscConfig+0x368>
 8005076:	e014      	b.n	80050a2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005078:	f7fe fac6 	bl	8003608 <HAL_GetTick>
 800507c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800507e:	e00a      	b.n	8005096 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005080:	f7fe fac2 	bl	8003608 <HAL_GetTick>
 8005084:	4602      	mov	r2, r0
 8005086:	693b      	ldr	r3, [r7, #16]
 8005088:	1ad3      	subs	r3, r2, r3
 800508a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800508e:	4293      	cmp	r3, r2
 8005090:	d901      	bls.n	8005096 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8005092:	2303      	movs	r3, #3
 8005094:	e0c1      	b.n	800521a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005096:	4b40      	ldr	r3, [pc, #256]	@ (8005198 <HAL_RCC_OscConfig+0x4ac>)
 8005098:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800509a:	f003 0302 	and.w	r3, r3, #2
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d1ee      	bne.n	8005080 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80050a2:	7dfb      	ldrb	r3, [r7, #23]
 80050a4:	2b01      	cmp	r3, #1
 80050a6:	d105      	bne.n	80050b4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80050a8:	4b3b      	ldr	r3, [pc, #236]	@ (8005198 <HAL_RCC_OscConfig+0x4ac>)
 80050aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050ac:	4a3a      	ldr	r2, [pc, #232]	@ (8005198 <HAL_RCC_OscConfig+0x4ac>)
 80050ae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80050b2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	699b      	ldr	r3, [r3, #24]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	f000 80ad 	beq.w	8005218 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80050be:	4b36      	ldr	r3, [pc, #216]	@ (8005198 <HAL_RCC_OscConfig+0x4ac>)
 80050c0:	689b      	ldr	r3, [r3, #8]
 80050c2:	f003 030c 	and.w	r3, r3, #12
 80050c6:	2b08      	cmp	r3, #8
 80050c8:	d060      	beq.n	800518c <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	699b      	ldr	r3, [r3, #24]
 80050ce:	2b02      	cmp	r3, #2
 80050d0:	d145      	bne.n	800515e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050d2:	4b33      	ldr	r3, [pc, #204]	@ (80051a0 <HAL_RCC_OscConfig+0x4b4>)
 80050d4:	2200      	movs	r2, #0
 80050d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050d8:	f7fe fa96 	bl	8003608 <HAL_GetTick>
 80050dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050de:	e008      	b.n	80050f2 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050e0:	f7fe fa92 	bl	8003608 <HAL_GetTick>
 80050e4:	4602      	mov	r2, r0
 80050e6:	693b      	ldr	r3, [r7, #16]
 80050e8:	1ad3      	subs	r3, r2, r3
 80050ea:	2b02      	cmp	r3, #2
 80050ec:	d901      	bls.n	80050f2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80050ee:	2303      	movs	r3, #3
 80050f0:	e093      	b.n	800521a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050f2:	4b29      	ldr	r3, [pc, #164]	@ (8005198 <HAL_RCC_OscConfig+0x4ac>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d1f0      	bne.n	80050e0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	69da      	ldr	r2, [r3, #28]
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6a1b      	ldr	r3, [r3, #32]
 8005106:	431a      	orrs	r2, r3
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800510c:	019b      	lsls	r3, r3, #6
 800510e:	431a      	orrs	r2, r3
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005114:	085b      	lsrs	r3, r3, #1
 8005116:	3b01      	subs	r3, #1
 8005118:	041b      	lsls	r3, r3, #16
 800511a:	431a      	orrs	r2, r3
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005120:	061b      	lsls	r3, r3, #24
 8005122:	431a      	orrs	r2, r3
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005128:	071b      	lsls	r3, r3, #28
 800512a:	491b      	ldr	r1, [pc, #108]	@ (8005198 <HAL_RCC_OscConfig+0x4ac>)
 800512c:	4313      	orrs	r3, r2
 800512e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005130:	4b1b      	ldr	r3, [pc, #108]	@ (80051a0 <HAL_RCC_OscConfig+0x4b4>)
 8005132:	2201      	movs	r2, #1
 8005134:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005136:	f7fe fa67 	bl	8003608 <HAL_GetTick>
 800513a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800513c:	e008      	b.n	8005150 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800513e:	f7fe fa63 	bl	8003608 <HAL_GetTick>
 8005142:	4602      	mov	r2, r0
 8005144:	693b      	ldr	r3, [r7, #16]
 8005146:	1ad3      	subs	r3, r2, r3
 8005148:	2b02      	cmp	r3, #2
 800514a:	d901      	bls.n	8005150 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800514c:	2303      	movs	r3, #3
 800514e:	e064      	b.n	800521a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005150:	4b11      	ldr	r3, [pc, #68]	@ (8005198 <HAL_RCC_OscConfig+0x4ac>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005158:	2b00      	cmp	r3, #0
 800515a:	d0f0      	beq.n	800513e <HAL_RCC_OscConfig+0x452>
 800515c:	e05c      	b.n	8005218 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800515e:	4b10      	ldr	r3, [pc, #64]	@ (80051a0 <HAL_RCC_OscConfig+0x4b4>)
 8005160:	2200      	movs	r2, #0
 8005162:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005164:	f7fe fa50 	bl	8003608 <HAL_GetTick>
 8005168:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800516a:	e008      	b.n	800517e <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800516c:	f7fe fa4c 	bl	8003608 <HAL_GetTick>
 8005170:	4602      	mov	r2, r0
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	1ad3      	subs	r3, r2, r3
 8005176:	2b02      	cmp	r3, #2
 8005178:	d901      	bls.n	800517e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800517a:	2303      	movs	r3, #3
 800517c:	e04d      	b.n	800521a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800517e:	4b06      	ldr	r3, [pc, #24]	@ (8005198 <HAL_RCC_OscConfig+0x4ac>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005186:	2b00      	cmp	r3, #0
 8005188:	d1f0      	bne.n	800516c <HAL_RCC_OscConfig+0x480>
 800518a:	e045      	b.n	8005218 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	699b      	ldr	r3, [r3, #24]
 8005190:	2b01      	cmp	r3, #1
 8005192:	d107      	bne.n	80051a4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005194:	2301      	movs	r3, #1
 8005196:	e040      	b.n	800521a <HAL_RCC_OscConfig+0x52e>
 8005198:	40023800 	.word	0x40023800
 800519c:	40007000 	.word	0x40007000
 80051a0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80051a4:	4b1f      	ldr	r3, [pc, #124]	@ (8005224 <HAL_RCC_OscConfig+0x538>)
 80051a6:	685b      	ldr	r3, [r3, #4]
 80051a8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	699b      	ldr	r3, [r3, #24]
 80051ae:	2b01      	cmp	r3, #1
 80051b0:	d030      	beq.n	8005214 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80051bc:	429a      	cmp	r2, r3
 80051be:	d129      	bne.n	8005214 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051ca:	429a      	cmp	r2, r3
 80051cc:	d122      	bne.n	8005214 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80051ce:	68fa      	ldr	r2, [r7, #12]
 80051d0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80051d4:	4013      	ands	r3, r2
 80051d6:	687a      	ldr	r2, [r7, #4]
 80051d8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80051da:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80051dc:	4293      	cmp	r3, r2
 80051de:	d119      	bne.n	8005214 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051ea:	085b      	lsrs	r3, r3, #1
 80051ec:	3b01      	subs	r3, #1
 80051ee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80051f0:	429a      	cmp	r2, r3
 80051f2:	d10f      	bne.n	8005214 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051fe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005200:	429a      	cmp	r2, r3
 8005202:	d107      	bne.n	8005214 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800520e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005210:	429a      	cmp	r2, r3
 8005212:	d001      	beq.n	8005218 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005214:	2301      	movs	r3, #1
 8005216:	e000      	b.n	800521a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005218:	2300      	movs	r3, #0
}
 800521a:	4618      	mov	r0, r3
 800521c:	3718      	adds	r7, #24
 800521e:	46bd      	mov	sp, r7
 8005220:	bd80      	pop	{r7, pc}
 8005222:	bf00      	nop
 8005224:	40023800 	.word	0x40023800

08005228 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b082      	sub	sp, #8
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d101      	bne.n	800523a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005236:	2301      	movs	r3, #1
 8005238:	e07b      	b.n	8005332 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800523e:	2b00      	cmp	r3, #0
 8005240:	d108      	bne.n	8005254 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	685b      	ldr	r3, [r3, #4]
 8005246:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800524a:	d009      	beq.n	8005260 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2200      	movs	r2, #0
 8005250:	61da      	str	r2, [r3, #28]
 8005252:	e005      	b.n	8005260 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2200      	movs	r2, #0
 8005258:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2200      	movs	r2, #0
 800525e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2200      	movs	r2, #0
 8005264:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800526c:	b2db      	uxtb	r3, r3
 800526e:	2b00      	cmp	r3, #0
 8005270:	d106      	bne.n	8005280 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2200      	movs	r2, #0
 8005276:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800527a:	6878      	ldr	r0, [r7, #4]
 800527c:	f7fd fab2 	bl	80027e4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2202      	movs	r2, #2
 8005284:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	681a      	ldr	r2, [r3, #0]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005296:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	685b      	ldr	r3, [r3, #4]
 800529c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	689b      	ldr	r3, [r3, #8]
 80052a4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80052a8:	431a      	orrs	r2, r3
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	68db      	ldr	r3, [r3, #12]
 80052ae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80052b2:	431a      	orrs	r2, r3
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	691b      	ldr	r3, [r3, #16]
 80052b8:	f003 0302 	and.w	r3, r3, #2
 80052bc:	431a      	orrs	r2, r3
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	695b      	ldr	r3, [r3, #20]
 80052c2:	f003 0301 	and.w	r3, r3, #1
 80052c6:	431a      	orrs	r2, r3
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	699b      	ldr	r3, [r3, #24]
 80052cc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80052d0:	431a      	orrs	r2, r3
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	69db      	ldr	r3, [r3, #28]
 80052d6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80052da:	431a      	orrs	r2, r3
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6a1b      	ldr	r3, [r3, #32]
 80052e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052e4:	ea42 0103 	orr.w	r1, r2, r3
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052ec:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	430a      	orrs	r2, r1
 80052f6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	699b      	ldr	r3, [r3, #24]
 80052fc:	0c1b      	lsrs	r3, r3, #16
 80052fe:	f003 0104 	and.w	r1, r3, #4
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005306:	f003 0210 	and.w	r2, r3, #16
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	430a      	orrs	r2, r1
 8005310:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	69da      	ldr	r2, [r3, #28]
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005320:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2200      	movs	r2, #0
 8005326:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2201      	movs	r2, #1
 800532c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005330:	2300      	movs	r3, #0
}
 8005332:	4618      	mov	r0, r3
 8005334:	3708      	adds	r7, #8
 8005336:	46bd      	mov	sp, r7
 8005338:	bd80      	pop	{r7, pc}

0800533a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800533a:	b580      	push	{r7, lr}
 800533c:	b082      	sub	sp, #8
 800533e:	af00      	add	r7, sp, #0
 8005340:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d101      	bne.n	800534c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005348:	2301      	movs	r3, #1
 800534a:	e041      	b.n	80053d0 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005352:	b2db      	uxtb	r3, r3
 8005354:	2b00      	cmp	r3, #0
 8005356:	d106      	bne.n	8005366 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2200      	movs	r2, #0
 800535c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005360:	6878      	ldr	r0, [r7, #4]
 8005362:	f7fd fedf 	bl	8003124 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2202      	movs	r2, #2
 800536a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681a      	ldr	r2, [r3, #0]
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	3304      	adds	r3, #4
 8005376:	4619      	mov	r1, r3
 8005378:	4610      	mov	r0, r2
 800537a:	f000 fdbf 	bl	8005efc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2201      	movs	r2, #1
 8005382:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2201      	movs	r2, #1
 800538a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2201      	movs	r2, #1
 8005392:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2201      	movs	r2, #1
 800539a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2201      	movs	r2, #1
 80053a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2201      	movs	r2, #1
 80053aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2201      	movs	r2, #1
 80053b2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2201      	movs	r2, #1
 80053ba:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2201      	movs	r2, #1
 80053c2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2201      	movs	r2, #1
 80053ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80053ce:	2300      	movs	r3, #0
}
 80053d0:	4618      	mov	r0, r3
 80053d2:	3708      	adds	r7, #8
 80053d4:	46bd      	mov	sp, r7
 80053d6:	bd80      	pop	{r7, pc}

080053d8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80053d8:	b480      	push	{r7}
 80053da:	b085      	sub	sp, #20
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80053e6:	b2db      	uxtb	r3, r3
 80053e8:	2b01      	cmp	r3, #1
 80053ea:	d001      	beq.n	80053f0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80053ec:	2301      	movs	r3, #1
 80053ee:	e046      	b.n	800547e <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2202      	movs	r2, #2
 80053f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4a23      	ldr	r2, [pc, #140]	@ (800548c <HAL_TIM_Base_Start+0xb4>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d022      	beq.n	8005448 <HAL_TIM_Base_Start+0x70>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800540a:	d01d      	beq.n	8005448 <HAL_TIM_Base_Start+0x70>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4a1f      	ldr	r2, [pc, #124]	@ (8005490 <HAL_TIM_Base_Start+0xb8>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d018      	beq.n	8005448 <HAL_TIM_Base_Start+0x70>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4a1e      	ldr	r2, [pc, #120]	@ (8005494 <HAL_TIM_Base_Start+0xbc>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d013      	beq.n	8005448 <HAL_TIM_Base_Start+0x70>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4a1c      	ldr	r2, [pc, #112]	@ (8005498 <HAL_TIM_Base_Start+0xc0>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d00e      	beq.n	8005448 <HAL_TIM_Base_Start+0x70>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4a1b      	ldr	r2, [pc, #108]	@ (800549c <HAL_TIM_Base_Start+0xc4>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d009      	beq.n	8005448 <HAL_TIM_Base_Start+0x70>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4a19      	ldr	r2, [pc, #100]	@ (80054a0 <HAL_TIM_Base_Start+0xc8>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d004      	beq.n	8005448 <HAL_TIM_Base_Start+0x70>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	4a18      	ldr	r2, [pc, #96]	@ (80054a4 <HAL_TIM_Base_Start+0xcc>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d111      	bne.n	800546c <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	689b      	ldr	r3, [r3, #8]
 800544e:	f003 0307 	and.w	r3, r3, #7
 8005452:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	2b06      	cmp	r3, #6
 8005458:	d010      	beq.n	800547c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	681a      	ldr	r2, [r3, #0]
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f042 0201 	orr.w	r2, r2, #1
 8005468:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800546a:	e007      	b.n	800547c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	681a      	ldr	r2, [r3, #0]
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f042 0201 	orr.w	r2, r2, #1
 800547a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800547c:	2300      	movs	r3, #0
}
 800547e:	4618      	mov	r0, r3
 8005480:	3714      	adds	r7, #20
 8005482:	46bd      	mov	sp, r7
 8005484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005488:	4770      	bx	lr
 800548a:	bf00      	nop
 800548c:	40010000 	.word	0x40010000
 8005490:	40000400 	.word	0x40000400
 8005494:	40000800 	.word	0x40000800
 8005498:	40000c00 	.word	0x40000c00
 800549c:	40010400 	.word	0x40010400
 80054a0:	40014000 	.word	0x40014000
 80054a4:	40001800 	.word	0x40001800

080054a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80054a8:	b480      	push	{r7}
 80054aa:	b085      	sub	sp, #20
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80054b6:	b2db      	uxtb	r3, r3
 80054b8:	2b01      	cmp	r3, #1
 80054ba:	d001      	beq.n	80054c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80054bc:	2301      	movs	r3, #1
 80054be:	e04e      	b.n	800555e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2202      	movs	r2, #2
 80054c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	68da      	ldr	r2, [r3, #12]
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f042 0201 	orr.w	r2, r2, #1
 80054d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4a23      	ldr	r2, [pc, #140]	@ (800556c <HAL_TIM_Base_Start_IT+0xc4>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d022      	beq.n	8005528 <HAL_TIM_Base_Start_IT+0x80>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054ea:	d01d      	beq.n	8005528 <HAL_TIM_Base_Start_IT+0x80>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a1f      	ldr	r2, [pc, #124]	@ (8005570 <HAL_TIM_Base_Start_IT+0xc8>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d018      	beq.n	8005528 <HAL_TIM_Base_Start_IT+0x80>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4a1e      	ldr	r2, [pc, #120]	@ (8005574 <HAL_TIM_Base_Start_IT+0xcc>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d013      	beq.n	8005528 <HAL_TIM_Base_Start_IT+0x80>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4a1c      	ldr	r2, [pc, #112]	@ (8005578 <HAL_TIM_Base_Start_IT+0xd0>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d00e      	beq.n	8005528 <HAL_TIM_Base_Start_IT+0x80>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4a1b      	ldr	r2, [pc, #108]	@ (800557c <HAL_TIM_Base_Start_IT+0xd4>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d009      	beq.n	8005528 <HAL_TIM_Base_Start_IT+0x80>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	4a19      	ldr	r2, [pc, #100]	@ (8005580 <HAL_TIM_Base_Start_IT+0xd8>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d004      	beq.n	8005528 <HAL_TIM_Base_Start_IT+0x80>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	4a18      	ldr	r2, [pc, #96]	@ (8005584 <HAL_TIM_Base_Start_IT+0xdc>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d111      	bne.n	800554c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	689b      	ldr	r3, [r3, #8]
 800552e:	f003 0307 	and.w	r3, r3, #7
 8005532:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	2b06      	cmp	r3, #6
 8005538:	d010      	beq.n	800555c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	681a      	ldr	r2, [r3, #0]
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f042 0201 	orr.w	r2, r2, #1
 8005548:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800554a:	e007      	b.n	800555c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	681a      	ldr	r2, [r3, #0]
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f042 0201 	orr.w	r2, r2, #1
 800555a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800555c:	2300      	movs	r3, #0
}
 800555e:	4618      	mov	r0, r3
 8005560:	3714      	adds	r7, #20
 8005562:	46bd      	mov	sp, r7
 8005564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005568:	4770      	bx	lr
 800556a:	bf00      	nop
 800556c:	40010000 	.word	0x40010000
 8005570:	40000400 	.word	0x40000400
 8005574:	40000800 	.word	0x40000800
 8005578:	40000c00 	.word	0x40000c00
 800557c:	40010400 	.word	0x40010400
 8005580:	40014000 	.word	0x40014000
 8005584:	40001800 	.word	0x40001800

08005588 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b082      	sub	sp, #8
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d101      	bne.n	800559a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005596:	2301      	movs	r3, #1
 8005598:	e041      	b.n	800561e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80055a0:	b2db      	uxtb	r3, r3
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d106      	bne.n	80055b4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2200      	movs	r2, #0
 80055aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80055ae:	6878      	ldr	r0, [r7, #4]
 80055b0:	f000 f839 	bl	8005626 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2202      	movs	r2, #2
 80055b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681a      	ldr	r2, [r3, #0]
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	3304      	adds	r3, #4
 80055c4:	4619      	mov	r1, r3
 80055c6:	4610      	mov	r0, r2
 80055c8:	f000 fc98 	bl	8005efc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2201      	movs	r2, #1
 80055d0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2201      	movs	r2, #1
 80055d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2201      	movs	r2, #1
 80055e0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2201      	movs	r2, #1
 80055e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2201      	movs	r2, #1
 80055f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2201      	movs	r2, #1
 80055f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2201      	movs	r2, #1
 8005600:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2201      	movs	r2, #1
 8005608:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2201      	movs	r2, #1
 8005610:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2201      	movs	r2, #1
 8005618:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800561c:	2300      	movs	r3, #0
}
 800561e:	4618      	mov	r0, r3
 8005620:	3708      	adds	r7, #8
 8005622:	46bd      	mov	sp, r7
 8005624:	bd80      	pop	{r7, pc}

08005626 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005626:	b480      	push	{r7}
 8005628:	b083      	sub	sp, #12
 800562a:	af00      	add	r7, sp, #0
 800562c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800562e:	bf00      	nop
 8005630:	370c      	adds	r7, #12
 8005632:	46bd      	mov	sp, r7
 8005634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005638:	4770      	bx	lr
	...

0800563c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b084      	sub	sp, #16
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
 8005644:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d109      	bne.n	8005660 <HAL_TIM_PWM_Start+0x24>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005652:	b2db      	uxtb	r3, r3
 8005654:	2b01      	cmp	r3, #1
 8005656:	bf14      	ite	ne
 8005658:	2301      	movne	r3, #1
 800565a:	2300      	moveq	r3, #0
 800565c:	b2db      	uxtb	r3, r3
 800565e:	e022      	b.n	80056a6 <HAL_TIM_PWM_Start+0x6a>
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	2b04      	cmp	r3, #4
 8005664:	d109      	bne.n	800567a <HAL_TIM_PWM_Start+0x3e>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800566c:	b2db      	uxtb	r3, r3
 800566e:	2b01      	cmp	r3, #1
 8005670:	bf14      	ite	ne
 8005672:	2301      	movne	r3, #1
 8005674:	2300      	moveq	r3, #0
 8005676:	b2db      	uxtb	r3, r3
 8005678:	e015      	b.n	80056a6 <HAL_TIM_PWM_Start+0x6a>
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	2b08      	cmp	r3, #8
 800567e:	d109      	bne.n	8005694 <HAL_TIM_PWM_Start+0x58>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005686:	b2db      	uxtb	r3, r3
 8005688:	2b01      	cmp	r3, #1
 800568a:	bf14      	ite	ne
 800568c:	2301      	movne	r3, #1
 800568e:	2300      	moveq	r3, #0
 8005690:	b2db      	uxtb	r3, r3
 8005692:	e008      	b.n	80056a6 <HAL_TIM_PWM_Start+0x6a>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800569a:	b2db      	uxtb	r3, r3
 800569c:	2b01      	cmp	r3, #1
 800569e:	bf14      	ite	ne
 80056a0:	2301      	movne	r3, #1
 80056a2:	2300      	moveq	r3, #0
 80056a4:	b2db      	uxtb	r3, r3
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d001      	beq.n	80056ae <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80056aa:	2301      	movs	r3, #1
 80056ac:	e07c      	b.n	80057a8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d104      	bne.n	80056be <HAL_TIM_PWM_Start+0x82>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2202      	movs	r2, #2
 80056b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80056bc:	e013      	b.n	80056e6 <HAL_TIM_PWM_Start+0xaa>
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	2b04      	cmp	r3, #4
 80056c2:	d104      	bne.n	80056ce <HAL_TIM_PWM_Start+0x92>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2202      	movs	r2, #2
 80056c8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80056cc:	e00b      	b.n	80056e6 <HAL_TIM_PWM_Start+0xaa>
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	2b08      	cmp	r3, #8
 80056d2:	d104      	bne.n	80056de <HAL_TIM_PWM_Start+0xa2>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2202      	movs	r2, #2
 80056d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80056dc:	e003      	b.n	80056e6 <HAL_TIM_PWM_Start+0xaa>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2202      	movs	r2, #2
 80056e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	2201      	movs	r2, #1
 80056ec:	6839      	ldr	r1, [r7, #0]
 80056ee:	4618      	mov	r0, r3
 80056f0:	f001 f81e 	bl	8006730 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4a2d      	ldr	r2, [pc, #180]	@ (80057b0 <HAL_TIM_PWM_Start+0x174>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d004      	beq.n	8005708 <HAL_TIM_PWM_Start+0xcc>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	4a2c      	ldr	r2, [pc, #176]	@ (80057b4 <HAL_TIM_PWM_Start+0x178>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d101      	bne.n	800570c <HAL_TIM_PWM_Start+0xd0>
 8005708:	2301      	movs	r3, #1
 800570a:	e000      	b.n	800570e <HAL_TIM_PWM_Start+0xd2>
 800570c:	2300      	movs	r3, #0
 800570e:	2b00      	cmp	r3, #0
 8005710:	d007      	beq.n	8005722 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005720:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	4a22      	ldr	r2, [pc, #136]	@ (80057b0 <HAL_TIM_PWM_Start+0x174>)
 8005728:	4293      	cmp	r3, r2
 800572a:	d022      	beq.n	8005772 <HAL_TIM_PWM_Start+0x136>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005734:	d01d      	beq.n	8005772 <HAL_TIM_PWM_Start+0x136>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	4a1f      	ldr	r2, [pc, #124]	@ (80057b8 <HAL_TIM_PWM_Start+0x17c>)
 800573c:	4293      	cmp	r3, r2
 800573e:	d018      	beq.n	8005772 <HAL_TIM_PWM_Start+0x136>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	4a1d      	ldr	r2, [pc, #116]	@ (80057bc <HAL_TIM_PWM_Start+0x180>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d013      	beq.n	8005772 <HAL_TIM_PWM_Start+0x136>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	4a1c      	ldr	r2, [pc, #112]	@ (80057c0 <HAL_TIM_PWM_Start+0x184>)
 8005750:	4293      	cmp	r3, r2
 8005752:	d00e      	beq.n	8005772 <HAL_TIM_PWM_Start+0x136>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4a16      	ldr	r2, [pc, #88]	@ (80057b4 <HAL_TIM_PWM_Start+0x178>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d009      	beq.n	8005772 <HAL_TIM_PWM_Start+0x136>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	4a18      	ldr	r2, [pc, #96]	@ (80057c4 <HAL_TIM_PWM_Start+0x188>)
 8005764:	4293      	cmp	r3, r2
 8005766:	d004      	beq.n	8005772 <HAL_TIM_PWM_Start+0x136>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	4a16      	ldr	r2, [pc, #88]	@ (80057c8 <HAL_TIM_PWM_Start+0x18c>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d111      	bne.n	8005796 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	689b      	ldr	r3, [r3, #8]
 8005778:	f003 0307 	and.w	r3, r3, #7
 800577c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	2b06      	cmp	r3, #6
 8005782:	d010      	beq.n	80057a6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	681a      	ldr	r2, [r3, #0]
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f042 0201 	orr.w	r2, r2, #1
 8005792:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005794:	e007      	b.n	80057a6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	681a      	ldr	r2, [r3, #0]
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f042 0201 	orr.w	r2, r2, #1
 80057a4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80057a6:	2300      	movs	r3, #0
}
 80057a8:	4618      	mov	r0, r3
 80057aa:	3710      	adds	r7, #16
 80057ac:	46bd      	mov	sp, r7
 80057ae:	bd80      	pop	{r7, pc}
 80057b0:	40010000 	.word	0x40010000
 80057b4:	40010400 	.word	0x40010400
 80057b8:	40000400 	.word	0x40000400
 80057bc:	40000800 	.word	0x40000800
 80057c0:	40000c00 	.word	0x40000c00
 80057c4:	40014000 	.word	0x40014000
 80057c8:	40001800 	.word	0x40001800

080057cc <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b082      	sub	sp, #8
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d101      	bne.n	80057de <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80057da:	2301      	movs	r3, #1
 80057dc:	e041      	b.n	8005862 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80057e4:	b2db      	uxtb	r3, r3
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d106      	bne.n	80057f8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2200      	movs	r2, #0
 80057ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80057f2:	6878      	ldr	r0, [r7, #4]
 80057f4:	f000 f839 	bl	800586a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2202      	movs	r2, #2
 80057fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681a      	ldr	r2, [r3, #0]
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	3304      	adds	r3, #4
 8005808:	4619      	mov	r1, r3
 800580a:	4610      	mov	r0, r2
 800580c:	f000 fb76 	bl	8005efc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2201      	movs	r2, #1
 8005814:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2201      	movs	r2, #1
 800581c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2201      	movs	r2, #1
 8005824:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2201      	movs	r2, #1
 800582c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2201      	movs	r2, #1
 8005834:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2201      	movs	r2, #1
 800583c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2201      	movs	r2, #1
 8005844:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2201      	movs	r2, #1
 800584c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2201      	movs	r2, #1
 8005854:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2201      	movs	r2, #1
 800585c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005860:	2300      	movs	r3, #0
}
 8005862:	4618      	mov	r0, r3
 8005864:	3708      	adds	r7, #8
 8005866:	46bd      	mov	sp, r7
 8005868:	bd80      	pop	{r7, pc}

0800586a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800586a:	b480      	push	{r7}
 800586c:	b083      	sub	sp, #12
 800586e:	af00      	add	r7, sp, #0
 8005870:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8005872:	bf00      	nop
 8005874:	370c      	adds	r7, #12
 8005876:	46bd      	mov	sp, r7
 8005878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587c:	4770      	bx	lr

0800587e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800587e:	b580      	push	{r7, lr}
 8005880:	b084      	sub	sp, #16
 8005882:	af00      	add	r7, sp, #0
 8005884:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	68db      	ldr	r3, [r3, #12]
 800588c:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	691b      	ldr	r3, [r3, #16]
 8005894:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005896:	68bb      	ldr	r3, [r7, #8]
 8005898:	f003 0302 	and.w	r3, r3, #2
 800589c:	2b00      	cmp	r3, #0
 800589e:	d020      	beq.n	80058e2 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	f003 0302 	and.w	r3, r3, #2
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d01b      	beq.n	80058e2 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f06f 0202 	mvn.w	r2, #2
 80058b2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2201      	movs	r2, #1
 80058b8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	699b      	ldr	r3, [r3, #24]
 80058c0:	f003 0303 	and.w	r3, r3, #3
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d003      	beq.n	80058d0 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80058c8:	6878      	ldr	r0, [r7, #4]
 80058ca:	f000 faf8 	bl	8005ebe <HAL_TIM_IC_CaptureCallback>
 80058ce:	e005      	b.n	80058dc <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80058d0:	6878      	ldr	r0, [r7, #4]
 80058d2:	f000 faea 	bl	8005eaa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058d6:	6878      	ldr	r0, [r7, #4]
 80058d8:	f000 fafb 	bl	8005ed2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2200      	movs	r2, #0
 80058e0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80058e2:	68bb      	ldr	r3, [r7, #8]
 80058e4:	f003 0304 	and.w	r3, r3, #4
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d020      	beq.n	800592e <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	f003 0304 	and.w	r3, r3, #4
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d01b      	beq.n	800592e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f06f 0204 	mvn.w	r2, #4
 80058fe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2202      	movs	r2, #2
 8005904:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	699b      	ldr	r3, [r3, #24]
 800590c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005910:	2b00      	cmp	r3, #0
 8005912:	d003      	beq.n	800591c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005914:	6878      	ldr	r0, [r7, #4]
 8005916:	f000 fad2 	bl	8005ebe <HAL_TIM_IC_CaptureCallback>
 800591a:	e005      	b.n	8005928 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800591c:	6878      	ldr	r0, [r7, #4]
 800591e:	f000 fac4 	bl	8005eaa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005922:	6878      	ldr	r0, [r7, #4]
 8005924:	f000 fad5 	bl	8005ed2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2200      	movs	r2, #0
 800592c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800592e:	68bb      	ldr	r3, [r7, #8]
 8005930:	f003 0308 	and.w	r3, r3, #8
 8005934:	2b00      	cmp	r3, #0
 8005936:	d020      	beq.n	800597a <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	f003 0308 	and.w	r3, r3, #8
 800593e:	2b00      	cmp	r3, #0
 8005940:	d01b      	beq.n	800597a <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f06f 0208 	mvn.w	r2, #8
 800594a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2204      	movs	r2, #4
 8005950:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	69db      	ldr	r3, [r3, #28]
 8005958:	f003 0303 	and.w	r3, r3, #3
 800595c:	2b00      	cmp	r3, #0
 800595e:	d003      	beq.n	8005968 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005960:	6878      	ldr	r0, [r7, #4]
 8005962:	f000 faac 	bl	8005ebe <HAL_TIM_IC_CaptureCallback>
 8005966:	e005      	b.n	8005974 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005968:	6878      	ldr	r0, [r7, #4]
 800596a:	f000 fa9e 	bl	8005eaa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800596e:	6878      	ldr	r0, [r7, #4]
 8005970:	f000 faaf 	bl	8005ed2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2200      	movs	r2, #0
 8005978:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800597a:	68bb      	ldr	r3, [r7, #8]
 800597c:	f003 0310 	and.w	r3, r3, #16
 8005980:	2b00      	cmp	r3, #0
 8005982:	d020      	beq.n	80059c6 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	f003 0310 	and.w	r3, r3, #16
 800598a:	2b00      	cmp	r3, #0
 800598c:	d01b      	beq.n	80059c6 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f06f 0210 	mvn.w	r2, #16
 8005996:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2208      	movs	r2, #8
 800599c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	69db      	ldr	r3, [r3, #28]
 80059a4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d003      	beq.n	80059b4 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059ac:	6878      	ldr	r0, [r7, #4]
 80059ae:	f000 fa86 	bl	8005ebe <HAL_TIM_IC_CaptureCallback>
 80059b2:	e005      	b.n	80059c0 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059b4:	6878      	ldr	r0, [r7, #4]
 80059b6:	f000 fa78 	bl	8005eaa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059ba:	6878      	ldr	r0, [r7, #4]
 80059bc:	f000 fa89 	bl	8005ed2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2200      	movs	r2, #0
 80059c4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80059c6:	68bb      	ldr	r3, [r7, #8]
 80059c8:	f003 0301 	and.w	r3, r3, #1
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d00c      	beq.n	80059ea <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	f003 0301 	and.w	r3, r3, #1
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d007      	beq.n	80059ea <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f06f 0201 	mvn.w	r2, #1
 80059e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80059e4:	6878      	ldr	r0, [r7, #4]
 80059e6:	f7fc fe0d 	bl	8002604 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80059ea:	68bb      	ldr	r3, [r7, #8]
 80059ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d00c      	beq.n	8005a0e <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d007      	beq.n	8005a0e <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005a06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005a08:	6878      	ldr	r0, [r7, #4]
 8005a0a:	f000 ff3d 	bl	8006888 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005a0e:	68bb      	ldr	r3, [r7, #8]
 8005a10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d00c      	beq.n	8005a32 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d007      	beq.n	8005a32 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005a2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005a2c:	6878      	ldr	r0, [r7, #4]
 8005a2e:	f000 fa5a 	bl	8005ee6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005a32:	68bb      	ldr	r3, [r7, #8]
 8005a34:	f003 0320 	and.w	r3, r3, #32
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d00c      	beq.n	8005a56 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	f003 0320 	and.w	r3, r3, #32
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d007      	beq.n	8005a56 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f06f 0220 	mvn.w	r2, #32
 8005a4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005a50:	6878      	ldr	r0, [r7, #4]
 8005a52:	f000 ff0f 	bl	8006874 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005a56:	bf00      	nop
 8005a58:	3710      	adds	r7, #16
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	bd80      	pop	{r7, pc}

08005a5e <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005a5e:	b580      	push	{r7, lr}
 8005a60:	b086      	sub	sp, #24
 8005a62:	af00      	add	r7, sp, #0
 8005a64:	60f8      	str	r0, [r7, #12]
 8005a66:	60b9      	str	r1, [r7, #8]
 8005a68:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005a74:	2b01      	cmp	r3, #1
 8005a76:	d101      	bne.n	8005a7c <HAL_TIM_IC_ConfigChannel+0x1e>
 8005a78:	2302      	movs	r3, #2
 8005a7a:	e088      	b.n	8005b8e <HAL_TIM_IC_ConfigChannel+0x130>
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	2201      	movs	r2, #1
 8005a80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d11b      	bne.n	8005ac2 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005a8e:	68bb      	ldr	r3, [r7, #8]
 8005a90:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005a92:	68bb      	ldr	r3, [r7, #8]
 8005a94:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8005a9a:	f000 fc85 	bl	80063a8 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	699a      	ldr	r2, [r3, #24]
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f022 020c 	bic.w	r2, r2, #12
 8005aac:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	6999      	ldr	r1, [r3, #24]
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	689a      	ldr	r2, [r3, #8]
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	430a      	orrs	r2, r1
 8005abe:	619a      	str	r2, [r3, #24]
 8005ac0:	e060      	b.n	8005b84 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2b04      	cmp	r3, #4
 8005ac6:	d11c      	bne.n	8005b02 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005acc:	68bb      	ldr	r3, [r7, #8]
 8005ace:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8005ad8:	f000 fd09 	bl	80064ee <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	699a      	ldr	r2, [r3, #24]
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8005aea:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	6999      	ldr	r1, [r3, #24]
 8005af2:	68bb      	ldr	r3, [r7, #8]
 8005af4:	689b      	ldr	r3, [r3, #8]
 8005af6:	021a      	lsls	r2, r3, #8
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	430a      	orrs	r2, r1
 8005afe:	619a      	str	r2, [r3, #24]
 8005b00:	e040      	b.n	8005b84 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2b08      	cmp	r3, #8
 8005b06:	d11b      	bne.n	8005b40 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005b14:	68bb      	ldr	r3, [r7, #8]
 8005b16:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8005b18:	f000 fd56 	bl	80065c8 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	69da      	ldr	r2, [r3, #28]
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f022 020c 	bic.w	r2, r2, #12
 8005b2a:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	69d9      	ldr	r1, [r3, #28]
 8005b32:	68bb      	ldr	r3, [r7, #8]
 8005b34:	689a      	ldr	r2, [r3, #8]
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	430a      	orrs	r2, r1
 8005b3c:	61da      	str	r2, [r3, #28]
 8005b3e:	e021      	b.n	8005b84 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2b0c      	cmp	r3, #12
 8005b44:	d11c      	bne.n	8005b80 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005b4a:	68bb      	ldr	r3, [r7, #8]
 8005b4c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005b4e:	68bb      	ldr	r3, [r7, #8]
 8005b50:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005b52:	68bb      	ldr	r3, [r7, #8]
 8005b54:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8005b56:	f000 fd73 	bl	8006640 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	69da      	ldr	r2, [r3, #28]
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8005b68:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	69d9      	ldr	r1, [r3, #28]
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	689b      	ldr	r3, [r3, #8]
 8005b74:	021a      	lsls	r2, r3, #8
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	430a      	orrs	r2, r1
 8005b7c:	61da      	str	r2, [r3, #28]
 8005b7e:	e001      	b.n	8005b84 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005b80:	2301      	movs	r3, #1
 8005b82:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	2200      	movs	r2, #0
 8005b88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005b8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b8e:	4618      	mov	r0, r3
 8005b90:	3718      	adds	r7, #24
 8005b92:	46bd      	mov	sp, r7
 8005b94:	bd80      	pop	{r7, pc}
	...

08005b98 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b086      	sub	sp, #24
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	60f8      	str	r0, [r7, #12]
 8005ba0:	60b9      	str	r1, [r7, #8]
 8005ba2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005bae:	2b01      	cmp	r3, #1
 8005bb0:	d101      	bne.n	8005bb6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005bb2:	2302      	movs	r3, #2
 8005bb4:	e0ae      	b.n	8005d14 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	2201      	movs	r2, #1
 8005bba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2b0c      	cmp	r3, #12
 8005bc2:	f200 809f 	bhi.w	8005d04 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005bc6:	a201      	add	r2, pc, #4	@ (adr r2, 8005bcc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005bc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bcc:	08005c01 	.word	0x08005c01
 8005bd0:	08005d05 	.word	0x08005d05
 8005bd4:	08005d05 	.word	0x08005d05
 8005bd8:	08005d05 	.word	0x08005d05
 8005bdc:	08005c41 	.word	0x08005c41
 8005be0:	08005d05 	.word	0x08005d05
 8005be4:	08005d05 	.word	0x08005d05
 8005be8:	08005d05 	.word	0x08005d05
 8005bec:	08005c83 	.word	0x08005c83
 8005bf0:	08005d05 	.word	0x08005d05
 8005bf4:	08005d05 	.word	0x08005d05
 8005bf8:	08005d05 	.word	0x08005d05
 8005bfc:	08005cc3 	.word	0x08005cc3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	68b9      	ldr	r1, [r7, #8]
 8005c06:	4618      	mov	r0, r3
 8005c08:	f000 fa1e 	bl	8006048 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	699a      	ldr	r2, [r3, #24]
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f042 0208 	orr.w	r2, r2, #8
 8005c1a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	699a      	ldr	r2, [r3, #24]
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f022 0204 	bic.w	r2, r2, #4
 8005c2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	6999      	ldr	r1, [r3, #24]
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	691a      	ldr	r2, [r3, #16]
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	430a      	orrs	r2, r1
 8005c3c:	619a      	str	r2, [r3, #24]
      break;
 8005c3e:	e064      	b.n	8005d0a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	68b9      	ldr	r1, [r7, #8]
 8005c46:	4618      	mov	r0, r3
 8005c48:	f000 fa6e 	bl	8006128 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	699a      	ldr	r2, [r3, #24]
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005c5a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	699a      	ldr	r2, [r3, #24]
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005c6a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	6999      	ldr	r1, [r3, #24]
 8005c72:	68bb      	ldr	r3, [r7, #8]
 8005c74:	691b      	ldr	r3, [r3, #16]
 8005c76:	021a      	lsls	r2, r3, #8
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	430a      	orrs	r2, r1
 8005c7e:	619a      	str	r2, [r3, #24]
      break;
 8005c80:	e043      	b.n	8005d0a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	68b9      	ldr	r1, [r7, #8]
 8005c88:	4618      	mov	r0, r3
 8005c8a:	f000 fac3 	bl	8006214 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	69da      	ldr	r2, [r3, #28]
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f042 0208 	orr.w	r2, r2, #8
 8005c9c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	69da      	ldr	r2, [r3, #28]
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f022 0204 	bic.w	r2, r2, #4
 8005cac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	69d9      	ldr	r1, [r3, #28]
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	691a      	ldr	r2, [r3, #16]
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	430a      	orrs	r2, r1
 8005cbe:	61da      	str	r2, [r3, #28]
      break;
 8005cc0:	e023      	b.n	8005d0a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	68b9      	ldr	r1, [r7, #8]
 8005cc8:	4618      	mov	r0, r3
 8005cca:	f000 fb17 	bl	80062fc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	69da      	ldr	r2, [r3, #28]
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005cdc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	69da      	ldr	r2, [r3, #28]
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005cec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	69d9      	ldr	r1, [r3, #28]
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	691b      	ldr	r3, [r3, #16]
 8005cf8:	021a      	lsls	r2, r3, #8
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	430a      	orrs	r2, r1
 8005d00:	61da      	str	r2, [r3, #28]
      break;
 8005d02:	e002      	b.n	8005d0a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005d04:	2301      	movs	r3, #1
 8005d06:	75fb      	strb	r3, [r7, #23]
      break;
 8005d08:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005d12:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d14:	4618      	mov	r0, r3
 8005d16:	3718      	adds	r7, #24
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	bd80      	pop	{r7, pc}

08005d1c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b084      	sub	sp, #16
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
 8005d24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005d26:	2300      	movs	r3, #0
 8005d28:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005d30:	2b01      	cmp	r3, #1
 8005d32:	d101      	bne.n	8005d38 <HAL_TIM_ConfigClockSource+0x1c>
 8005d34:	2302      	movs	r3, #2
 8005d36:	e0b4      	b.n	8005ea2 <HAL_TIM_ConfigClockSource+0x186>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2201      	movs	r2, #1
 8005d3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2202      	movs	r2, #2
 8005d44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	689b      	ldr	r3, [r3, #8]
 8005d4e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005d50:	68bb      	ldr	r3, [r7, #8]
 8005d52:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005d56:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d58:	68bb      	ldr	r3, [r7, #8]
 8005d5a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005d5e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	68ba      	ldr	r2, [r7, #8]
 8005d66:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005d70:	d03e      	beq.n	8005df0 <HAL_TIM_ConfigClockSource+0xd4>
 8005d72:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005d76:	f200 8087 	bhi.w	8005e88 <HAL_TIM_ConfigClockSource+0x16c>
 8005d7a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d7e:	f000 8086 	beq.w	8005e8e <HAL_TIM_ConfigClockSource+0x172>
 8005d82:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d86:	d87f      	bhi.n	8005e88 <HAL_TIM_ConfigClockSource+0x16c>
 8005d88:	2b70      	cmp	r3, #112	@ 0x70
 8005d8a:	d01a      	beq.n	8005dc2 <HAL_TIM_ConfigClockSource+0xa6>
 8005d8c:	2b70      	cmp	r3, #112	@ 0x70
 8005d8e:	d87b      	bhi.n	8005e88 <HAL_TIM_ConfigClockSource+0x16c>
 8005d90:	2b60      	cmp	r3, #96	@ 0x60
 8005d92:	d050      	beq.n	8005e36 <HAL_TIM_ConfigClockSource+0x11a>
 8005d94:	2b60      	cmp	r3, #96	@ 0x60
 8005d96:	d877      	bhi.n	8005e88 <HAL_TIM_ConfigClockSource+0x16c>
 8005d98:	2b50      	cmp	r3, #80	@ 0x50
 8005d9a:	d03c      	beq.n	8005e16 <HAL_TIM_ConfigClockSource+0xfa>
 8005d9c:	2b50      	cmp	r3, #80	@ 0x50
 8005d9e:	d873      	bhi.n	8005e88 <HAL_TIM_ConfigClockSource+0x16c>
 8005da0:	2b40      	cmp	r3, #64	@ 0x40
 8005da2:	d058      	beq.n	8005e56 <HAL_TIM_ConfigClockSource+0x13a>
 8005da4:	2b40      	cmp	r3, #64	@ 0x40
 8005da6:	d86f      	bhi.n	8005e88 <HAL_TIM_ConfigClockSource+0x16c>
 8005da8:	2b30      	cmp	r3, #48	@ 0x30
 8005daa:	d064      	beq.n	8005e76 <HAL_TIM_ConfigClockSource+0x15a>
 8005dac:	2b30      	cmp	r3, #48	@ 0x30
 8005dae:	d86b      	bhi.n	8005e88 <HAL_TIM_ConfigClockSource+0x16c>
 8005db0:	2b20      	cmp	r3, #32
 8005db2:	d060      	beq.n	8005e76 <HAL_TIM_ConfigClockSource+0x15a>
 8005db4:	2b20      	cmp	r3, #32
 8005db6:	d867      	bhi.n	8005e88 <HAL_TIM_ConfigClockSource+0x16c>
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d05c      	beq.n	8005e76 <HAL_TIM_ConfigClockSource+0x15a>
 8005dbc:	2b10      	cmp	r3, #16
 8005dbe:	d05a      	beq.n	8005e76 <HAL_TIM_ConfigClockSource+0x15a>
 8005dc0:	e062      	b.n	8005e88 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005dd2:	f000 fc8d 	bl	80066f0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	689b      	ldr	r3, [r3, #8]
 8005ddc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005dde:	68bb      	ldr	r3, [r7, #8]
 8005de0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005de4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	68ba      	ldr	r2, [r7, #8]
 8005dec:	609a      	str	r2, [r3, #8]
      break;
 8005dee:	e04f      	b.n	8005e90 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005e00:	f000 fc76 	bl	80066f0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	689a      	ldr	r2, [r3, #8]
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005e12:	609a      	str	r2, [r3, #8]
      break;
 8005e14:	e03c      	b.n	8005e90 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e22:	461a      	mov	r2, r3
 8005e24:	f000 fb34 	bl	8006490 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	2150      	movs	r1, #80	@ 0x50
 8005e2e:	4618      	mov	r0, r3
 8005e30:	f000 fc43 	bl	80066ba <TIM_ITRx_SetConfig>
      break;
 8005e34:	e02c      	b.n	8005e90 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005e42:	461a      	mov	r2, r3
 8005e44:	f000 fb90 	bl	8006568 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	2160      	movs	r1, #96	@ 0x60
 8005e4e:	4618      	mov	r0, r3
 8005e50:	f000 fc33 	bl	80066ba <TIM_ITRx_SetConfig>
      break;
 8005e54:	e01c      	b.n	8005e90 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e62:	461a      	mov	r2, r3
 8005e64:	f000 fb14 	bl	8006490 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	2140      	movs	r1, #64	@ 0x40
 8005e6e:	4618      	mov	r0, r3
 8005e70:	f000 fc23 	bl	80066ba <TIM_ITRx_SetConfig>
      break;
 8005e74:	e00c      	b.n	8005e90 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681a      	ldr	r2, [r3, #0]
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	4619      	mov	r1, r3
 8005e80:	4610      	mov	r0, r2
 8005e82:	f000 fc1a 	bl	80066ba <TIM_ITRx_SetConfig>
      break;
 8005e86:	e003      	b.n	8005e90 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005e88:	2301      	movs	r3, #1
 8005e8a:	73fb      	strb	r3, [r7, #15]
      break;
 8005e8c:	e000      	b.n	8005e90 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005e8e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2201      	movs	r2, #1
 8005e94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005ea0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	3710      	adds	r7, #16
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	bd80      	pop	{r7, pc}

08005eaa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005eaa:	b480      	push	{r7}
 8005eac:	b083      	sub	sp, #12
 8005eae:	af00      	add	r7, sp, #0
 8005eb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005eb2:	bf00      	nop
 8005eb4:	370c      	adds	r7, #12
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebc:	4770      	bx	lr

08005ebe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005ebe:	b480      	push	{r7}
 8005ec0:	b083      	sub	sp, #12
 8005ec2:	af00      	add	r7, sp, #0
 8005ec4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005ec6:	bf00      	nop
 8005ec8:	370c      	adds	r7, #12
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed0:	4770      	bx	lr

08005ed2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005ed2:	b480      	push	{r7}
 8005ed4:	b083      	sub	sp, #12
 8005ed6:	af00      	add	r7, sp, #0
 8005ed8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005eda:	bf00      	nop
 8005edc:	370c      	adds	r7, #12
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee4:	4770      	bx	lr

08005ee6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005ee6:	b480      	push	{r7}
 8005ee8:	b083      	sub	sp, #12
 8005eea:	af00      	add	r7, sp, #0
 8005eec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005eee:	bf00      	nop
 8005ef0:	370c      	adds	r7, #12
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef8:	4770      	bx	lr
	...

08005efc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005efc:	b480      	push	{r7}
 8005efe:	b085      	sub	sp, #20
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
 8005f04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	4a43      	ldr	r2, [pc, #268]	@ (800601c <TIM_Base_SetConfig+0x120>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d013      	beq.n	8005f3c <TIM_Base_SetConfig+0x40>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f1a:	d00f      	beq.n	8005f3c <TIM_Base_SetConfig+0x40>
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	4a40      	ldr	r2, [pc, #256]	@ (8006020 <TIM_Base_SetConfig+0x124>)
 8005f20:	4293      	cmp	r3, r2
 8005f22:	d00b      	beq.n	8005f3c <TIM_Base_SetConfig+0x40>
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	4a3f      	ldr	r2, [pc, #252]	@ (8006024 <TIM_Base_SetConfig+0x128>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d007      	beq.n	8005f3c <TIM_Base_SetConfig+0x40>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	4a3e      	ldr	r2, [pc, #248]	@ (8006028 <TIM_Base_SetConfig+0x12c>)
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d003      	beq.n	8005f3c <TIM_Base_SetConfig+0x40>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	4a3d      	ldr	r2, [pc, #244]	@ (800602c <TIM_Base_SetConfig+0x130>)
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	d108      	bne.n	8005f4e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	685b      	ldr	r3, [r3, #4]
 8005f48:	68fa      	ldr	r2, [r7, #12]
 8005f4a:	4313      	orrs	r3, r2
 8005f4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	4a32      	ldr	r2, [pc, #200]	@ (800601c <TIM_Base_SetConfig+0x120>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d02b      	beq.n	8005fae <TIM_Base_SetConfig+0xb2>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f5c:	d027      	beq.n	8005fae <TIM_Base_SetConfig+0xb2>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	4a2f      	ldr	r2, [pc, #188]	@ (8006020 <TIM_Base_SetConfig+0x124>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d023      	beq.n	8005fae <TIM_Base_SetConfig+0xb2>
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	4a2e      	ldr	r2, [pc, #184]	@ (8006024 <TIM_Base_SetConfig+0x128>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d01f      	beq.n	8005fae <TIM_Base_SetConfig+0xb2>
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	4a2d      	ldr	r2, [pc, #180]	@ (8006028 <TIM_Base_SetConfig+0x12c>)
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d01b      	beq.n	8005fae <TIM_Base_SetConfig+0xb2>
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	4a2c      	ldr	r2, [pc, #176]	@ (800602c <TIM_Base_SetConfig+0x130>)
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d017      	beq.n	8005fae <TIM_Base_SetConfig+0xb2>
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	4a2b      	ldr	r2, [pc, #172]	@ (8006030 <TIM_Base_SetConfig+0x134>)
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d013      	beq.n	8005fae <TIM_Base_SetConfig+0xb2>
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	4a2a      	ldr	r2, [pc, #168]	@ (8006034 <TIM_Base_SetConfig+0x138>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d00f      	beq.n	8005fae <TIM_Base_SetConfig+0xb2>
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	4a29      	ldr	r2, [pc, #164]	@ (8006038 <TIM_Base_SetConfig+0x13c>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d00b      	beq.n	8005fae <TIM_Base_SetConfig+0xb2>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	4a28      	ldr	r2, [pc, #160]	@ (800603c <TIM_Base_SetConfig+0x140>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d007      	beq.n	8005fae <TIM_Base_SetConfig+0xb2>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	4a27      	ldr	r2, [pc, #156]	@ (8006040 <TIM_Base_SetConfig+0x144>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d003      	beq.n	8005fae <TIM_Base_SetConfig+0xb2>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	4a26      	ldr	r2, [pc, #152]	@ (8006044 <TIM_Base_SetConfig+0x148>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d108      	bne.n	8005fc0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005fb4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	68db      	ldr	r3, [r3, #12]
 8005fba:	68fa      	ldr	r2, [r7, #12]
 8005fbc:	4313      	orrs	r3, r2
 8005fbe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	695b      	ldr	r3, [r3, #20]
 8005fca:	4313      	orrs	r3, r2
 8005fcc:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	689a      	ldr	r2, [r3, #8]
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	681a      	ldr	r2, [r3, #0]
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	4a0e      	ldr	r2, [pc, #56]	@ (800601c <TIM_Base_SetConfig+0x120>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d003      	beq.n	8005fee <TIM_Base_SetConfig+0xf2>
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	4a10      	ldr	r2, [pc, #64]	@ (800602c <TIM_Base_SetConfig+0x130>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d103      	bne.n	8005ff6 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	691a      	ldr	r2, [r3, #16]
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f043 0204 	orr.w	r2, r3, #4
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2201      	movs	r2, #1
 8006006:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	68fa      	ldr	r2, [r7, #12]
 800600c:	601a      	str	r2, [r3, #0]
}
 800600e:	bf00      	nop
 8006010:	3714      	adds	r7, #20
 8006012:	46bd      	mov	sp, r7
 8006014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006018:	4770      	bx	lr
 800601a:	bf00      	nop
 800601c:	40010000 	.word	0x40010000
 8006020:	40000400 	.word	0x40000400
 8006024:	40000800 	.word	0x40000800
 8006028:	40000c00 	.word	0x40000c00
 800602c:	40010400 	.word	0x40010400
 8006030:	40014000 	.word	0x40014000
 8006034:	40014400 	.word	0x40014400
 8006038:	40014800 	.word	0x40014800
 800603c:	40001800 	.word	0x40001800
 8006040:	40001c00 	.word	0x40001c00
 8006044:	40002000 	.word	0x40002000

08006048 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006048:	b480      	push	{r7}
 800604a:	b087      	sub	sp, #28
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
 8006050:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6a1b      	ldr	r3, [r3, #32]
 8006056:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	6a1b      	ldr	r3, [r3, #32]
 800605c:	f023 0201 	bic.w	r2, r3, #1
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	685b      	ldr	r3, [r3, #4]
 8006068:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	699b      	ldr	r3, [r3, #24]
 800606e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006076:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	f023 0303 	bic.w	r3, r3, #3
 800607e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	68fa      	ldr	r2, [r7, #12]
 8006086:	4313      	orrs	r3, r2
 8006088:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800608a:	697b      	ldr	r3, [r7, #20]
 800608c:	f023 0302 	bic.w	r3, r3, #2
 8006090:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	689b      	ldr	r3, [r3, #8]
 8006096:	697a      	ldr	r2, [r7, #20]
 8006098:	4313      	orrs	r3, r2
 800609a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	4a20      	ldr	r2, [pc, #128]	@ (8006120 <TIM_OC1_SetConfig+0xd8>)
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d003      	beq.n	80060ac <TIM_OC1_SetConfig+0x64>
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	4a1f      	ldr	r2, [pc, #124]	@ (8006124 <TIM_OC1_SetConfig+0xdc>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d10c      	bne.n	80060c6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80060ac:	697b      	ldr	r3, [r7, #20]
 80060ae:	f023 0308 	bic.w	r3, r3, #8
 80060b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	68db      	ldr	r3, [r3, #12]
 80060b8:	697a      	ldr	r2, [r7, #20]
 80060ba:	4313      	orrs	r3, r2
 80060bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80060be:	697b      	ldr	r3, [r7, #20]
 80060c0:	f023 0304 	bic.w	r3, r3, #4
 80060c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	4a15      	ldr	r2, [pc, #84]	@ (8006120 <TIM_OC1_SetConfig+0xd8>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d003      	beq.n	80060d6 <TIM_OC1_SetConfig+0x8e>
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	4a14      	ldr	r2, [pc, #80]	@ (8006124 <TIM_OC1_SetConfig+0xdc>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d111      	bne.n	80060fa <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80060d6:	693b      	ldr	r3, [r7, #16]
 80060d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80060dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80060de:	693b      	ldr	r3, [r7, #16]
 80060e0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80060e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	695b      	ldr	r3, [r3, #20]
 80060ea:	693a      	ldr	r2, [r7, #16]
 80060ec:	4313      	orrs	r3, r2
 80060ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	699b      	ldr	r3, [r3, #24]
 80060f4:	693a      	ldr	r2, [r7, #16]
 80060f6:	4313      	orrs	r3, r2
 80060f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	693a      	ldr	r2, [r7, #16]
 80060fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	68fa      	ldr	r2, [r7, #12]
 8006104:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	685a      	ldr	r2, [r3, #4]
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	697a      	ldr	r2, [r7, #20]
 8006112:	621a      	str	r2, [r3, #32]
}
 8006114:	bf00      	nop
 8006116:	371c      	adds	r7, #28
 8006118:	46bd      	mov	sp, r7
 800611a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611e:	4770      	bx	lr
 8006120:	40010000 	.word	0x40010000
 8006124:	40010400 	.word	0x40010400

08006128 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006128:	b480      	push	{r7}
 800612a:	b087      	sub	sp, #28
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
 8006130:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6a1b      	ldr	r3, [r3, #32]
 8006136:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6a1b      	ldr	r3, [r3, #32]
 800613c:	f023 0210 	bic.w	r2, r3, #16
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	685b      	ldr	r3, [r3, #4]
 8006148:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	699b      	ldr	r3, [r3, #24]
 800614e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006156:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800615e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	021b      	lsls	r3, r3, #8
 8006166:	68fa      	ldr	r2, [r7, #12]
 8006168:	4313      	orrs	r3, r2
 800616a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800616c:	697b      	ldr	r3, [r7, #20]
 800616e:	f023 0320 	bic.w	r3, r3, #32
 8006172:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	689b      	ldr	r3, [r3, #8]
 8006178:	011b      	lsls	r3, r3, #4
 800617a:	697a      	ldr	r2, [r7, #20]
 800617c:	4313      	orrs	r3, r2
 800617e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	4a22      	ldr	r2, [pc, #136]	@ (800620c <TIM_OC2_SetConfig+0xe4>)
 8006184:	4293      	cmp	r3, r2
 8006186:	d003      	beq.n	8006190 <TIM_OC2_SetConfig+0x68>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	4a21      	ldr	r2, [pc, #132]	@ (8006210 <TIM_OC2_SetConfig+0xe8>)
 800618c:	4293      	cmp	r3, r2
 800618e:	d10d      	bne.n	80061ac <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006190:	697b      	ldr	r3, [r7, #20]
 8006192:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006196:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	68db      	ldr	r3, [r3, #12]
 800619c:	011b      	lsls	r3, r3, #4
 800619e:	697a      	ldr	r2, [r7, #20]
 80061a0:	4313      	orrs	r3, r2
 80061a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80061a4:	697b      	ldr	r3, [r7, #20]
 80061a6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80061aa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	4a17      	ldr	r2, [pc, #92]	@ (800620c <TIM_OC2_SetConfig+0xe4>)
 80061b0:	4293      	cmp	r3, r2
 80061b2:	d003      	beq.n	80061bc <TIM_OC2_SetConfig+0x94>
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	4a16      	ldr	r2, [pc, #88]	@ (8006210 <TIM_OC2_SetConfig+0xe8>)
 80061b8:	4293      	cmp	r3, r2
 80061ba:	d113      	bne.n	80061e4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80061bc:	693b      	ldr	r3, [r7, #16]
 80061be:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80061c2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80061c4:	693b      	ldr	r3, [r7, #16]
 80061c6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80061ca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	695b      	ldr	r3, [r3, #20]
 80061d0:	009b      	lsls	r3, r3, #2
 80061d2:	693a      	ldr	r2, [r7, #16]
 80061d4:	4313      	orrs	r3, r2
 80061d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	699b      	ldr	r3, [r3, #24]
 80061dc:	009b      	lsls	r3, r3, #2
 80061de:	693a      	ldr	r2, [r7, #16]
 80061e0:	4313      	orrs	r3, r2
 80061e2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	693a      	ldr	r2, [r7, #16]
 80061e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	68fa      	ldr	r2, [r7, #12]
 80061ee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	685a      	ldr	r2, [r3, #4]
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	697a      	ldr	r2, [r7, #20]
 80061fc:	621a      	str	r2, [r3, #32]
}
 80061fe:	bf00      	nop
 8006200:	371c      	adds	r7, #28
 8006202:	46bd      	mov	sp, r7
 8006204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006208:	4770      	bx	lr
 800620a:	bf00      	nop
 800620c:	40010000 	.word	0x40010000
 8006210:	40010400 	.word	0x40010400

08006214 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006214:	b480      	push	{r7}
 8006216:	b087      	sub	sp, #28
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
 800621c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6a1b      	ldr	r3, [r3, #32]
 8006222:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6a1b      	ldr	r3, [r3, #32]
 8006228:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	685b      	ldr	r3, [r3, #4]
 8006234:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	69db      	ldr	r3, [r3, #28]
 800623a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006242:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	f023 0303 	bic.w	r3, r3, #3
 800624a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	68fa      	ldr	r2, [r7, #12]
 8006252:	4313      	orrs	r3, r2
 8006254:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006256:	697b      	ldr	r3, [r7, #20]
 8006258:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800625c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	689b      	ldr	r3, [r3, #8]
 8006262:	021b      	lsls	r3, r3, #8
 8006264:	697a      	ldr	r2, [r7, #20]
 8006266:	4313      	orrs	r3, r2
 8006268:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	4a21      	ldr	r2, [pc, #132]	@ (80062f4 <TIM_OC3_SetConfig+0xe0>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d003      	beq.n	800627a <TIM_OC3_SetConfig+0x66>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	4a20      	ldr	r2, [pc, #128]	@ (80062f8 <TIM_OC3_SetConfig+0xe4>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d10d      	bne.n	8006296 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800627a:	697b      	ldr	r3, [r7, #20]
 800627c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006280:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	68db      	ldr	r3, [r3, #12]
 8006286:	021b      	lsls	r3, r3, #8
 8006288:	697a      	ldr	r2, [r7, #20]
 800628a:	4313      	orrs	r3, r2
 800628c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800628e:	697b      	ldr	r3, [r7, #20]
 8006290:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006294:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	4a16      	ldr	r2, [pc, #88]	@ (80062f4 <TIM_OC3_SetConfig+0xe0>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d003      	beq.n	80062a6 <TIM_OC3_SetConfig+0x92>
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	4a15      	ldr	r2, [pc, #84]	@ (80062f8 <TIM_OC3_SetConfig+0xe4>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d113      	bne.n	80062ce <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80062a6:	693b      	ldr	r3, [r7, #16]
 80062a8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80062ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80062ae:	693b      	ldr	r3, [r7, #16]
 80062b0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80062b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	695b      	ldr	r3, [r3, #20]
 80062ba:	011b      	lsls	r3, r3, #4
 80062bc:	693a      	ldr	r2, [r7, #16]
 80062be:	4313      	orrs	r3, r2
 80062c0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	699b      	ldr	r3, [r3, #24]
 80062c6:	011b      	lsls	r3, r3, #4
 80062c8:	693a      	ldr	r2, [r7, #16]
 80062ca:	4313      	orrs	r3, r2
 80062cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	693a      	ldr	r2, [r7, #16]
 80062d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	68fa      	ldr	r2, [r7, #12]
 80062d8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	685a      	ldr	r2, [r3, #4]
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	697a      	ldr	r2, [r7, #20]
 80062e6:	621a      	str	r2, [r3, #32]
}
 80062e8:	bf00      	nop
 80062ea:	371c      	adds	r7, #28
 80062ec:	46bd      	mov	sp, r7
 80062ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f2:	4770      	bx	lr
 80062f4:	40010000 	.word	0x40010000
 80062f8:	40010400 	.word	0x40010400

080062fc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80062fc:	b480      	push	{r7}
 80062fe:	b087      	sub	sp, #28
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
 8006304:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6a1b      	ldr	r3, [r3, #32]
 800630a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6a1b      	ldr	r3, [r3, #32]
 8006310:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	685b      	ldr	r3, [r3, #4]
 800631c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	69db      	ldr	r3, [r3, #28]
 8006322:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800632a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006332:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	021b      	lsls	r3, r3, #8
 800633a:	68fa      	ldr	r2, [r7, #12]
 800633c:	4313      	orrs	r3, r2
 800633e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006340:	693b      	ldr	r3, [r7, #16]
 8006342:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006346:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	689b      	ldr	r3, [r3, #8]
 800634c:	031b      	lsls	r3, r3, #12
 800634e:	693a      	ldr	r2, [r7, #16]
 8006350:	4313      	orrs	r3, r2
 8006352:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	4a12      	ldr	r2, [pc, #72]	@ (80063a0 <TIM_OC4_SetConfig+0xa4>)
 8006358:	4293      	cmp	r3, r2
 800635a:	d003      	beq.n	8006364 <TIM_OC4_SetConfig+0x68>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	4a11      	ldr	r2, [pc, #68]	@ (80063a4 <TIM_OC4_SetConfig+0xa8>)
 8006360:	4293      	cmp	r3, r2
 8006362:	d109      	bne.n	8006378 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006364:	697b      	ldr	r3, [r7, #20]
 8006366:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800636a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	695b      	ldr	r3, [r3, #20]
 8006370:	019b      	lsls	r3, r3, #6
 8006372:	697a      	ldr	r2, [r7, #20]
 8006374:	4313      	orrs	r3, r2
 8006376:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	697a      	ldr	r2, [r7, #20]
 800637c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	68fa      	ldr	r2, [r7, #12]
 8006382:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	685a      	ldr	r2, [r3, #4]
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	693a      	ldr	r2, [r7, #16]
 8006390:	621a      	str	r2, [r3, #32]
}
 8006392:	bf00      	nop
 8006394:	371c      	adds	r7, #28
 8006396:	46bd      	mov	sp, r7
 8006398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639c:	4770      	bx	lr
 800639e:	bf00      	nop
 80063a0:	40010000 	.word	0x40010000
 80063a4:	40010400 	.word	0x40010400

080063a8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80063a8:	b480      	push	{r7}
 80063aa:	b087      	sub	sp, #28
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	60f8      	str	r0, [r7, #12]
 80063b0:	60b9      	str	r1, [r7, #8]
 80063b2:	607a      	str	r2, [r7, #4]
 80063b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	6a1b      	ldr	r3, [r3, #32]
 80063ba:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	6a1b      	ldr	r3, [r3, #32]
 80063c0:	f023 0201 	bic.w	r2, r3, #1
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	699b      	ldr	r3, [r3, #24]
 80063cc:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	4a28      	ldr	r2, [pc, #160]	@ (8006474 <TIM_TI1_SetConfig+0xcc>)
 80063d2:	4293      	cmp	r3, r2
 80063d4:	d01b      	beq.n	800640e <TIM_TI1_SetConfig+0x66>
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80063dc:	d017      	beq.n	800640e <TIM_TI1_SetConfig+0x66>
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	4a25      	ldr	r2, [pc, #148]	@ (8006478 <TIM_TI1_SetConfig+0xd0>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d013      	beq.n	800640e <TIM_TI1_SetConfig+0x66>
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	4a24      	ldr	r2, [pc, #144]	@ (800647c <TIM_TI1_SetConfig+0xd4>)
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d00f      	beq.n	800640e <TIM_TI1_SetConfig+0x66>
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	4a23      	ldr	r2, [pc, #140]	@ (8006480 <TIM_TI1_SetConfig+0xd8>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d00b      	beq.n	800640e <TIM_TI1_SetConfig+0x66>
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	4a22      	ldr	r2, [pc, #136]	@ (8006484 <TIM_TI1_SetConfig+0xdc>)
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d007      	beq.n	800640e <TIM_TI1_SetConfig+0x66>
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	4a21      	ldr	r2, [pc, #132]	@ (8006488 <TIM_TI1_SetConfig+0xe0>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d003      	beq.n	800640e <TIM_TI1_SetConfig+0x66>
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	4a20      	ldr	r2, [pc, #128]	@ (800648c <TIM_TI1_SetConfig+0xe4>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d101      	bne.n	8006412 <TIM_TI1_SetConfig+0x6a>
 800640e:	2301      	movs	r3, #1
 8006410:	e000      	b.n	8006414 <TIM_TI1_SetConfig+0x6c>
 8006412:	2300      	movs	r3, #0
 8006414:	2b00      	cmp	r3, #0
 8006416:	d008      	beq.n	800642a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006418:	697b      	ldr	r3, [r7, #20]
 800641a:	f023 0303 	bic.w	r3, r3, #3
 800641e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006420:	697a      	ldr	r2, [r7, #20]
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	4313      	orrs	r3, r2
 8006426:	617b      	str	r3, [r7, #20]
 8006428:	e003      	b.n	8006432 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800642a:	697b      	ldr	r3, [r7, #20]
 800642c:	f043 0301 	orr.w	r3, r3, #1
 8006430:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006432:	697b      	ldr	r3, [r7, #20]
 8006434:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006438:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	011b      	lsls	r3, r3, #4
 800643e:	b2db      	uxtb	r3, r3
 8006440:	697a      	ldr	r2, [r7, #20]
 8006442:	4313      	orrs	r3, r2
 8006444:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006446:	693b      	ldr	r3, [r7, #16]
 8006448:	f023 030a 	bic.w	r3, r3, #10
 800644c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800644e:	68bb      	ldr	r3, [r7, #8]
 8006450:	f003 030a 	and.w	r3, r3, #10
 8006454:	693a      	ldr	r2, [r7, #16]
 8006456:	4313      	orrs	r3, r2
 8006458:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	697a      	ldr	r2, [r7, #20]
 800645e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	693a      	ldr	r2, [r7, #16]
 8006464:	621a      	str	r2, [r3, #32]
}
 8006466:	bf00      	nop
 8006468:	371c      	adds	r7, #28
 800646a:	46bd      	mov	sp, r7
 800646c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006470:	4770      	bx	lr
 8006472:	bf00      	nop
 8006474:	40010000 	.word	0x40010000
 8006478:	40000400 	.word	0x40000400
 800647c:	40000800 	.word	0x40000800
 8006480:	40000c00 	.word	0x40000c00
 8006484:	40010400 	.word	0x40010400
 8006488:	40014000 	.word	0x40014000
 800648c:	40001800 	.word	0x40001800

08006490 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006490:	b480      	push	{r7}
 8006492:	b087      	sub	sp, #28
 8006494:	af00      	add	r7, sp, #0
 8006496:	60f8      	str	r0, [r7, #12]
 8006498:	60b9      	str	r1, [r7, #8]
 800649a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	6a1b      	ldr	r3, [r3, #32]
 80064a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	6a1b      	ldr	r3, [r3, #32]
 80064a6:	f023 0201 	bic.w	r2, r3, #1
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	699b      	ldr	r3, [r3, #24]
 80064b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80064b4:	693b      	ldr	r3, [r7, #16]
 80064b6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80064ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	011b      	lsls	r3, r3, #4
 80064c0:	693a      	ldr	r2, [r7, #16]
 80064c2:	4313      	orrs	r3, r2
 80064c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80064c6:	697b      	ldr	r3, [r7, #20]
 80064c8:	f023 030a 	bic.w	r3, r3, #10
 80064cc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80064ce:	697a      	ldr	r2, [r7, #20]
 80064d0:	68bb      	ldr	r3, [r7, #8]
 80064d2:	4313      	orrs	r3, r2
 80064d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	693a      	ldr	r2, [r7, #16]
 80064da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	697a      	ldr	r2, [r7, #20]
 80064e0:	621a      	str	r2, [r3, #32]
}
 80064e2:	bf00      	nop
 80064e4:	371c      	adds	r7, #28
 80064e6:	46bd      	mov	sp, r7
 80064e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ec:	4770      	bx	lr

080064ee <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80064ee:	b480      	push	{r7}
 80064f0:	b087      	sub	sp, #28
 80064f2:	af00      	add	r7, sp, #0
 80064f4:	60f8      	str	r0, [r7, #12]
 80064f6:	60b9      	str	r1, [r7, #8]
 80064f8:	607a      	str	r2, [r7, #4]
 80064fa:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	6a1b      	ldr	r3, [r3, #32]
 8006500:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	6a1b      	ldr	r3, [r3, #32]
 8006506:	f023 0210 	bic.w	r2, r3, #16
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	699b      	ldr	r3, [r3, #24]
 8006512:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006514:	693b      	ldr	r3, [r7, #16]
 8006516:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800651a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	021b      	lsls	r3, r3, #8
 8006520:	693a      	ldr	r2, [r7, #16]
 8006522:	4313      	orrs	r3, r2
 8006524:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006526:	693b      	ldr	r3, [r7, #16]
 8006528:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800652c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	031b      	lsls	r3, r3, #12
 8006532:	b29b      	uxth	r3, r3
 8006534:	693a      	ldr	r2, [r7, #16]
 8006536:	4313      	orrs	r3, r2
 8006538:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800653a:	697b      	ldr	r3, [r7, #20]
 800653c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006540:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006542:	68bb      	ldr	r3, [r7, #8]
 8006544:	011b      	lsls	r3, r3, #4
 8006546:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800654a:	697a      	ldr	r2, [r7, #20]
 800654c:	4313      	orrs	r3, r2
 800654e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	693a      	ldr	r2, [r7, #16]
 8006554:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	697a      	ldr	r2, [r7, #20]
 800655a:	621a      	str	r2, [r3, #32]
}
 800655c:	bf00      	nop
 800655e:	371c      	adds	r7, #28
 8006560:	46bd      	mov	sp, r7
 8006562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006566:	4770      	bx	lr

08006568 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006568:	b480      	push	{r7}
 800656a:	b087      	sub	sp, #28
 800656c:	af00      	add	r7, sp, #0
 800656e:	60f8      	str	r0, [r7, #12]
 8006570:	60b9      	str	r1, [r7, #8]
 8006572:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	6a1b      	ldr	r3, [r3, #32]
 8006578:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	6a1b      	ldr	r3, [r3, #32]
 800657e:	f023 0210 	bic.w	r2, r3, #16
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	699b      	ldr	r3, [r3, #24]
 800658a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800658c:	693b      	ldr	r3, [r7, #16]
 800658e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006592:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	031b      	lsls	r3, r3, #12
 8006598:	693a      	ldr	r2, [r7, #16]
 800659a:	4313      	orrs	r3, r2
 800659c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800659e:	697b      	ldr	r3, [r7, #20]
 80065a0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80065a4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80065a6:	68bb      	ldr	r3, [r7, #8]
 80065a8:	011b      	lsls	r3, r3, #4
 80065aa:	697a      	ldr	r2, [r7, #20]
 80065ac:	4313      	orrs	r3, r2
 80065ae:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	693a      	ldr	r2, [r7, #16]
 80065b4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	697a      	ldr	r2, [r7, #20]
 80065ba:	621a      	str	r2, [r3, #32]
}
 80065bc:	bf00      	nop
 80065be:	371c      	adds	r7, #28
 80065c0:	46bd      	mov	sp, r7
 80065c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c6:	4770      	bx	lr

080065c8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80065c8:	b480      	push	{r7}
 80065ca:	b087      	sub	sp, #28
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	60f8      	str	r0, [r7, #12]
 80065d0:	60b9      	str	r1, [r7, #8]
 80065d2:	607a      	str	r2, [r7, #4]
 80065d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	6a1b      	ldr	r3, [r3, #32]
 80065da:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	6a1b      	ldr	r3, [r3, #32]
 80065e0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	69db      	ldr	r3, [r3, #28]
 80065ec:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80065ee:	693b      	ldr	r3, [r7, #16]
 80065f0:	f023 0303 	bic.w	r3, r3, #3
 80065f4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80065f6:	693a      	ldr	r2, [r7, #16]
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	4313      	orrs	r3, r2
 80065fc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80065fe:	693b      	ldr	r3, [r7, #16]
 8006600:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006604:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	011b      	lsls	r3, r3, #4
 800660a:	b2db      	uxtb	r3, r3
 800660c:	693a      	ldr	r2, [r7, #16]
 800660e:	4313      	orrs	r3, r2
 8006610:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006612:	697b      	ldr	r3, [r7, #20]
 8006614:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8006618:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800661a:	68bb      	ldr	r3, [r7, #8]
 800661c:	021b      	lsls	r3, r3, #8
 800661e:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8006622:	697a      	ldr	r2, [r7, #20]
 8006624:	4313      	orrs	r3, r2
 8006626:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	693a      	ldr	r2, [r7, #16]
 800662c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	697a      	ldr	r2, [r7, #20]
 8006632:	621a      	str	r2, [r3, #32]
}
 8006634:	bf00      	nop
 8006636:	371c      	adds	r7, #28
 8006638:	46bd      	mov	sp, r7
 800663a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663e:	4770      	bx	lr

08006640 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006640:	b480      	push	{r7}
 8006642:	b087      	sub	sp, #28
 8006644:	af00      	add	r7, sp, #0
 8006646:	60f8      	str	r0, [r7, #12]
 8006648:	60b9      	str	r1, [r7, #8]
 800664a:	607a      	str	r2, [r7, #4]
 800664c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	6a1b      	ldr	r3, [r3, #32]
 8006652:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	6a1b      	ldr	r3, [r3, #32]
 8006658:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	69db      	ldr	r3, [r3, #28]
 8006664:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006666:	693b      	ldr	r3, [r7, #16]
 8006668:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800666c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	021b      	lsls	r3, r3, #8
 8006672:	693a      	ldr	r2, [r7, #16]
 8006674:	4313      	orrs	r3, r2
 8006676:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006678:	693b      	ldr	r3, [r7, #16]
 800667a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800667e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	031b      	lsls	r3, r3, #12
 8006684:	b29b      	uxth	r3, r3
 8006686:	693a      	ldr	r2, [r7, #16]
 8006688:	4313      	orrs	r3, r2
 800668a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800668c:	697b      	ldr	r3, [r7, #20]
 800668e:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8006692:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006694:	68bb      	ldr	r3, [r7, #8]
 8006696:	031b      	lsls	r3, r3, #12
 8006698:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 800669c:	697a      	ldr	r2, [r7, #20]
 800669e:	4313      	orrs	r3, r2
 80066a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	693a      	ldr	r2, [r7, #16]
 80066a6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	697a      	ldr	r2, [r7, #20]
 80066ac:	621a      	str	r2, [r3, #32]
}
 80066ae:	bf00      	nop
 80066b0:	371c      	adds	r7, #28
 80066b2:	46bd      	mov	sp, r7
 80066b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b8:	4770      	bx	lr

080066ba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80066ba:	b480      	push	{r7}
 80066bc:	b085      	sub	sp, #20
 80066be:	af00      	add	r7, sp, #0
 80066c0:	6078      	str	r0, [r7, #4]
 80066c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	689b      	ldr	r3, [r3, #8]
 80066c8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066d0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80066d2:	683a      	ldr	r2, [r7, #0]
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	4313      	orrs	r3, r2
 80066d8:	f043 0307 	orr.w	r3, r3, #7
 80066dc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	68fa      	ldr	r2, [r7, #12]
 80066e2:	609a      	str	r2, [r3, #8]
}
 80066e4:	bf00      	nop
 80066e6:	3714      	adds	r7, #20
 80066e8:	46bd      	mov	sp, r7
 80066ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ee:	4770      	bx	lr

080066f0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80066f0:	b480      	push	{r7}
 80066f2:	b087      	sub	sp, #28
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	60f8      	str	r0, [r7, #12]
 80066f8:	60b9      	str	r1, [r7, #8]
 80066fa:	607a      	str	r2, [r7, #4]
 80066fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	689b      	ldr	r3, [r3, #8]
 8006702:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006704:	697b      	ldr	r3, [r7, #20]
 8006706:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800670a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	021a      	lsls	r2, r3, #8
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	431a      	orrs	r2, r3
 8006714:	68bb      	ldr	r3, [r7, #8]
 8006716:	4313      	orrs	r3, r2
 8006718:	697a      	ldr	r2, [r7, #20]
 800671a:	4313      	orrs	r3, r2
 800671c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	697a      	ldr	r2, [r7, #20]
 8006722:	609a      	str	r2, [r3, #8]
}
 8006724:	bf00      	nop
 8006726:	371c      	adds	r7, #28
 8006728:	46bd      	mov	sp, r7
 800672a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672e:	4770      	bx	lr

08006730 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006730:	b480      	push	{r7}
 8006732:	b087      	sub	sp, #28
 8006734:	af00      	add	r7, sp, #0
 8006736:	60f8      	str	r0, [r7, #12]
 8006738:	60b9      	str	r1, [r7, #8]
 800673a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800673c:	68bb      	ldr	r3, [r7, #8]
 800673e:	f003 031f 	and.w	r3, r3, #31
 8006742:	2201      	movs	r2, #1
 8006744:	fa02 f303 	lsl.w	r3, r2, r3
 8006748:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	6a1a      	ldr	r2, [r3, #32]
 800674e:	697b      	ldr	r3, [r7, #20]
 8006750:	43db      	mvns	r3, r3
 8006752:	401a      	ands	r2, r3
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	6a1a      	ldr	r2, [r3, #32]
 800675c:	68bb      	ldr	r3, [r7, #8]
 800675e:	f003 031f 	and.w	r3, r3, #31
 8006762:	6879      	ldr	r1, [r7, #4]
 8006764:	fa01 f303 	lsl.w	r3, r1, r3
 8006768:	431a      	orrs	r2, r3
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	621a      	str	r2, [r3, #32]
}
 800676e:	bf00      	nop
 8006770:	371c      	adds	r7, #28
 8006772:	46bd      	mov	sp, r7
 8006774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006778:	4770      	bx	lr
	...

0800677c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800677c:	b480      	push	{r7}
 800677e:	b085      	sub	sp, #20
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
 8006784:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800678c:	2b01      	cmp	r3, #1
 800678e:	d101      	bne.n	8006794 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006790:	2302      	movs	r3, #2
 8006792:	e05a      	b.n	800684a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2201      	movs	r2, #1
 8006798:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2202      	movs	r2, #2
 80067a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	685b      	ldr	r3, [r3, #4]
 80067aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	689b      	ldr	r3, [r3, #8]
 80067b2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80067ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	68fa      	ldr	r2, [r7, #12]
 80067c2:	4313      	orrs	r3, r2
 80067c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	68fa      	ldr	r2, [r7, #12]
 80067cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	4a21      	ldr	r2, [pc, #132]	@ (8006858 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80067d4:	4293      	cmp	r3, r2
 80067d6:	d022      	beq.n	800681e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80067e0:	d01d      	beq.n	800681e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	4a1d      	ldr	r2, [pc, #116]	@ (800685c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d018      	beq.n	800681e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	4a1b      	ldr	r2, [pc, #108]	@ (8006860 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d013      	beq.n	800681e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	4a1a      	ldr	r2, [pc, #104]	@ (8006864 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80067fc:	4293      	cmp	r3, r2
 80067fe:	d00e      	beq.n	800681e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	4a18      	ldr	r2, [pc, #96]	@ (8006868 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006806:	4293      	cmp	r3, r2
 8006808:	d009      	beq.n	800681e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	4a17      	ldr	r2, [pc, #92]	@ (800686c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006810:	4293      	cmp	r3, r2
 8006812:	d004      	beq.n	800681e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	4a15      	ldr	r2, [pc, #84]	@ (8006870 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800681a:	4293      	cmp	r3, r2
 800681c:	d10c      	bne.n	8006838 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800681e:	68bb      	ldr	r3, [r7, #8]
 8006820:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006824:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	685b      	ldr	r3, [r3, #4]
 800682a:	68ba      	ldr	r2, [r7, #8]
 800682c:	4313      	orrs	r3, r2
 800682e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	68ba      	ldr	r2, [r7, #8]
 8006836:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2201      	movs	r2, #1
 800683c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2200      	movs	r2, #0
 8006844:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006848:	2300      	movs	r3, #0
}
 800684a:	4618      	mov	r0, r3
 800684c:	3714      	adds	r7, #20
 800684e:	46bd      	mov	sp, r7
 8006850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006854:	4770      	bx	lr
 8006856:	bf00      	nop
 8006858:	40010000 	.word	0x40010000
 800685c:	40000400 	.word	0x40000400
 8006860:	40000800 	.word	0x40000800
 8006864:	40000c00 	.word	0x40000c00
 8006868:	40010400 	.word	0x40010400
 800686c:	40014000 	.word	0x40014000
 8006870:	40001800 	.word	0x40001800

08006874 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006874:	b480      	push	{r7}
 8006876:	b083      	sub	sp, #12
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800687c:	bf00      	nop
 800687e:	370c      	adds	r7, #12
 8006880:	46bd      	mov	sp, r7
 8006882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006886:	4770      	bx	lr

08006888 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006888:	b480      	push	{r7}
 800688a:	b083      	sub	sp, #12
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006890:	bf00      	nop
 8006892:	370c      	adds	r7, #12
 8006894:	46bd      	mov	sp, r7
 8006896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689a:	4770      	bx	lr

0800689c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800689c:	b580      	push	{r7, lr}
 800689e:	b082      	sub	sp, #8
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d101      	bne.n	80068ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80068aa:	2301      	movs	r3, #1
 80068ac:	e042      	b.n	8006934 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80068b4:	b2db      	uxtb	r3, r3
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d106      	bne.n	80068c8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2200      	movs	r2, #0
 80068be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80068c2:	6878      	ldr	r0, [r7, #4]
 80068c4:	f7fc fdbc 	bl	8003440 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2224      	movs	r2, #36	@ 0x24
 80068cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	68da      	ldr	r2, [r3, #12]
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80068de:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80068e0:	6878      	ldr	r0, [r7, #4]
 80068e2:	f000 fdd3 	bl	800748c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	691a      	ldr	r2, [r3, #16]
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80068f4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	695a      	ldr	r2, [r3, #20]
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006904:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	68da      	ldr	r2, [r3, #12]
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006914:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2200      	movs	r2, #0
 800691a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2220      	movs	r2, #32
 8006920:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2220      	movs	r2, #32
 8006928:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2200      	movs	r2, #0
 8006930:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006932:	2300      	movs	r3, #0
}
 8006934:	4618      	mov	r0, r3
 8006936:	3708      	adds	r7, #8
 8006938:	46bd      	mov	sp, r7
 800693a:	bd80      	pop	{r7, pc}

0800693c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800693c:	b580      	push	{r7, lr}
 800693e:	b08a      	sub	sp, #40	@ 0x28
 8006940:	af02      	add	r7, sp, #8
 8006942:	60f8      	str	r0, [r7, #12]
 8006944:	60b9      	str	r1, [r7, #8]
 8006946:	603b      	str	r3, [r7, #0]
 8006948:	4613      	mov	r3, r2
 800694a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800694c:	2300      	movs	r3, #0
 800694e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006956:	b2db      	uxtb	r3, r3
 8006958:	2b20      	cmp	r3, #32
 800695a:	d175      	bne.n	8006a48 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800695c:	68bb      	ldr	r3, [r7, #8]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d002      	beq.n	8006968 <HAL_UART_Transmit+0x2c>
 8006962:	88fb      	ldrh	r3, [r7, #6]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d101      	bne.n	800696c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006968:	2301      	movs	r3, #1
 800696a:	e06e      	b.n	8006a4a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	2200      	movs	r2, #0
 8006970:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	2221      	movs	r2, #33	@ 0x21
 8006976:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800697a:	f7fc fe45 	bl	8003608 <HAL_GetTick>
 800697e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	88fa      	ldrh	r2, [r7, #6]
 8006984:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	88fa      	ldrh	r2, [r7, #6]
 800698a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	689b      	ldr	r3, [r3, #8]
 8006990:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006994:	d108      	bne.n	80069a8 <HAL_UART_Transmit+0x6c>
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	691b      	ldr	r3, [r3, #16]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d104      	bne.n	80069a8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800699e:	2300      	movs	r3, #0
 80069a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80069a2:	68bb      	ldr	r3, [r7, #8]
 80069a4:	61bb      	str	r3, [r7, #24]
 80069a6:	e003      	b.n	80069b0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80069a8:	68bb      	ldr	r3, [r7, #8]
 80069aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80069ac:	2300      	movs	r3, #0
 80069ae:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80069b0:	e02e      	b.n	8006a10 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	9300      	str	r3, [sp, #0]
 80069b6:	697b      	ldr	r3, [r7, #20]
 80069b8:	2200      	movs	r2, #0
 80069ba:	2180      	movs	r1, #128	@ 0x80
 80069bc:	68f8      	ldr	r0, [r7, #12]
 80069be:	f000 fb37 	bl	8007030 <UART_WaitOnFlagUntilTimeout>
 80069c2:	4603      	mov	r3, r0
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d005      	beq.n	80069d4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	2220      	movs	r2, #32
 80069cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80069d0:	2303      	movs	r3, #3
 80069d2:	e03a      	b.n	8006a4a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80069d4:	69fb      	ldr	r3, [r7, #28]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d10b      	bne.n	80069f2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80069da:	69bb      	ldr	r3, [r7, #24]
 80069dc:	881b      	ldrh	r3, [r3, #0]
 80069de:	461a      	mov	r2, r3
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80069e8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80069ea:	69bb      	ldr	r3, [r7, #24]
 80069ec:	3302      	adds	r3, #2
 80069ee:	61bb      	str	r3, [r7, #24]
 80069f0:	e007      	b.n	8006a02 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80069f2:	69fb      	ldr	r3, [r7, #28]
 80069f4:	781a      	ldrb	r2, [r3, #0]
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80069fc:	69fb      	ldr	r3, [r7, #28]
 80069fe:	3301      	adds	r3, #1
 8006a00:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006a06:	b29b      	uxth	r3, r3
 8006a08:	3b01      	subs	r3, #1
 8006a0a:	b29a      	uxth	r2, r3
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006a14:	b29b      	uxth	r3, r3
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d1cb      	bne.n	80069b2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	9300      	str	r3, [sp, #0]
 8006a1e:	697b      	ldr	r3, [r7, #20]
 8006a20:	2200      	movs	r2, #0
 8006a22:	2140      	movs	r1, #64	@ 0x40
 8006a24:	68f8      	ldr	r0, [r7, #12]
 8006a26:	f000 fb03 	bl	8007030 <UART_WaitOnFlagUntilTimeout>
 8006a2a:	4603      	mov	r3, r0
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d005      	beq.n	8006a3c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	2220      	movs	r2, #32
 8006a34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8006a38:	2303      	movs	r3, #3
 8006a3a:	e006      	b.n	8006a4a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	2220      	movs	r2, #32
 8006a40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8006a44:	2300      	movs	r3, #0
 8006a46:	e000      	b.n	8006a4a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006a48:	2302      	movs	r3, #2
  }
}
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	3720      	adds	r7, #32
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	bd80      	pop	{r7, pc}

08006a52 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006a52:	b580      	push	{r7, lr}
 8006a54:	b084      	sub	sp, #16
 8006a56:	af00      	add	r7, sp, #0
 8006a58:	60f8      	str	r0, [r7, #12]
 8006a5a:	60b9      	str	r1, [r7, #8]
 8006a5c:	4613      	mov	r3, r2
 8006a5e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006a66:	b2db      	uxtb	r3, r3
 8006a68:	2b20      	cmp	r3, #32
 8006a6a:	d112      	bne.n	8006a92 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a6c:	68bb      	ldr	r3, [r7, #8]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d002      	beq.n	8006a78 <HAL_UART_Receive_IT+0x26>
 8006a72:	88fb      	ldrh	r3, [r7, #6]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d101      	bne.n	8006a7c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006a78:	2301      	movs	r3, #1
 8006a7a:	e00b      	b.n	8006a94 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	2200      	movs	r2, #0
 8006a80:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006a82:	88fb      	ldrh	r3, [r7, #6]
 8006a84:	461a      	mov	r2, r3
 8006a86:	68b9      	ldr	r1, [r7, #8]
 8006a88:	68f8      	ldr	r0, [r7, #12]
 8006a8a:	f000 fb2a 	bl	80070e2 <UART_Start_Receive_IT>
 8006a8e:	4603      	mov	r3, r0
 8006a90:	e000      	b.n	8006a94 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8006a92:	2302      	movs	r3, #2
  }
}
 8006a94:	4618      	mov	r0, r3
 8006a96:	3710      	adds	r7, #16
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	bd80      	pop	{r7, pc}

08006a9c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b0ba      	sub	sp, #232	@ 0xe8
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	68db      	ldr	r3, [r3, #12]
 8006ab4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	695b      	ldr	r3, [r3, #20]
 8006abe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006ac8:	2300      	movs	r3, #0
 8006aca:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006ace:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ad2:	f003 030f 	and.w	r3, r3, #15
 8006ad6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8006ada:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d10f      	bne.n	8006b02 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006ae2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ae6:	f003 0320 	and.w	r3, r3, #32
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d009      	beq.n	8006b02 <HAL_UART_IRQHandler+0x66>
 8006aee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006af2:	f003 0320 	and.w	r3, r3, #32
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d003      	beq.n	8006b02 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006afa:	6878      	ldr	r0, [r7, #4]
 8006afc:	f000 fc07 	bl	800730e <UART_Receive_IT>
      return;
 8006b00:	e273      	b.n	8006fea <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006b02:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	f000 80de 	beq.w	8006cc8 <HAL_UART_IRQHandler+0x22c>
 8006b0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006b10:	f003 0301 	and.w	r3, r3, #1
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d106      	bne.n	8006b26 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006b18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b1c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	f000 80d1 	beq.w	8006cc8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006b26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b2a:	f003 0301 	and.w	r3, r3, #1
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d00b      	beq.n	8006b4a <HAL_UART_IRQHandler+0xae>
 8006b32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d005      	beq.n	8006b4a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b42:	f043 0201 	orr.w	r2, r3, #1
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006b4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b4e:	f003 0304 	and.w	r3, r3, #4
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d00b      	beq.n	8006b6e <HAL_UART_IRQHandler+0xd2>
 8006b56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006b5a:	f003 0301 	and.w	r3, r3, #1
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d005      	beq.n	8006b6e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b66:	f043 0202 	orr.w	r2, r3, #2
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006b6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b72:	f003 0302 	and.w	r3, r3, #2
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d00b      	beq.n	8006b92 <HAL_UART_IRQHandler+0xf6>
 8006b7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006b7e:	f003 0301 	and.w	r3, r3, #1
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d005      	beq.n	8006b92 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b8a:	f043 0204 	orr.w	r2, r3, #4
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006b92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b96:	f003 0308 	and.w	r3, r3, #8
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d011      	beq.n	8006bc2 <HAL_UART_IRQHandler+0x126>
 8006b9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006ba2:	f003 0320 	and.w	r3, r3, #32
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d105      	bne.n	8006bb6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006baa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006bae:	f003 0301 	and.w	r3, r3, #1
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d005      	beq.n	8006bc2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006bba:	f043 0208 	orr.w	r2, r3, #8
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	f000 820a 	beq.w	8006fe0 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006bcc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006bd0:	f003 0320 	and.w	r3, r3, #32
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d008      	beq.n	8006bea <HAL_UART_IRQHandler+0x14e>
 8006bd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006bdc:	f003 0320 	and.w	r3, r3, #32
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d002      	beq.n	8006bea <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006be4:	6878      	ldr	r0, [r7, #4]
 8006be6:	f000 fb92 	bl	800730e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	695b      	ldr	r3, [r3, #20]
 8006bf0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006bf4:	2b40      	cmp	r3, #64	@ 0x40
 8006bf6:	bf0c      	ite	eq
 8006bf8:	2301      	moveq	r3, #1
 8006bfa:	2300      	movne	r3, #0
 8006bfc:	b2db      	uxtb	r3, r3
 8006bfe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c06:	f003 0308 	and.w	r3, r3, #8
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d103      	bne.n	8006c16 <HAL_UART_IRQHandler+0x17a>
 8006c0e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d04f      	beq.n	8006cb6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006c16:	6878      	ldr	r0, [r7, #4]
 8006c18:	f000 fa9d 	bl	8007156 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	695b      	ldr	r3, [r3, #20]
 8006c22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c26:	2b40      	cmp	r3, #64	@ 0x40
 8006c28:	d141      	bne.n	8006cae <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	3314      	adds	r3, #20
 8006c30:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c34:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006c38:	e853 3f00 	ldrex	r3, [r3]
 8006c3c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006c40:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006c44:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006c48:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	3314      	adds	r3, #20
 8006c52:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006c56:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006c5a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c5e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006c62:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006c66:	e841 2300 	strex	r3, r2, [r1]
 8006c6a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006c6e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d1d9      	bne.n	8006c2a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d013      	beq.n	8006ca6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c82:	4a8a      	ldr	r2, [pc, #552]	@ (8006eac <HAL_UART_IRQHandler+0x410>)
 8006c84:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	f7fd fac9 	bl	8004222 <HAL_DMA_Abort_IT>
 8006c90:	4603      	mov	r3, r0
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d016      	beq.n	8006cc4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c9c:	687a      	ldr	r2, [r7, #4]
 8006c9e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006ca0:	4610      	mov	r0, r2
 8006ca2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ca4:	e00e      	b.n	8006cc4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006ca6:	6878      	ldr	r0, [r7, #4]
 8006ca8:	f000 f9ac 	bl	8007004 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cac:	e00a      	b.n	8006cc4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006cae:	6878      	ldr	r0, [r7, #4]
 8006cb0:	f000 f9a8 	bl	8007004 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cb4:	e006      	b.n	8006cc4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006cb6:	6878      	ldr	r0, [r7, #4]
 8006cb8:	f000 f9a4 	bl	8007004 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8006cc2:	e18d      	b.n	8006fe0 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cc4:	bf00      	nop
    return;
 8006cc6:	e18b      	b.n	8006fe0 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ccc:	2b01      	cmp	r3, #1
 8006cce:	f040 8167 	bne.w	8006fa0 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006cd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006cd6:	f003 0310 	and.w	r3, r3, #16
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	f000 8160 	beq.w	8006fa0 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8006ce0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006ce4:	f003 0310 	and.w	r3, r3, #16
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	f000 8159 	beq.w	8006fa0 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006cee:	2300      	movs	r3, #0
 8006cf0:	60bb      	str	r3, [r7, #8]
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	60bb      	str	r3, [r7, #8]
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	685b      	ldr	r3, [r3, #4]
 8006d00:	60bb      	str	r3, [r7, #8]
 8006d02:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	695b      	ldr	r3, [r3, #20]
 8006d0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d0e:	2b40      	cmp	r3, #64	@ 0x40
 8006d10:	f040 80ce 	bne.w	8006eb0 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	685b      	ldr	r3, [r3, #4]
 8006d1c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006d20:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	f000 80a9 	beq.w	8006e7c <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006d2e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006d32:	429a      	cmp	r2, r3
 8006d34:	f080 80a2 	bcs.w	8006e7c <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006d3e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d44:	69db      	ldr	r3, [r3, #28]
 8006d46:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006d4a:	f000 8088 	beq.w	8006e5e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	330c      	adds	r3, #12
 8006d54:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d58:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006d5c:	e853 3f00 	ldrex	r3, [r3]
 8006d60:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006d64:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006d68:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006d6c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	330c      	adds	r3, #12
 8006d76:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8006d7a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006d7e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d82:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006d86:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006d8a:	e841 2300 	strex	r3, r2, [r1]
 8006d8e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006d92:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d1d9      	bne.n	8006d4e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	3314      	adds	r3, #20
 8006da0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006da2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006da4:	e853 3f00 	ldrex	r3, [r3]
 8006da8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006daa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006dac:	f023 0301 	bic.w	r3, r3, #1
 8006db0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	3314      	adds	r3, #20
 8006dba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006dbe:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006dc2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dc4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006dc6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006dca:	e841 2300 	strex	r3, r2, [r1]
 8006dce:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006dd0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d1e1      	bne.n	8006d9a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	3314      	adds	r3, #20
 8006ddc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dde:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006de0:	e853 3f00 	ldrex	r3, [r3]
 8006de4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006de6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006de8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006dec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	3314      	adds	r3, #20
 8006df6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006dfa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006dfc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dfe:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006e00:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006e02:	e841 2300 	strex	r3, r2, [r1]
 8006e06:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006e08:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d1e3      	bne.n	8006dd6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2220      	movs	r2, #32
 8006e12:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	2200      	movs	r2, #0
 8006e1a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	330c      	adds	r3, #12
 8006e22:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e24:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006e26:	e853 3f00 	ldrex	r3, [r3]
 8006e2a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006e2c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006e2e:	f023 0310 	bic.w	r3, r3, #16
 8006e32:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	330c      	adds	r3, #12
 8006e3c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006e40:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006e42:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e44:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006e46:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006e48:	e841 2300 	strex	r3, r2, [r1]
 8006e4c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006e4e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d1e3      	bne.n	8006e1c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e58:	4618      	mov	r0, r3
 8006e5a:	f7fd f972 	bl	8004142 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	2202      	movs	r2, #2
 8006e62:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006e6c:	b29b      	uxth	r3, r3
 8006e6e:	1ad3      	subs	r3, r2, r3
 8006e70:	b29b      	uxth	r3, r3
 8006e72:	4619      	mov	r1, r3
 8006e74:	6878      	ldr	r0, [r7, #4]
 8006e76:	f000 f8cf 	bl	8007018 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8006e7a:	e0b3      	b.n	8006fe4 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006e80:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006e84:	429a      	cmp	r2, r3
 8006e86:	f040 80ad 	bne.w	8006fe4 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e8e:	69db      	ldr	r3, [r3, #28]
 8006e90:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006e94:	f040 80a6 	bne.w	8006fe4 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2202      	movs	r2, #2
 8006e9c:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006ea2:	4619      	mov	r1, r3
 8006ea4:	6878      	ldr	r0, [r7, #4]
 8006ea6:	f000 f8b7 	bl	8007018 <HAL_UARTEx_RxEventCallback>
      return;
 8006eaa:	e09b      	b.n	8006fe4 <HAL_UART_IRQHandler+0x548>
 8006eac:	0800721d 	.word	0x0800721d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006eb8:	b29b      	uxth	r3, r3
 8006eba:	1ad3      	subs	r3, r2, r3
 8006ebc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006ec4:	b29b      	uxth	r3, r3
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	f000 808e 	beq.w	8006fe8 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8006ecc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	f000 8089 	beq.w	8006fe8 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	330c      	adds	r3, #12
 8006edc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ede:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ee0:	e853 3f00 	ldrex	r3, [r3]
 8006ee4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006ee6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ee8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006eec:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	330c      	adds	r3, #12
 8006ef6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006efa:	647a      	str	r2, [r7, #68]	@ 0x44
 8006efc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006efe:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006f00:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006f02:	e841 2300 	strex	r3, r2, [r1]
 8006f06:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006f08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d1e3      	bne.n	8006ed6 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	3314      	adds	r3, #20
 8006f14:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f18:	e853 3f00 	ldrex	r3, [r3]
 8006f1c:	623b      	str	r3, [r7, #32]
   return(result);
 8006f1e:	6a3b      	ldr	r3, [r7, #32]
 8006f20:	f023 0301 	bic.w	r3, r3, #1
 8006f24:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	3314      	adds	r3, #20
 8006f2e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006f32:	633a      	str	r2, [r7, #48]	@ 0x30
 8006f34:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f36:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006f38:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006f3a:	e841 2300 	strex	r3, r2, [r1]
 8006f3e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006f40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d1e3      	bne.n	8006f0e <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	2220      	movs	r2, #32
 8006f4a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2200      	movs	r2, #0
 8006f52:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	330c      	adds	r3, #12
 8006f5a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f5c:	693b      	ldr	r3, [r7, #16]
 8006f5e:	e853 3f00 	ldrex	r3, [r3]
 8006f62:	60fb      	str	r3, [r7, #12]
   return(result);
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	f023 0310 	bic.w	r3, r3, #16
 8006f6a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	330c      	adds	r3, #12
 8006f74:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006f78:	61fa      	str	r2, [r7, #28]
 8006f7a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f7c:	69b9      	ldr	r1, [r7, #24]
 8006f7e:	69fa      	ldr	r2, [r7, #28]
 8006f80:	e841 2300 	strex	r3, r2, [r1]
 8006f84:	617b      	str	r3, [r7, #20]
   return(result);
 8006f86:	697b      	ldr	r3, [r7, #20]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d1e3      	bne.n	8006f54 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2202      	movs	r2, #2
 8006f90:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006f92:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006f96:	4619      	mov	r1, r3
 8006f98:	6878      	ldr	r0, [r7, #4]
 8006f9a:	f000 f83d 	bl	8007018 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006f9e:	e023      	b.n	8006fe8 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006fa0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006fa4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d009      	beq.n	8006fc0 <HAL_UART_IRQHandler+0x524>
 8006fac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006fb0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d003      	beq.n	8006fc0 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8006fb8:	6878      	ldr	r0, [r7, #4]
 8006fba:	f000 f940 	bl	800723e <UART_Transmit_IT>
    return;
 8006fbe:	e014      	b.n	8006fea <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006fc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006fc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d00e      	beq.n	8006fea <HAL_UART_IRQHandler+0x54e>
 8006fcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006fd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d008      	beq.n	8006fea <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8006fd8:	6878      	ldr	r0, [r7, #4]
 8006fda:	f000 f980 	bl	80072de <UART_EndTransmit_IT>
    return;
 8006fde:	e004      	b.n	8006fea <HAL_UART_IRQHandler+0x54e>
    return;
 8006fe0:	bf00      	nop
 8006fe2:	e002      	b.n	8006fea <HAL_UART_IRQHandler+0x54e>
      return;
 8006fe4:	bf00      	nop
 8006fe6:	e000      	b.n	8006fea <HAL_UART_IRQHandler+0x54e>
      return;
 8006fe8:	bf00      	nop
  }
}
 8006fea:	37e8      	adds	r7, #232	@ 0xe8
 8006fec:	46bd      	mov	sp, r7
 8006fee:	bd80      	pop	{r7, pc}

08006ff0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006ff0:	b480      	push	{r7}
 8006ff2:	b083      	sub	sp, #12
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006ff8:	bf00      	nop
 8006ffa:	370c      	adds	r7, #12
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007002:	4770      	bx	lr

08007004 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007004:	b480      	push	{r7}
 8007006:	b083      	sub	sp, #12
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800700c:	bf00      	nop
 800700e:	370c      	adds	r7, #12
 8007010:	46bd      	mov	sp, r7
 8007012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007016:	4770      	bx	lr

08007018 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007018:	b480      	push	{r7}
 800701a:	b083      	sub	sp, #12
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
 8007020:	460b      	mov	r3, r1
 8007022:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007024:	bf00      	nop
 8007026:	370c      	adds	r7, #12
 8007028:	46bd      	mov	sp, r7
 800702a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702e:	4770      	bx	lr

08007030 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007030:	b580      	push	{r7, lr}
 8007032:	b086      	sub	sp, #24
 8007034:	af00      	add	r7, sp, #0
 8007036:	60f8      	str	r0, [r7, #12]
 8007038:	60b9      	str	r1, [r7, #8]
 800703a:	603b      	str	r3, [r7, #0]
 800703c:	4613      	mov	r3, r2
 800703e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007040:	e03b      	b.n	80070ba <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007042:	6a3b      	ldr	r3, [r7, #32]
 8007044:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007048:	d037      	beq.n	80070ba <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800704a:	f7fc fadd 	bl	8003608 <HAL_GetTick>
 800704e:	4602      	mov	r2, r0
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	1ad3      	subs	r3, r2, r3
 8007054:	6a3a      	ldr	r2, [r7, #32]
 8007056:	429a      	cmp	r2, r3
 8007058:	d302      	bcc.n	8007060 <UART_WaitOnFlagUntilTimeout+0x30>
 800705a:	6a3b      	ldr	r3, [r7, #32]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d101      	bne.n	8007064 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007060:	2303      	movs	r3, #3
 8007062:	e03a      	b.n	80070da <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	68db      	ldr	r3, [r3, #12]
 800706a:	f003 0304 	and.w	r3, r3, #4
 800706e:	2b00      	cmp	r3, #0
 8007070:	d023      	beq.n	80070ba <UART_WaitOnFlagUntilTimeout+0x8a>
 8007072:	68bb      	ldr	r3, [r7, #8]
 8007074:	2b80      	cmp	r3, #128	@ 0x80
 8007076:	d020      	beq.n	80070ba <UART_WaitOnFlagUntilTimeout+0x8a>
 8007078:	68bb      	ldr	r3, [r7, #8]
 800707a:	2b40      	cmp	r3, #64	@ 0x40
 800707c:	d01d      	beq.n	80070ba <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f003 0308 	and.w	r3, r3, #8
 8007088:	2b08      	cmp	r3, #8
 800708a:	d116      	bne.n	80070ba <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800708c:	2300      	movs	r3, #0
 800708e:	617b      	str	r3, [r7, #20]
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	617b      	str	r3, [r7, #20]
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	685b      	ldr	r3, [r3, #4]
 800709e:	617b      	str	r3, [r7, #20]
 80070a0:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80070a2:	68f8      	ldr	r0, [r7, #12]
 80070a4:	f000 f857 	bl	8007156 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	2208      	movs	r2, #8
 80070ac:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	2200      	movs	r2, #0
 80070b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80070b6:	2301      	movs	r3, #1
 80070b8:	e00f      	b.n	80070da <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	681a      	ldr	r2, [r3, #0]
 80070c0:	68bb      	ldr	r3, [r7, #8]
 80070c2:	4013      	ands	r3, r2
 80070c4:	68ba      	ldr	r2, [r7, #8]
 80070c6:	429a      	cmp	r2, r3
 80070c8:	bf0c      	ite	eq
 80070ca:	2301      	moveq	r3, #1
 80070cc:	2300      	movne	r3, #0
 80070ce:	b2db      	uxtb	r3, r3
 80070d0:	461a      	mov	r2, r3
 80070d2:	79fb      	ldrb	r3, [r7, #7]
 80070d4:	429a      	cmp	r2, r3
 80070d6:	d0b4      	beq.n	8007042 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80070d8:	2300      	movs	r3, #0
}
 80070da:	4618      	mov	r0, r3
 80070dc:	3718      	adds	r7, #24
 80070de:	46bd      	mov	sp, r7
 80070e0:	bd80      	pop	{r7, pc}

080070e2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80070e2:	b480      	push	{r7}
 80070e4:	b085      	sub	sp, #20
 80070e6:	af00      	add	r7, sp, #0
 80070e8:	60f8      	str	r0, [r7, #12]
 80070ea:	60b9      	str	r1, [r7, #8]
 80070ec:	4613      	mov	r3, r2
 80070ee:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	68ba      	ldr	r2, [r7, #8]
 80070f4:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	88fa      	ldrh	r2, [r7, #6]
 80070fa:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	88fa      	ldrh	r2, [r7, #6]
 8007100:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	2200      	movs	r2, #0
 8007106:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	2222      	movs	r2, #34	@ 0x22
 800710c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	691b      	ldr	r3, [r3, #16]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d007      	beq.n	8007128 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	68da      	ldr	r2, [r3, #12]
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007126:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	695a      	ldr	r2, [r3, #20]
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f042 0201 	orr.w	r2, r2, #1
 8007136:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	68da      	ldr	r2, [r3, #12]
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f042 0220 	orr.w	r2, r2, #32
 8007146:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007148:	2300      	movs	r3, #0
}
 800714a:	4618      	mov	r0, r3
 800714c:	3714      	adds	r7, #20
 800714e:	46bd      	mov	sp, r7
 8007150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007154:	4770      	bx	lr

08007156 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007156:	b480      	push	{r7}
 8007158:	b095      	sub	sp, #84	@ 0x54
 800715a:	af00      	add	r7, sp, #0
 800715c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	330c      	adds	r3, #12
 8007164:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007166:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007168:	e853 3f00 	ldrex	r3, [r3]
 800716c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800716e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007170:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007174:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	330c      	adds	r3, #12
 800717c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800717e:	643a      	str	r2, [r7, #64]	@ 0x40
 8007180:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007182:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007184:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007186:	e841 2300 	strex	r3, r2, [r1]
 800718a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800718c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800718e:	2b00      	cmp	r3, #0
 8007190:	d1e5      	bne.n	800715e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	3314      	adds	r3, #20
 8007198:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800719a:	6a3b      	ldr	r3, [r7, #32]
 800719c:	e853 3f00 	ldrex	r3, [r3]
 80071a0:	61fb      	str	r3, [r7, #28]
   return(result);
 80071a2:	69fb      	ldr	r3, [r7, #28]
 80071a4:	f023 0301 	bic.w	r3, r3, #1
 80071a8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	3314      	adds	r3, #20
 80071b0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80071b2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80071b4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071b6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80071b8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80071ba:	e841 2300 	strex	r3, r2, [r1]
 80071be:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80071c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d1e5      	bne.n	8007192 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071ca:	2b01      	cmp	r3, #1
 80071cc:	d119      	bne.n	8007202 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	330c      	adds	r3, #12
 80071d4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	e853 3f00 	ldrex	r3, [r3]
 80071dc:	60bb      	str	r3, [r7, #8]
   return(result);
 80071de:	68bb      	ldr	r3, [r7, #8]
 80071e0:	f023 0310 	bic.w	r3, r3, #16
 80071e4:	647b      	str	r3, [r7, #68]	@ 0x44
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	330c      	adds	r3, #12
 80071ec:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80071ee:	61ba      	str	r2, [r7, #24]
 80071f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071f2:	6979      	ldr	r1, [r7, #20]
 80071f4:	69ba      	ldr	r2, [r7, #24]
 80071f6:	e841 2300 	strex	r3, r2, [r1]
 80071fa:	613b      	str	r3, [r7, #16]
   return(result);
 80071fc:	693b      	ldr	r3, [r7, #16]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d1e5      	bne.n	80071ce <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	2220      	movs	r2, #32
 8007206:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2200      	movs	r2, #0
 800720e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007210:	bf00      	nop
 8007212:	3754      	adds	r7, #84	@ 0x54
 8007214:	46bd      	mov	sp, r7
 8007216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721a:	4770      	bx	lr

0800721c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800721c:	b580      	push	{r7, lr}
 800721e:	b084      	sub	sp, #16
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007228:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	2200      	movs	r2, #0
 800722e:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007230:	68f8      	ldr	r0, [r7, #12]
 8007232:	f7ff fee7 	bl	8007004 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007236:	bf00      	nop
 8007238:	3710      	adds	r7, #16
 800723a:	46bd      	mov	sp, r7
 800723c:	bd80      	pop	{r7, pc}

0800723e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800723e:	b480      	push	{r7}
 8007240:	b085      	sub	sp, #20
 8007242:	af00      	add	r7, sp, #0
 8007244:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800724c:	b2db      	uxtb	r3, r3
 800724e:	2b21      	cmp	r3, #33	@ 0x21
 8007250:	d13e      	bne.n	80072d0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	689b      	ldr	r3, [r3, #8]
 8007256:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800725a:	d114      	bne.n	8007286 <UART_Transmit_IT+0x48>
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	691b      	ldr	r3, [r3, #16]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d110      	bne.n	8007286 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	6a1b      	ldr	r3, [r3, #32]
 8007268:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	881b      	ldrh	r3, [r3, #0]
 800726e:	461a      	mov	r2, r3
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007278:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	6a1b      	ldr	r3, [r3, #32]
 800727e:	1c9a      	adds	r2, r3, #2
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	621a      	str	r2, [r3, #32]
 8007284:	e008      	b.n	8007298 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	6a1b      	ldr	r3, [r3, #32]
 800728a:	1c59      	adds	r1, r3, #1
 800728c:	687a      	ldr	r2, [r7, #4]
 800728e:	6211      	str	r1, [r2, #32]
 8007290:	781a      	ldrb	r2, [r3, #0]
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800729c:	b29b      	uxth	r3, r3
 800729e:	3b01      	subs	r3, #1
 80072a0:	b29b      	uxth	r3, r3
 80072a2:	687a      	ldr	r2, [r7, #4]
 80072a4:	4619      	mov	r1, r3
 80072a6:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d10f      	bne.n	80072cc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	68da      	ldr	r2, [r3, #12]
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80072ba:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	68da      	ldr	r2, [r3, #12]
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80072ca:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80072cc:	2300      	movs	r3, #0
 80072ce:	e000      	b.n	80072d2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80072d0:	2302      	movs	r3, #2
  }
}
 80072d2:	4618      	mov	r0, r3
 80072d4:	3714      	adds	r7, #20
 80072d6:	46bd      	mov	sp, r7
 80072d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072dc:	4770      	bx	lr

080072de <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80072de:	b580      	push	{r7, lr}
 80072e0:	b082      	sub	sp, #8
 80072e2:	af00      	add	r7, sp, #0
 80072e4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	68da      	ldr	r2, [r3, #12]
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80072f4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	2220      	movs	r2, #32
 80072fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80072fe:	6878      	ldr	r0, [r7, #4]
 8007300:	f7ff fe76 	bl	8006ff0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007304:	2300      	movs	r3, #0
}
 8007306:	4618      	mov	r0, r3
 8007308:	3708      	adds	r7, #8
 800730a:	46bd      	mov	sp, r7
 800730c:	bd80      	pop	{r7, pc}

0800730e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800730e:	b580      	push	{r7, lr}
 8007310:	b08c      	sub	sp, #48	@ 0x30
 8007312:	af00      	add	r7, sp, #0
 8007314:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8007316:	2300      	movs	r3, #0
 8007318:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 800731a:	2300      	movs	r3, #0
 800731c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007324:	b2db      	uxtb	r3, r3
 8007326:	2b22      	cmp	r3, #34	@ 0x22
 8007328:	f040 80aa 	bne.w	8007480 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	689b      	ldr	r3, [r3, #8]
 8007330:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007334:	d115      	bne.n	8007362 <UART_Receive_IT+0x54>
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	691b      	ldr	r3, [r3, #16]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d111      	bne.n	8007362 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007342:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	685b      	ldr	r3, [r3, #4]
 800734a:	b29b      	uxth	r3, r3
 800734c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007350:	b29a      	uxth	r2, r3
 8007352:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007354:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800735a:	1c9a      	adds	r2, r3, #2
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	629a      	str	r2, [r3, #40]	@ 0x28
 8007360:	e024      	b.n	80073ac <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007366:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	689b      	ldr	r3, [r3, #8]
 800736c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007370:	d007      	beq.n	8007382 <UART_Receive_IT+0x74>
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	689b      	ldr	r3, [r3, #8]
 8007376:	2b00      	cmp	r3, #0
 8007378:	d10a      	bne.n	8007390 <UART_Receive_IT+0x82>
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	691b      	ldr	r3, [r3, #16]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d106      	bne.n	8007390 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	685b      	ldr	r3, [r3, #4]
 8007388:	b2da      	uxtb	r2, r3
 800738a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800738c:	701a      	strb	r2, [r3, #0]
 800738e:	e008      	b.n	80073a2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	685b      	ldr	r3, [r3, #4]
 8007396:	b2db      	uxtb	r3, r3
 8007398:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800739c:	b2da      	uxtb	r2, r3
 800739e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073a0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073a6:	1c5a      	adds	r2, r3, #1
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80073b0:	b29b      	uxth	r3, r3
 80073b2:	3b01      	subs	r3, #1
 80073b4:	b29b      	uxth	r3, r3
 80073b6:	687a      	ldr	r2, [r7, #4]
 80073b8:	4619      	mov	r1, r3
 80073ba:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d15d      	bne.n	800747c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	68da      	ldr	r2, [r3, #12]
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	f022 0220 	bic.w	r2, r2, #32
 80073ce:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	68da      	ldr	r2, [r3, #12]
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80073de:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	695a      	ldr	r2, [r3, #20]
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	f022 0201 	bic.w	r2, r2, #1
 80073ee:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2220      	movs	r2, #32
 80073f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2200      	movs	r2, #0
 80073fc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007402:	2b01      	cmp	r3, #1
 8007404:	d135      	bne.n	8007472 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	2200      	movs	r2, #0
 800740a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	330c      	adds	r3, #12
 8007412:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007414:	697b      	ldr	r3, [r7, #20]
 8007416:	e853 3f00 	ldrex	r3, [r3]
 800741a:	613b      	str	r3, [r7, #16]
   return(result);
 800741c:	693b      	ldr	r3, [r7, #16]
 800741e:	f023 0310 	bic.w	r3, r3, #16
 8007422:	627b      	str	r3, [r7, #36]	@ 0x24
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	330c      	adds	r3, #12
 800742a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800742c:	623a      	str	r2, [r7, #32]
 800742e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007430:	69f9      	ldr	r1, [r7, #28]
 8007432:	6a3a      	ldr	r2, [r7, #32]
 8007434:	e841 2300 	strex	r3, r2, [r1]
 8007438:	61bb      	str	r3, [r7, #24]
   return(result);
 800743a:	69bb      	ldr	r3, [r7, #24]
 800743c:	2b00      	cmp	r3, #0
 800743e:	d1e5      	bne.n	800740c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	f003 0310 	and.w	r3, r3, #16
 800744a:	2b10      	cmp	r3, #16
 800744c:	d10a      	bne.n	8007464 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800744e:	2300      	movs	r3, #0
 8007450:	60fb      	str	r3, [r7, #12]
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	60fb      	str	r3, [r7, #12]
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	685b      	ldr	r3, [r3, #4]
 8007460:	60fb      	str	r3, [r7, #12]
 8007462:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007468:	4619      	mov	r1, r3
 800746a:	6878      	ldr	r0, [r7, #4]
 800746c:	f7ff fdd4 	bl	8007018 <HAL_UARTEx_RxEventCallback>
 8007470:	e002      	b.n	8007478 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007472:	6878      	ldr	r0, [r7, #4]
 8007474:	f7fb f848 	bl	8002508 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007478:	2300      	movs	r3, #0
 800747a:	e002      	b.n	8007482 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800747c:	2300      	movs	r3, #0
 800747e:	e000      	b.n	8007482 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007480:	2302      	movs	r3, #2
  }
}
 8007482:	4618      	mov	r0, r3
 8007484:	3730      	adds	r7, #48	@ 0x30
 8007486:	46bd      	mov	sp, r7
 8007488:	bd80      	pop	{r7, pc}
	...

0800748c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800748c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007490:	b0c0      	sub	sp, #256	@ 0x100
 8007492:	af00      	add	r7, sp, #0
 8007494:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007498:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	691b      	ldr	r3, [r3, #16]
 80074a0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80074a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074a8:	68d9      	ldr	r1, [r3, #12]
 80074aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074ae:	681a      	ldr	r2, [r3, #0]
 80074b0:	ea40 0301 	orr.w	r3, r0, r1
 80074b4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80074b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074ba:	689a      	ldr	r2, [r3, #8]
 80074bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074c0:	691b      	ldr	r3, [r3, #16]
 80074c2:	431a      	orrs	r2, r3
 80074c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074c8:	695b      	ldr	r3, [r3, #20]
 80074ca:	431a      	orrs	r2, r3
 80074cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074d0:	69db      	ldr	r3, [r3, #28]
 80074d2:	4313      	orrs	r3, r2
 80074d4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80074d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	68db      	ldr	r3, [r3, #12]
 80074e0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80074e4:	f021 010c 	bic.w	r1, r1, #12
 80074e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074ec:	681a      	ldr	r2, [r3, #0]
 80074ee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80074f2:	430b      	orrs	r3, r1
 80074f4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80074f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	695b      	ldr	r3, [r3, #20]
 80074fe:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8007502:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007506:	6999      	ldr	r1, [r3, #24]
 8007508:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800750c:	681a      	ldr	r2, [r3, #0]
 800750e:	ea40 0301 	orr.w	r3, r0, r1
 8007512:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007514:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007518:	681a      	ldr	r2, [r3, #0]
 800751a:	4b8f      	ldr	r3, [pc, #572]	@ (8007758 <UART_SetConfig+0x2cc>)
 800751c:	429a      	cmp	r2, r3
 800751e:	d005      	beq.n	800752c <UART_SetConfig+0xa0>
 8007520:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007524:	681a      	ldr	r2, [r3, #0]
 8007526:	4b8d      	ldr	r3, [pc, #564]	@ (800775c <UART_SetConfig+0x2d0>)
 8007528:	429a      	cmp	r2, r3
 800752a:	d104      	bne.n	8007536 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800752c:	f7fd f968 	bl	8004800 <HAL_RCC_GetPCLK2Freq>
 8007530:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007534:	e003      	b.n	800753e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007536:	f7fd f94f 	bl	80047d8 <HAL_RCC_GetPCLK1Freq>
 800753a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800753e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007542:	69db      	ldr	r3, [r3, #28]
 8007544:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007548:	f040 810c 	bne.w	8007764 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800754c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007550:	2200      	movs	r2, #0
 8007552:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007556:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800755a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800755e:	4622      	mov	r2, r4
 8007560:	462b      	mov	r3, r5
 8007562:	1891      	adds	r1, r2, r2
 8007564:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007566:	415b      	adcs	r3, r3
 8007568:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800756a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800756e:	4621      	mov	r1, r4
 8007570:	eb12 0801 	adds.w	r8, r2, r1
 8007574:	4629      	mov	r1, r5
 8007576:	eb43 0901 	adc.w	r9, r3, r1
 800757a:	f04f 0200 	mov.w	r2, #0
 800757e:	f04f 0300 	mov.w	r3, #0
 8007582:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007586:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800758a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800758e:	4690      	mov	r8, r2
 8007590:	4699      	mov	r9, r3
 8007592:	4623      	mov	r3, r4
 8007594:	eb18 0303 	adds.w	r3, r8, r3
 8007598:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800759c:	462b      	mov	r3, r5
 800759e:	eb49 0303 	adc.w	r3, r9, r3
 80075a2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80075a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80075aa:	685b      	ldr	r3, [r3, #4]
 80075ac:	2200      	movs	r2, #0
 80075ae:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80075b2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80075b6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80075ba:	460b      	mov	r3, r1
 80075bc:	18db      	adds	r3, r3, r3
 80075be:	653b      	str	r3, [r7, #80]	@ 0x50
 80075c0:	4613      	mov	r3, r2
 80075c2:	eb42 0303 	adc.w	r3, r2, r3
 80075c6:	657b      	str	r3, [r7, #84]	@ 0x54
 80075c8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80075cc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80075d0:	f7f9 fb8a 	bl	8000ce8 <__aeabi_uldivmod>
 80075d4:	4602      	mov	r2, r0
 80075d6:	460b      	mov	r3, r1
 80075d8:	4b61      	ldr	r3, [pc, #388]	@ (8007760 <UART_SetConfig+0x2d4>)
 80075da:	fba3 2302 	umull	r2, r3, r3, r2
 80075de:	095b      	lsrs	r3, r3, #5
 80075e0:	011c      	lsls	r4, r3, #4
 80075e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80075e6:	2200      	movs	r2, #0
 80075e8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80075ec:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80075f0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80075f4:	4642      	mov	r2, r8
 80075f6:	464b      	mov	r3, r9
 80075f8:	1891      	adds	r1, r2, r2
 80075fa:	64b9      	str	r1, [r7, #72]	@ 0x48
 80075fc:	415b      	adcs	r3, r3
 80075fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007600:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007604:	4641      	mov	r1, r8
 8007606:	eb12 0a01 	adds.w	sl, r2, r1
 800760a:	4649      	mov	r1, r9
 800760c:	eb43 0b01 	adc.w	fp, r3, r1
 8007610:	f04f 0200 	mov.w	r2, #0
 8007614:	f04f 0300 	mov.w	r3, #0
 8007618:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800761c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007620:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007624:	4692      	mov	sl, r2
 8007626:	469b      	mov	fp, r3
 8007628:	4643      	mov	r3, r8
 800762a:	eb1a 0303 	adds.w	r3, sl, r3
 800762e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007632:	464b      	mov	r3, r9
 8007634:	eb4b 0303 	adc.w	r3, fp, r3
 8007638:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800763c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007640:	685b      	ldr	r3, [r3, #4]
 8007642:	2200      	movs	r2, #0
 8007644:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007648:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800764c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007650:	460b      	mov	r3, r1
 8007652:	18db      	adds	r3, r3, r3
 8007654:	643b      	str	r3, [r7, #64]	@ 0x40
 8007656:	4613      	mov	r3, r2
 8007658:	eb42 0303 	adc.w	r3, r2, r3
 800765c:	647b      	str	r3, [r7, #68]	@ 0x44
 800765e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007662:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007666:	f7f9 fb3f 	bl	8000ce8 <__aeabi_uldivmod>
 800766a:	4602      	mov	r2, r0
 800766c:	460b      	mov	r3, r1
 800766e:	4611      	mov	r1, r2
 8007670:	4b3b      	ldr	r3, [pc, #236]	@ (8007760 <UART_SetConfig+0x2d4>)
 8007672:	fba3 2301 	umull	r2, r3, r3, r1
 8007676:	095b      	lsrs	r3, r3, #5
 8007678:	2264      	movs	r2, #100	@ 0x64
 800767a:	fb02 f303 	mul.w	r3, r2, r3
 800767e:	1acb      	subs	r3, r1, r3
 8007680:	00db      	lsls	r3, r3, #3
 8007682:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007686:	4b36      	ldr	r3, [pc, #216]	@ (8007760 <UART_SetConfig+0x2d4>)
 8007688:	fba3 2302 	umull	r2, r3, r3, r2
 800768c:	095b      	lsrs	r3, r3, #5
 800768e:	005b      	lsls	r3, r3, #1
 8007690:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007694:	441c      	add	r4, r3
 8007696:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800769a:	2200      	movs	r2, #0
 800769c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80076a0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80076a4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80076a8:	4642      	mov	r2, r8
 80076aa:	464b      	mov	r3, r9
 80076ac:	1891      	adds	r1, r2, r2
 80076ae:	63b9      	str	r1, [r7, #56]	@ 0x38
 80076b0:	415b      	adcs	r3, r3
 80076b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80076b4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80076b8:	4641      	mov	r1, r8
 80076ba:	1851      	adds	r1, r2, r1
 80076bc:	6339      	str	r1, [r7, #48]	@ 0x30
 80076be:	4649      	mov	r1, r9
 80076c0:	414b      	adcs	r3, r1
 80076c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80076c4:	f04f 0200 	mov.w	r2, #0
 80076c8:	f04f 0300 	mov.w	r3, #0
 80076cc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80076d0:	4659      	mov	r1, fp
 80076d2:	00cb      	lsls	r3, r1, #3
 80076d4:	4651      	mov	r1, sl
 80076d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80076da:	4651      	mov	r1, sl
 80076dc:	00ca      	lsls	r2, r1, #3
 80076de:	4610      	mov	r0, r2
 80076e0:	4619      	mov	r1, r3
 80076e2:	4603      	mov	r3, r0
 80076e4:	4642      	mov	r2, r8
 80076e6:	189b      	adds	r3, r3, r2
 80076e8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80076ec:	464b      	mov	r3, r9
 80076ee:	460a      	mov	r2, r1
 80076f0:	eb42 0303 	adc.w	r3, r2, r3
 80076f4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80076f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80076fc:	685b      	ldr	r3, [r3, #4]
 80076fe:	2200      	movs	r2, #0
 8007700:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007704:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007708:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800770c:	460b      	mov	r3, r1
 800770e:	18db      	adds	r3, r3, r3
 8007710:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007712:	4613      	mov	r3, r2
 8007714:	eb42 0303 	adc.w	r3, r2, r3
 8007718:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800771a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800771e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007722:	f7f9 fae1 	bl	8000ce8 <__aeabi_uldivmod>
 8007726:	4602      	mov	r2, r0
 8007728:	460b      	mov	r3, r1
 800772a:	4b0d      	ldr	r3, [pc, #52]	@ (8007760 <UART_SetConfig+0x2d4>)
 800772c:	fba3 1302 	umull	r1, r3, r3, r2
 8007730:	095b      	lsrs	r3, r3, #5
 8007732:	2164      	movs	r1, #100	@ 0x64
 8007734:	fb01 f303 	mul.w	r3, r1, r3
 8007738:	1ad3      	subs	r3, r2, r3
 800773a:	00db      	lsls	r3, r3, #3
 800773c:	3332      	adds	r3, #50	@ 0x32
 800773e:	4a08      	ldr	r2, [pc, #32]	@ (8007760 <UART_SetConfig+0x2d4>)
 8007740:	fba2 2303 	umull	r2, r3, r2, r3
 8007744:	095b      	lsrs	r3, r3, #5
 8007746:	f003 0207 	and.w	r2, r3, #7
 800774a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	4422      	add	r2, r4
 8007752:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007754:	e106      	b.n	8007964 <UART_SetConfig+0x4d8>
 8007756:	bf00      	nop
 8007758:	40011000 	.word	0x40011000
 800775c:	40011400 	.word	0x40011400
 8007760:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007764:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007768:	2200      	movs	r2, #0
 800776a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800776e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007772:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007776:	4642      	mov	r2, r8
 8007778:	464b      	mov	r3, r9
 800777a:	1891      	adds	r1, r2, r2
 800777c:	6239      	str	r1, [r7, #32]
 800777e:	415b      	adcs	r3, r3
 8007780:	627b      	str	r3, [r7, #36]	@ 0x24
 8007782:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007786:	4641      	mov	r1, r8
 8007788:	1854      	adds	r4, r2, r1
 800778a:	4649      	mov	r1, r9
 800778c:	eb43 0501 	adc.w	r5, r3, r1
 8007790:	f04f 0200 	mov.w	r2, #0
 8007794:	f04f 0300 	mov.w	r3, #0
 8007798:	00eb      	lsls	r3, r5, #3
 800779a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800779e:	00e2      	lsls	r2, r4, #3
 80077a0:	4614      	mov	r4, r2
 80077a2:	461d      	mov	r5, r3
 80077a4:	4643      	mov	r3, r8
 80077a6:	18e3      	adds	r3, r4, r3
 80077a8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80077ac:	464b      	mov	r3, r9
 80077ae:	eb45 0303 	adc.w	r3, r5, r3
 80077b2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80077b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80077ba:	685b      	ldr	r3, [r3, #4]
 80077bc:	2200      	movs	r2, #0
 80077be:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80077c2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80077c6:	f04f 0200 	mov.w	r2, #0
 80077ca:	f04f 0300 	mov.w	r3, #0
 80077ce:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80077d2:	4629      	mov	r1, r5
 80077d4:	008b      	lsls	r3, r1, #2
 80077d6:	4621      	mov	r1, r4
 80077d8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80077dc:	4621      	mov	r1, r4
 80077de:	008a      	lsls	r2, r1, #2
 80077e0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80077e4:	f7f9 fa80 	bl	8000ce8 <__aeabi_uldivmod>
 80077e8:	4602      	mov	r2, r0
 80077ea:	460b      	mov	r3, r1
 80077ec:	4b60      	ldr	r3, [pc, #384]	@ (8007970 <UART_SetConfig+0x4e4>)
 80077ee:	fba3 2302 	umull	r2, r3, r3, r2
 80077f2:	095b      	lsrs	r3, r3, #5
 80077f4:	011c      	lsls	r4, r3, #4
 80077f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80077fa:	2200      	movs	r2, #0
 80077fc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007800:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007804:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007808:	4642      	mov	r2, r8
 800780a:	464b      	mov	r3, r9
 800780c:	1891      	adds	r1, r2, r2
 800780e:	61b9      	str	r1, [r7, #24]
 8007810:	415b      	adcs	r3, r3
 8007812:	61fb      	str	r3, [r7, #28]
 8007814:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007818:	4641      	mov	r1, r8
 800781a:	1851      	adds	r1, r2, r1
 800781c:	6139      	str	r1, [r7, #16]
 800781e:	4649      	mov	r1, r9
 8007820:	414b      	adcs	r3, r1
 8007822:	617b      	str	r3, [r7, #20]
 8007824:	f04f 0200 	mov.w	r2, #0
 8007828:	f04f 0300 	mov.w	r3, #0
 800782c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007830:	4659      	mov	r1, fp
 8007832:	00cb      	lsls	r3, r1, #3
 8007834:	4651      	mov	r1, sl
 8007836:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800783a:	4651      	mov	r1, sl
 800783c:	00ca      	lsls	r2, r1, #3
 800783e:	4610      	mov	r0, r2
 8007840:	4619      	mov	r1, r3
 8007842:	4603      	mov	r3, r0
 8007844:	4642      	mov	r2, r8
 8007846:	189b      	adds	r3, r3, r2
 8007848:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800784c:	464b      	mov	r3, r9
 800784e:	460a      	mov	r2, r1
 8007850:	eb42 0303 	adc.w	r3, r2, r3
 8007854:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007858:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800785c:	685b      	ldr	r3, [r3, #4]
 800785e:	2200      	movs	r2, #0
 8007860:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007862:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007864:	f04f 0200 	mov.w	r2, #0
 8007868:	f04f 0300 	mov.w	r3, #0
 800786c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007870:	4649      	mov	r1, r9
 8007872:	008b      	lsls	r3, r1, #2
 8007874:	4641      	mov	r1, r8
 8007876:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800787a:	4641      	mov	r1, r8
 800787c:	008a      	lsls	r2, r1, #2
 800787e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007882:	f7f9 fa31 	bl	8000ce8 <__aeabi_uldivmod>
 8007886:	4602      	mov	r2, r0
 8007888:	460b      	mov	r3, r1
 800788a:	4611      	mov	r1, r2
 800788c:	4b38      	ldr	r3, [pc, #224]	@ (8007970 <UART_SetConfig+0x4e4>)
 800788e:	fba3 2301 	umull	r2, r3, r3, r1
 8007892:	095b      	lsrs	r3, r3, #5
 8007894:	2264      	movs	r2, #100	@ 0x64
 8007896:	fb02 f303 	mul.w	r3, r2, r3
 800789a:	1acb      	subs	r3, r1, r3
 800789c:	011b      	lsls	r3, r3, #4
 800789e:	3332      	adds	r3, #50	@ 0x32
 80078a0:	4a33      	ldr	r2, [pc, #204]	@ (8007970 <UART_SetConfig+0x4e4>)
 80078a2:	fba2 2303 	umull	r2, r3, r2, r3
 80078a6:	095b      	lsrs	r3, r3, #5
 80078a8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80078ac:	441c      	add	r4, r3
 80078ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80078b2:	2200      	movs	r2, #0
 80078b4:	673b      	str	r3, [r7, #112]	@ 0x70
 80078b6:	677a      	str	r2, [r7, #116]	@ 0x74
 80078b8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80078bc:	4642      	mov	r2, r8
 80078be:	464b      	mov	r3, r9
 80078c0:	1891      	adds	r1, r2, r2
 80078c2:	60b9      	str	r1, [r7, #8]
 80078c4:	415b      	adcs	r3, r3
 80078c6:	60fb      	str	r3, [r7, #12]
 80078c8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80078cc:	4641      	mov	r1, r8
 80078ce:	1851      	adds	r1, r2, r1
 80078d0:	6039      	str	r1, [r7, #0]
 80078d2:	4649      	mov	r1, r9
 80078d4:	414b      	adcs	r3, r1
 80078d6:	607b      	str	r3, [r7, #4]
 80078d8:	f04f 0200 	mov.w	r2, #0
 80078dc:	f04f 0300 	mov.w	r3, #0
 80078e0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80078e4:	4659      	mov	r1, fp
 80078e6:	00cb      	lsls	r3, r1, #3
 80078e8:	4651      	mov	r1, sl
 80078ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80078ee:	4651      	mov	r1, sl
 80078f0:	00ca      	lsls	r2, r1, #3
 80078f2:	4610      	mov	r0, r2
 80078f4:	4619      	mov	r1, r3
 80078f6:	4603      	mov	r3, r0
 80078f8:	4642      	mov	r2, r8
 80078fa:	189b      	adds	r3, r3, r2
 80078fc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80078fe:	464b      	mov	r3, r9
 8007900:	460a      	mov	r2, r1
 8007902:	eb42 0303 	adc.w	r3, r2, r3
 8007906:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007908:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800790c:	685b      	ldr	r3, [r3, #4]
 800790e:	2200      	movs	r2, #0
 8007910:	663b      	str	r3, [r7, #96]	@ 0x60
 8007912:	667a      	str	r2, [r7, #100]	@ 0x64
 8007914:	f04f 0200 	mov.w	r2, #0
 8007918:	f04f 0300 	mov.w	r3, #0
 800791c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007920:	4649      	mov	r1, r9
 8007922:	008b      	lsls	r3, r1, #2
 8007924:	4641      	mov	r1, r8
 8007926:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800792a:	4641      	mov	r1, r8
 800792c:	008a      	lsls	r2, r1, #2
 800792e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007932:	f7f9 f9d9 	bl	8000ce8 <__aeabi_uldivmod>
 8007936:	4602      	mov	r2, r0
 8007938:	460b      	mov	r3, r1
 800793a:	4b0d      	ldr	r3, [pc, #52]	@ (8007970 <UART_SetConfig+0x4e4>)
 800793c:	fba3 1302 	umull	r1, r3, r3, r2
 8007940:	095b      	lsrs	r3, r3, #5
 8007942:	2164      	movs	r1, #100	@ 0x64
 8007944:	fb01 f303 	mul.w	r3, r1, r3
 8007948:	1ad3      	subs	r3, r2, r3
 800794a:	011b      	lsls	r3, r3, #4
 800794c:	3332      	adds	r3, #50	@ 0x32
 800794e:	4a08      	ldr	r2, [pc, #32]	@ (8007970 <UART_SetConfig+0x4e4>)
 8007950:	fba2 2303 	umull	r2, r3, r2, r3
 8007954:	095b      	lsrs	r3, r3, #5
 8007956:	f003 020f 	and.w	r2, r3, #15
 800795a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	4422      	add	r2, r4
 8007962:	609a      	str	r2, [r3, #8]
}
 8007964:	bf00      	nop
 8007966:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800796a:	46bd      	mov	sp, r7
 800796c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007970:	51eb851f 	.word	0x51eb851f

08007974 <powf>:
 8007974:	b508      	push	{r3, lr}
 8007976:	ed2d 8b04 	vpush	{d8-d9}
 800797a:	eeb0 8a60 	vmov.f32	s16, s1
 800797e:	eeb0 9a40 	vmov.f32	s18, s0
 8007982:	f000 f859 	bl	8007a38 <__ieee754_powf>
 8007986:	eeb4 8a48 	vcmp.f32	s16, s16
 800798a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800798e:	eef0 8a40 	vmov.f32	s17, s0
 8007992:	d63e      	bvs.n	8007a12 <powf+0x9e>
 8007994:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8007998:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800799c:	d112      	bne.n	80079c4 <powf+0x50>
 800799e:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80079a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079a6:	d039      	beq.n	8007a1c <powf+0xa8>
 80079a8:	eeb0 0a48 	vmov.f32	s0, s16
 80079ac:	f000 f839 	bl	8007a22 <finitef>
 80079b0:	b378      	cbz	r0, 8007a12 <powf+0x9e>
 80079b2:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80079b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079ba:	d52a      	bpl.n	8007a12 <powf+0x9e>
 80079bc:	f001 fd0e 	bl	80093dc <__errno>
 80079c0:	2322      	movs	r3, #34	@ 0x22
 80079c2:	e014      	b.n	80079ee <powf+0x7a>
 80079c4:	f000 f82d 	bl	8007a22 <finitef>
 80079c8:	b998      	cbnz	r0, 80079f2 <powf+0x7e>
 80079ca:	eeb0 0a49 	vmov.f32	s0, s18
 80079ce:	f000 f828 	bl	8007a22 <finitef>
 80079d2:	b170      	cbz	r0, 80079f2 <powf+0x7e>
 80079d4:	eeb0 0a48 	vmov.f32	s0, s16
 80079d8:	f000 f823 	bl	8007a22 <finitef>
 80079dc:	b148      	cbz	r0, 80079f2 <powf+0x7e>
 80079de:	eef4 8a68 	vcmp.f32	s17, s17
 80079e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079e6:	d7e9      	bvc.n	80079bc <powf+0x48>
 80079e8:	f001 fcf8 	bl	80093dc <__errno>
 80079ec:	2321      	movs	r3, #33	@ 0x21
 80079ee:	6003      	str	r3, [r0, #0]
 80079f0:	e00f      	b.n	8007a12 <powf+0x9e>
 80079f2:	eef5 8a40 	vcmp.f32	s17, #0.0
 80079f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079fa:	d10a      	bne.n	8007a12 <powf+0x9e>
 80079fc:	eeb0 0a49 	vmov.f32	s0, s18
 8007a00:	f000 f80f 	bl	8007a22 <finitef>
 8007a04:	b128      	cbz	r0, 8007a12 <powf+0x9e>
 8007a06:	eeb0 0a48 	vmov.f32	s0, s16
 8007a0a:	f000 f80a 	bl	8007a22 <finitef>
 8007a0e:	2800      	cmp	r0, #0
 8007a10:	d1d4      	bne.n	80079bc <powf+0x48>
 8007a12:	eeb0 0a68 	vmov.f32	s0, s17
 8007a16:	ecbd 8b04 	vpop	{d8-d9}
 8007a1a:	bd08      	pop	{r3, pc}
 8007a1c:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 8007a20:	e7f7      	b.n	8007a12 <powf+0x9e>

08007a22 <finitef>:
 8007a22:	ee10 3a10 	vmov	r3, s0
 8007a26:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 8007a2a:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 8007a2e:	bfac      	ite	ge
 8007a30:	2000      	movge	r0, #0
 8007a32:	2001      	movlt	r0, #1
 8007a34:	4770      	bx	lr
	...

08007a38 <__ieee754_powf>:
 8007a38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a3c:	ee10 4a90 	vmov	r4, s1
 8007a40:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 8007a44:	ed2d 8b02 	vpush	{d8}
 8007a48:	ee10 6a10 	vmov	r6, s0
 8007a4c:	eeb0 8a40 	vmov.f32	s16, s0
 8007a50:	eef0 8a60 	vmov.f32	s17, s1
 8007a54:	d10c      	bne.n	8007a70 <__ieee754_powf+0x38>
 8007a56:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 8007a5a:	0076      	lsls	r6, r6, #1
 8007a5c:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 8007a60:	f240 8274 	bls.w	8007f4c <__ieee754_powf+0x514>
 8007a64:	ee38 0a28 	vadd.f32	s0, s16, s17
 8007a68:	ecbd 8b02 	vpop	{d8}
 8007a6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a70:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 8007a74:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 8007a78:	d802      	bhi.n	8007a80 <__ieee754_powf+0x48>
 8007a7a:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8007a7e:	d908      	bls.n	8007a92 <__ieee754_powf+0x5a>
 8007a80:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 8007a84:	d1ee      	bne.n	8007a64 <__ieee754_powf+0x2c>
 8007a86:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 8007a8a:	0064      	lsls	r4, r4, #1
 8007a8c:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 8007a90:	e7e6      	b.n	8007a60 <__ieee754_powf+0x28>
 8007a92:	2e00      	cmp	r6, #0
 8007a94:	da1f      	bge.n	8007ad6 <__ieee754_powf+0x9e>
 8007a96:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 8007a9a:	f080 8260 	bcs.w	8007f5e <__ieee754_powf+0x526>
 8007a9e:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 8007aa2:	d32f      	bcc.n	8007b04 <__ieee754_powf+0xcc>
 8007aa4:	ea4f 53e9 	mov.w	r3, r9, asr #23
 8007aa8:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 8007aac:	fa49 f503 	asr.w	r5, r9, r3
 8007ab0:	fa05 f303 	lsl.w	r3, r5, r3
 8007ab4:	454b      	cmp	r3, r9
 8007ab6:	d123      	bne.n	8007b00 <__ieee754_powf+0xc8>
 8007ab8:	f005 0501 	and.w	r5, r5, #1
 8007abc:	f1c5 0502 	rsb	r5, r5, #2
 8007ac0:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 8007ac4:	d11f      	bne.n	8007b06 <__ieee754_powf+0xce>
 8007ac6:	2c00      	cmp	r4, #0
 8007ac8:	f280 8246 	bge.w	8007f58 <__ieee754_powf+0x520>
 8007acc:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8007ad0:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8007ad4:	e7c8      	b.n	8007a68 <__ieee754_powf+0x30>
 8007ad6:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8007ada:	d111      	bne.n	8007b00 <__ieee754_powf+0xc8>
 8007adc:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 8007ae0:	f000 8234 	beq.w	8007f4c <__ieee754_powf+0x514>
 8007ae4:	d906      	bls.n	8007af4 <__ieee754_powf+0xbc>
 8007ae6:	ed9f 0ac5 	vldr	s0, [pc, #788]	@ 8007dfc <__ieee754_powf+0x3c4>
 8007aea:	2c00      	cmp	r4, #0
 8007aec:	bfa8      	it	ge
 8007aee:	eeb0 0a68 	vmovge.f32	s0, s17
 8007af2:	e7b9      	b.n	8007a68 <__ieee754_powf+0x30>
 8007af4:	2c00      	cmp	r4, #0
 8007af6:	f280 822c 	bge.w	8007f52 <__ieee754_powf+0x51a>
 8007afa:	eeb1 0a68 	vneg.f32	s0, s17
 8007afe:	e7b3      	b.n	8007a68 <__ieee754_powf+0x30>
 8007b00:	2500      	movs	r5, #0
 8007b02:	e7dd      	b.n	8007ac0 <__ieee754_powf+0x88>
 8007b04:	2500      	movs	r5, #0
 8007b06:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 8007b0a:	d102      	bne.n	8007b12 <__ieee754_powf+0xda>
 8007b0c:	ee28 0a08 	vmul.f32	s0, s16, s16
 8007b10:	e7aa      	b.n	8007a68 <__ieee754_powf+0x30>
 8007b12:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 8007b16:	f040 8227 	bne.w	8007f68 <__ieee754_powf+0x530>
 8007b1a:	2e00      	cmp	r6, #0
 8007b1c:	f2c0 8224 	blt.w	8007f68 <__ieee754_powf+0x530>
 8007b20:	eeb0 0a48 	vmov.f32	s0, s16
 8007b24:	ecbd 8b02 	vpop	{d8}
 8007b28:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b2c:	f000 bae6 	b.w	80080fc <__ieee754_sqrtf>
 8007b30:	2d01      	cmp	r5, #1
 8007b32:	d199      	bne.n	8007a68 <__ieee754_powf+0x30>
 8007b34:	eeb1 0a40 	vneg.f32	s0, s0
 8007b38:	e796      	b.n	8007a68 <__ieee754_powf+0x30>
 8007b3a:	0ff0      	lsrs	r0, r6, #31
 8007b3c:	3801      	subs	r0, #1
 8007b3e:	ea55 0300 	orrs.w	r3, r5, r0
 8007b42:	d104      	bne.n	8007b4e <__ieee754_powf+0x116>
 8007b44:	ee38 8a48 	vsub.f32	s16, s16, s16
 8007b48:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8007b4c:	e78c      	b.n	8007a68 <__ieee754_powf+0x30>
 8007b4e:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 8007b52:	d96d      	bls.n	8007c30 <__ieee754_powf+0x1f8>
 8007b54:	4baa      	ldr	r3, [pc, #680]	@ (8007e00 <__ieee754_powf+0x3c8>)
 8007b56:	4598      	cmp	r8, r3
 8007b58:	d808      	bhi.n	8007b6c <__ieee754_powf+0x134>
 8007b5a:	2c00      	cmp	r4, #0
 8007b5c:	da0b      	bge.n	8007b76 <__ieee754_powf+0x13e>
 8007b5e:	2000      	movs	r0, #0
 8007b60:	ecbd 8b02 	vpop	{d8}
 8007b64:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b68:	f000 bac2 	b.w	80080f0 <__math_oflowf>
 8007b6c:	4ba5      	ldr	r3, [pc, #660]	@ (8007e04 <__ieee754_powf+0x3cc>)
 8007b6e:	4598      	cmp	r8, r3
 8007b70:	d908      	bls.n	8007b84 <__ieee754_powf+0x14c>
 8007b72:	2c00      	cmp	r4, #0
 8007b74:	dcf3      	bgt.n	8007b5e <__ieee754_powf+0x126>
 8007b76:	2000      	movs	r0, #0
 8007b78:	ecbd 8b02 	vpop	{d8}
 8007b7c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b80:	f000 bab0 	b.w	80080e4 <__math_uflowf>
 8007b84:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8007b88:	ee30 0a67 	vsub.f32	s0, s0, s15
 8007b8c:	eddf 6a9e 	vldr	s13, [pc, #632]	@ 8007e08 <__ieee754_powf+0x3d0>
 8007b90:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 8007b94:	eee0 6a67 	vfms.f32	s13, s0, s15
 8007b98:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8007b9c:	eee6 7ac0 	vfms.f32	s15, s13, s0
 8007ba0:	ee20 7a00 	vmul.f32	s14, s0, s0
 8007ba4:	eddf 6a99 	vldr	s13, [pc, #612]	@ 8007e0c <__ieee754_powf+0x3d4>
 8007ba8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007bac:	eddf 7a98 	vldr	s15, [pc, #608]	@ 8007e10 <__ieee754_powf+0x3d8>
 8007bb0:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 8007bb4:	ed9f 7a97 	vldr	s14, [pc, #604]	@ 8007e14 <__ieee754_powf+0x3dc>
 8007bb8:	eee0 7a07 	vfma.f32	s15, s0, s14
 8007bbc:	eeb0 7a67 	vmov.f32	s14, s15
 8007bc0:	eea0 7a26 	vfma.f32	s14, s0, s13
 8007bc4:	ee17 3a10 	vmov	r3, s14
 8007bc8:	f36f 030b 	bfc	r3, #0, #12
 8007bcc:	ee07 3a10 	vmov	s14, r3
 8007bd0:	eeb0 6a47 	vmov.f32	s12, s14
 8007bd4:	eea0 6a66 	vfms.f32	s12, s0, s13
 8007bd8:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8007bdc:	3d01      	subs	r5, #1
 8007bde:	4305      	orrs	r5, r0
 8007be0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007be4:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 8007be8:	f36f 040b 	bfc	r4, #0, #12
 8007bec:	bf18      	it	ne
 8007bee:	eeb0 8a66 	vmovne.f32	s16, s13
 8007bf2:	ee06 4a90 	vmov	s13, r4
 8007bf6:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8007bfa:	ee38 6ae6 	vsub.f32	s12, s17, s13
 8007bfe:	ee67 7a26 	vmul.f32	s15, s14, s13
 8007c02:	eee6 0a07 	vfma.f32	s1, s12, s14
 8007c06:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8007c0a:	ee17 1a10 	vmov	r1, s14
 8007c0e:	2900      	cmp	r1, #0
 8007c10:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8007c14:	f340 80dd 	ble.w	8007dd2 <__ieee754_powf+0x39a>
 8007c18:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 8007c1c:	f240 80ca 	bls.w	8007db4 <__ieee754_powf+0x37c>
 8007c20:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8007c24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c28:	bf4c      	ite	mi
 8007c2a:	2001      	movmi	r0, #1
 8007c2c:	2000      	movpl	r0, #0
 8007c2e:	e797      	b.n	8007b60 <__ieee754_powf+0x128>
 8007c30:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 8007c34:	bf01      	itttt	eq
 8007c36:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 8007e18 <__ieee754_powf+0x3e0>
 8007c3a:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 8007c3e:	f06f 0317 	mvneq.w	r3, #23
 8007c42:	ee17 7a90 	vmoveq	r7, s15
 8007c46:	ea4f 52e7 	mov.w	r2, r7, asr #23
 8007c4a:	bf18      	it	ne
 8007c4c:	2300      	movne	r3, #0
 8007c4e:	3a7f      	subs	r2, #127	@ 0x7f
 8007c50:	441a      	add	r2, r3
 8007c52:	4b72      	ldr	r3, [pc, #456]	@ (8007e1c <__ieee754_powf+0x3e4>)
 8007c54:	f3c7 0716 	ubfx	r7, r7, #0, #23
 8007c58:	429f      	cmp	r7, r3
 8007c5a:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 8007c5e:	dd06      	ble.n	8007c6e <__ieee754_powf+0x236>
 8007c60:	4b6f      	ldr	r3, [pc, #444]	@ (8007e20 <__ieee754_powf+0x3e8>)
 8007c62:	429f      	cmp	r7, r3
 8007c64:	f340 80a4 	ble.w	8007db0 <__ieee754_powf+0x378>
 8007c68:	3201      	adds	r2, #1
 8007c6a:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 8007c6e:	2600      	movs	r6, #0
 8007c70:	4b6c      	ldr	r3, [pc, #432]	@ (8007e24 <__ieee754_powf+0x3ec>)
 8007c72:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 8007c76:	ee07 1a10 	vmov	s14, r1
 8007c7a:	edd3 5a00 	vldr	s11, [r3]
 8007c7e:	4b6a      	ldr	r3, [pc, #424]	@ (8007e28 <__ieee754_powf+0x3f0>)
 8007c80:	ee75 7a87 	vadd.f32	s15, s11, s14
 8007c84:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007c88:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 8007c8c:	1049      	asrs	r1, r1, #1
 8007c8e:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 8007c92:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 8007c96:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 8007c9a:	ee37 6a65 	vsub.f32	s12, s14, s11
 8007c9e:	ee07 1a90 	vmov	s15, r1
 8007ca2:	ee26 5a24 	vmul.f32	s10, s12, s9
 8007ca6:	ee77 5ae5 	vsub.f32	s11, s15, s11
 8007caa:	ee15 7a10 	vmov	r7, s10
 8007cae:	401f      	ands	r7, r3
 8007cb0:	ee06 7a90 	vmov	s13, r7
 8007cb4:	eea6 6ae7 	vfms.f32	s12, s13, s15
 8007cb8:	ee37 7a65 	vsub.f32	s14, s14, s11
 8007cbc:	ee65 7a05 	vmul.f32	s15, s10, s10
 8007cc0:	eea6 6ac7 	vfms.f32	s12, s13, s14
 8007cc4:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8007e2c <__ieee754_powf+0x3f4>
 8007cc8:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 8007e30 <__ieee754_powf+0x3f8>
 8007ccc:	eee7 5a87 	vfma.f32	s11, s15, s14
 8007cd0:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 8007e34 <__ieee754_powf+0x3fc>
 8007cd4:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8007cd8:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 8007e08 <__ieee754_powf+0x3d0>
 8007cdc:	eee7 5a27 	vfma.f32	s11, s14, s15
 8007ce0:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 8007e38 <__ieee754_powf+0x400>
 8007ce4:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8007ce8:	eddf 5a54 	vldr	s11, [pc, #336]	@ 8007e3c <__ieee754_powf+0x404>
 8007cec:	ee26 6a24 	vmul.f32	s12, s12, s9
 8007cf0:	eee7 5a27 	vfma.f32	s11, s14, s15
 8007cf4:	ee35 7a26 	vadd.f32	s14, s10, s13
 8007cf8:	ee67 4aa7 	vmul.f32	s9, s15, s15
 8007cfc:	ee27 7a06 	vmul.f32	s14, s14, s12
 8007d00:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 8007d04:	eea4 7aa5 	vfma.f32	s14, s9, s11
 8007d08:	eef0 5a67 	vmov.f32	s11, s15
 8007d0c:	eee6 5aa6 	vfma.f32	s11, s13, s13
 8007d10:	ee75 5a87 	vadd.f32	s11, s11, s14
 8007d14:	ee15 1a90 	vmov	r1, s11
 8007d18:	4019      	ands	r1, r3
 8007d1a:	ee05 1a90 	vmov	s11, r1
 8007d1e:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8007d22:	eee6 7ae6 	vfms.f32	s15, s13, s13
 8007d26:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007d2a:	ee67 7a85 	vmul.f32	s15, s15, s10
 8007d2e:	eee6 7a25 	vfma.f32	s15, s12, s11
 8007d32:	eeb0 6a67 	vmov.f32	s12, s15
 8007d36:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8007d3a:	ee16 1a10 	vmov	r1, s12
 8007d3e:	4019      	ands	r1, r3
 8007d40:	ee06 1a10 	vmov	s12, r1
 8007d44:	eeb0 7a46 	vmov.f32	s14, s12
 8007d48:	eea6 7ae5 	vfms.f32	s14, s13, s11
 8007d4c:	493c      	ldr	r1, [pc, #240]	@ (8007e40 <__ieee754_powf+0x408>)
 8007d4e:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 8007d52:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007d56:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 8007e44 <__ieee754_powf+0x40c>
 8007d5a:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 8007e48 <__ieee754_powf+0x410>
 8007d5e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007d62:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 8007e4c <__ieee754_powf+0x414>
 8007d66:	eee6 7a07 	vfma.f32	s15, s12, s14
 8007d6a:	ed91 7a00 	vldr	s14, [r1]
 8007d6e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007d72:	ee07 2a10 	vmov	s14, r2
 8007d76:	4a36      	ldr	r2, [pc, #216]	@ (8007e50 <__ieee754_powf+0x418>)
 8007d78:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8007d7c:	eeb0 7a67 	vmov.f32	s14, s15
 8007d80:	eea6 7a25 	vfma.f32	s14, s12, s11
 8007d84:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 8007d88:	ed92 5a00 	vldr	s10, [r2]
 8007d8c:	ee37 7a05 	vadd.f32	s14, s14, s10
 8007d90:	ee37 7a26 	vadd.f32	s14, s14, s13
 8007d94:	ee17 2a10 	vmov	r2, s14
 8007d98:	401a      	ands	r2, r3
 8007d9a:	ee07 2a10 	vmov	s14, r2
 8007d9e:	ee77 6a66 	vsub.f32	s13, s14, s13
 8007da2:	ee76 6ac5 	vsub.f32	s13, s13, s10
 8007da6:	eee6 6a65 	vfms.f32	s13, s12, s11
 8007daa:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007dae:	e715      	b.n	8007bdc <__ieee754_powf+0x1a4>
 8007db0:	2601      	movs	r6, #1
 8007db2:	e75d      	b.n	8007c70 <__ieee754_powf+0x238>
 8007db4:	d152      	bne.n	8007e5c <__ieee754_powf+0x424>
 8007db6:	eddf 6a27 	vldr	s13, [pc, #156]	@ 8007e54 <__ieee754_powf+0x41c>
 8007dba:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007dbe:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8007dc2:	eef4 6ac7 	vcmpe.f32	s13, s14
 8007dc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007dca:	f73f af29 	bgt.w	8007c20 <__ieee754_powf+0x1e8>
 8007dce:	2386      	movs	r3, #134	@ 0x86
 8007dd0:	e048      	b.n	8007e64 <__ieee754_powf+0x42c>
 8007dd2:	4a21      	ldr	r2, [pc, #132]	@ (8007e58 <__ieee754_powf+0x420>)
 8007dd4:	4293      	cmp	r3, r2
 8007dd6:	d907      	bls.n	8007de8 <__ieee754_powf+0x3b0>
 8007dd8:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8007ddc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007de0:	bf4c      	ite	mi
 8007de2:	2001      	movmi	r0, #1
 8007de4:	2000      	movpl	r0, #0
 8007de6:	e6c7      	b.n	8007b78 <__ieee754_powf+0x140>
 8007de8:	d138      	bne.n	8007e5c <__ieee754_powf+0x424>
 8007dea:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007dee:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8007df2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007df6:	dbea      	blt.n	8007dce <__ieee754_powf+0x396>
 8007df8:	e7ee      	b.n	8007dd8 <__ieee754_powf+0x3a0>
 8007dfa:	bf00      	nop
 8007dfc:	00000000 	.word	0x00000000
 8007e00:	3f7ffff3 	.word	0x3f7ffff3
 8007e04:	3f800007 	.word	0x3f800007
 8007e08:	3eaaaaab 	.word	0x3eaaaaab
 8007e0c:	3fb8aa00 	.word	0x3fb8aa00
 8007e10:	3fb8aa3b 	.word	0x3fb8aa3b
 8007e14:	36eca570 	.word	0x36eca570
 8007e18:	4b800000 	.word	0x4b800000
 8007e1c:	001cc471 	.word	0x001cc471
 8007e20:	005db3d6 	.word	0x005db3d6
 8007e24:	0800cbf0 	.word	0x0800cbf0
 8007e28:	fffff000 	.word	0xfffff000
 8007e2c:	3e6c3255 	.word	0x3e6c3255
 8007e30:	3e53f142 	.word	0x3e53f142
 8007e34:	3e8ba305 	.word	0x3e8ba305
 8007e38:	3edb6db7 	.word	0x3edb6db7
 8007e3c:	3f19999a 	.word	0x3f19999a
 8007e40:	0800cbe0 	.word	0x0800cbe0
 8007e44:	3f76384f 	.word	0x3f76384f
 8007e48:	3f763800 	.word	0x3f763800
 8007e4c:	369dc3a0 	.word	0x369dc3a0
 8007e50:	0800cbe8 	.word	0x0800cbe8
 8007e54:	3338aa3c 	.word	0x3338aa3c
 8007e58:	43160000 	.word	0x43160000
 8007e5c:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 8007e60:	d96f      	bls.n	8007f42 <__ieee754_powf+0x50a>
 8007e62:	15db      	asrs	r3, r3, #23
 8007e64:	3b7e      	subs	r3, #126	@ 0x7e
 8007e66:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8007e6a:	4118      	asrs	r0, r3
 8007e6c:	4408      	add	r0, r1
 8007e6e:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8007e72:	4a4e      	ldr	r2, [pc, #312]	@ (8007fac <__ieee754_powf+0x574>)
 8007e74:	3b7f      	subs	r3, #127	@ 0x7f
 8007e76:	411a      	asrs	r2, r3
 8007e78:	4002      	ands	r2, r0
 8007e7a:	ee07 2a10 	vmov	s14, r2
 8007e7e:	f3c0 0016 	ubfx	r0, r0, #0, #23
 8007e82:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8007e86:	f1c3 0317 	rsb	r3, r3, #23
 8007e8a:	4118      	asrs	r0, r3
 8007e8c:	2900      	cmp	r1, #0
 8007e8e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007e92:	bfb8      	it	lt
 8007e94:	4240      	neglt	r0, r0
 8007e96:	ee77 6aa0 	vadd.f32	s13, s15, s1
 8007e9a:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 8007fb0 <__ieee754_powf+0x578>
 8007e9e:	ed9f 6a45 	vldr	s12, [pc, #276]	@ 8007fb4 <__ieee754_powf+0x57c>
 8007ea2:	ee16 3a90 	vmov	r3, s13
 8007ea6:	f36f 030b 	bfc	r3, #0, #12
 8007eaa:	ee06 3a90 	vmov	s13, r3
 8007eae:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8007eb2:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8007eb6:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8007eba:	eddf 7a3f 	vldr	s15, [pc, #252]	@ 8007fb8 <__ieee754_powf+0x580>
 8007ebe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007ec2:	eee0 7a87 	vfma.f32	s15, s1, s14
 8007ec6:	eeb0 7a67 	vmov.f32	s14, s15
 8007eca:	eea6 7a86 	vfma.f32	s14, s13, s12
 8007ece:	eef0 5a47 	vmov.f32	s11, s14
 8007ed2:	eee6 5ac6 	vfms.f32	s11, s13, s12
 8007ed6:	ee67 6a07 	vmul.f32	s13, s14, s14
 8007eda:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8007ede:	ed9f 6a37 	vldr	s12, [pc, #220]	@ 8007fbc <__ieee754_powf+0x584>
 8007ee2:	eddf 5a37 	vldr	s11, [pc, #220]	@ 8007fc0 <__ieee754_powf+0x588>
 8007ee6:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8007eea:	eddf 5a36 	vldr	s11, [pc, #216]	@ 8007fc4 <__ieee754_powf+0x58c>
 8007eee:	eee6 5a26 	vfma.f32	s11, s12, s13
 8007ef2:	ed9f 6a35 	vldr	s12, [pc, #212]	@ 8007fc8 <__ieee754_powf+0x590>
 8007ef6:	eea5 6aa6 	vfma.f32	s12, s11, s13
 8007efa:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007fcc <__ieee754_powf+0x594>
 8007efe:	eee6 5a26 	vfma.f32	s11, s12, s13
 8007f02:	eeb0 6a47 	vmov.f32	s12, s14
 8007f06:	eea5 6ae6 	vfms.f32	s12, s11, s13
 8007f0a:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8007f0e:	ee67 5a06 	vmul.f32	s11, s14, s12
 8007f12:	ee36 6a66 	vsub.f32	s12, s12, s13
 8007f16:	eee7 7a27 	vfma.f32	s15, s14, s15
 8007f1a:	eec5 6a86 	vdiv.f32	s13, s11, s12
 8007f1e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8007f22:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007f26:	ee30 0a67 	vsub.f32	s0, s0, s15
 8007f2a:	ee10 3a10 	vmov	r3, s0
 8007f2e:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8007f32:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007f36:	da06      	bge.n	8007f46 <__ieee754_powf+0x50e>
 8007f38:	f000 f854 	bl	8007fe4 <scalbnf>
 8007f3c:	ee20 0a08 	vmul.f32	s0, s0, s16
 8007f40:	e592      	b.n	8007a68 <__ieee754_powf+0x30>
 8007f42:	2000      	movs	r0, #0
 8007f44:	e7a7      	b.n	8007e96 <__ieee754_powf+0x45e>
 8007f46:	ee00 3a10 	vmov	s0, r3
 8007f4a:	e7f7      	b.n	8007f3c <__ieee754_powf+0x504>
 8007f4c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8007f50:	e58a      	b.n	8007a68 <__ieee754_powf+0x30>
 8007f52:	ed9f 0a1f 	vldr	s0, [pc, #124]	@ 8007fd0 <__ieee754_powf+0x598>
 8007f56:	e587      	b.n	8007a68 <__ieee754_powf+0x30>
 8007f58:	eeb0 0a48 	vmov.f32	s0, s16
 8007f5c:	e584      	b.n	8007a68 <__ieee754_powf+0x30>
 8007f5e:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8007f62:	f43f adbb 	beq.w	8007adc <__ieee754_powf+0xa4>
 8007f66:	2502      	movs	r5, #2
 8007f68:	eeb0 0a48 	vmov.f32	s0, s16
 8007f6c:	f000 f832 	bl	8007fd4 <fabsf>
 8007f70:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 8007f74:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 8007f78:	4647      	mov	r7, r8
 8007f7a:	d003      	beq.n	8007f84 <__ieee754_powf+0x54c>
 8007f7c:	f1b8 0f00 	cmp.w	r8, #0
 8007f80:	f47f addb 	bne.w	8007b3a <__ieee754_powf+0x102>
 8007f84:	2c00      	cmp	r4, #0
 8007f86:	bfbc      	itt	lt
 8007f88:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 8007f8c:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8007f90:	2e00      	cmp	r6, #0
 8007f92:	f6bf ad69 	bge.w	8007a68 <__ieee754_powf+0x30>
 8007f96:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 8007f9a:	ea58 0805 	orrs.w	r8, r8, r5
 8007f9e:	f47f adc7 	bne.w	8007b30 <__ieee754_powf+0xf8>
 8007fa2:	ee70 7a40 	vsub.f32	s15, s0, s0
 8007fa6:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8007faa:	e55d      	b.n	8007a68 <__ieee754_powf+0x30>
 8007fac:	ff800000 	.word	0xff800000
 8007fb0:	3f317218 	.word	0x3f317218
 8007fb4:	3f317200 	.word	0x3f317200
 8007fb8:	35bfbe8c 	.word	0x35bfbe8c
 8007fbc:	b5ddea0e 	.word	0xb5ddea0e
 8007fc0:	3331bb4c 	.word	0x3331bb4c
 8007fc4:	388ab355 	.word	0x388ab355
 8007fc8:	bb360b61 	.word	0xbb360b61
 8007fcc:	3e2aaaab 	.word	0x3e2aaaab
 8007fd0:	00000000 	.word	0x00000000

08007fd4 <fabsf>:
 8007fd4:	ee10 3a10 	vmov	r3, s0
 8007fd8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007fdc:	ee00 3a10 	vmov	s0, r3
 8007fe0:	4770      	bx	lr
	...

08007fe4 <scalbnf>:
 8007fe4:	ee10 3a10 	vmov	r3, s0
 8007fe8:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8007fec:	d02b      	beq.n	8008046 <scalbnf+0x62>
 8007fee:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8007ff2:	d302      	bcc.n	8007ffa <scalbnf+0x16>
 8007ff4:	ee30 0a00 	vadd.f32	s0, s0, s0
 8007ff8:	4770      	bx	lr
 8007ffa:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8007ffe:	d123      	bne.n	8008048 <scalbnf+0x64>
 8008000:	4b24      	ldr	r3, [pc, #144]	@ (8008094 <scalbnf+0xb0>)
 8008002:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8008098 <scalbnf+0xb4>
 8008006:	4298      	cmp	r0, r3
 8008008:	ee20 0a27 	vmul.f32	s0, s0, s15
 800800c:	db17      	blt.n	800803e <scalbnf+0x5a>
 800800e:	ee10 3a10 	vmov	r3, s0
 8008012:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8008016:	3a19      	subs	r2, #25
 8008018:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800801c:	4288      	cmp	r0, r1
 800801e:	dd15      	ble.n	800804c <scalbnf+0x68>
 8008020:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 800809c <scalbnf+0xb8>
 8008024:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 80080a0 <scalbnf+0xbc>
 8008028:	ee10 3a10 	vmov	r3, s0
 800802c:	eeb0 7a67 	vmov.f32	s14, s15
 8008030:	2b00      	cmp	r3, #0
 8008032:	bfb8      	it	lt
 8008034:	eef0 7a66 	vmovlt.f32	s15, s13
 8008038:	ee27 0a87 	vmul.f32	s0, s15, s14
 800803c:	4770      	bx	lr
 800803e:	eddf 7a19 	vldr	s15, [pc, #100]	@ 80080a4 <scalbnf+0xc0>
 8008042:	ee27 0a80 	vmul.f32	s0, s15, s0
 8008046:	4770      	bx	lr
 8008048:	0dd2      	lsrs	r2, r2, #23
 800804a:	e7e5      	b.n	8008018 <scalbnf+0x34>
 800804c:	4410      	add	r0, r2
 800804e:	28fe      	cmp	r0, #254	@ 0xfe
 8008050:	dce6      	bgt.n	8008020 <scalbnf+0x3c>
 8008052:	2800      	cmp	r0, #0
 8008054:	dd06      	ble.n	8008064 <scalbnf+0x80>
 8008056:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800805a:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800805e:	ee00 3a10 	vmov	s0, r3
 8008062:	4770      	bx	lr
 8008064:	f110 0f16 	cmn.w	r0, #22
 8008068:	da09      	bge.n	800807e <scalbnf+0x9a>
 800806a:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 80080a4 <scalbnf+0xc0>
 800806e:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 80080a8 <scalbnf+0xc4>
 8008072:	ee10 3a10 	vmov	r3, s0
 8008076:	eeb0 7a67 	vmov.f32	s14, s15
 800807a:	2b00      	cmp	r3, #0
 800807c:	e7d9      	b.n	8008032 <scalbnf+0x4e>
 800807e:	3019      	adds	r0, #25
 8008080:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8008084:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8008088:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 80080ac <scalbnf+0xc8>
 800808c:	ee07 3a90 	vmov	s15, r3
 8008090:	e7d7      	b.n	8008042 <scalbnf+0x5e>
 8008092:	bf00      	nop
 8008094:	ffff3cb0 	.word	0xffff3cb0
 8008098:	4c000000 	.word	0x4c000000
 800809c:	7149f2ca 	.word	0x7149f2ca
 80080a0:	f149f2ca 	.word	0xf149f2ca
 80080a4:	0da24260 	.word	0x0da24260
 80080a8:	8da24260 	.word	0x8da24260
 80080ac:	33000000 	.word	0x33000000

080080b0 <with_errnof>:
 80080b0:	b510      	push	{r4, lr}
 80080b2:	ed2d 8b02 	vpush	{d8}
 80080b6:	eeb0 8a40 	vmov.f32	s16, s0
 80080ba:	4604      	mov	r4, r0
 80080bc:	f001 f98e 	bl	80093dc <__errno>
 80080c0:	eeb0 0a48 	vmov.f32	s0, s16
 80080c4:	ecbd 8b02 	vpop	{d8}
 80080c8:	6004      	str	r4, [r0, #0]
 80080ca:	bd10      	pop	{r4, pc}

080080cc <xflowf>:
 80080cc:	b130      	cbz	r0, 80080dc <xflowf+0x10>
 80080ce:	eef1 7a40 	vneg.f32	s15, s0
 80080d2:	ee27 0a80 	vmul.f32	s0, s15, s0
 80080d6:	2022      	movs	r0, #34	@ 0x22
 80080d8:	f7ff bfea 	b.w	80080b0 <with_errnof>
 80080dc:	eef0 7a40 	vmov.f32	s15, s0
 80080e0:	e7f7      	b.n	80080d2 <xflowf+0x6>
	...

080080e4 <__math_uflowf>:
 80080e4:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80080ec <__math_uflowf+0x8>
 80080e8:	f7ff bff0 	b.w	80080cc <xflowf>
 80080ec:	10000000 	.word	0x10000000

080080f0 <__math_oflowf>:
 80080f0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80080f8 <__math_oflowf+0x8>
 80080f4:	f7ff bfea 	b.w	80080cc <xflowf>
 80080f8:	70000000 	.word	0x70000000

080080fc <__ieee754_sqrtf>:
 80080fc:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8008100:	4770      	bx	lr

08008102 <atoi>:
 8008102:	220a      	movs	r2, #10
 8008104:	2100      	movs	r1, #0
 8008106:	f000 b87d 	b.w	8008204 <strtol>
	...

0800810c <_strtol_l.isra.0>:
 800810c:	2b24      	cmp	r3, #36	@ 0x24
 800810e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008112:	4686      	mov	lr, r0
 8008114:	4690      	mov	r8, r2
 8008116:	d801      	bhi.n	800811c <_strtol_l.isra.0+0x10>
 8008118:	2b01      	cmp	r3, #1
 800811a:	d106      	bne.n	800812a <_strtol_l.isra.0+0x1e>
 800811c:	f001 f95e 	bl	80093dc <__errno>
 8008120:	2316      	movs	r3, #22
 8008122:	6003      	str	r3, [r0, #0]
 8008124:	2000      	movs	r0, #0
 8008126:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800812a:	4834      	ldr	r0, [pc, #208]	@ (80081fc <_strtol_l.isra.0+0xf0>)
 800812c:	460d      	mov	r5, r1
 800812e:	462a      	mov	r2, r5
 8008130:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008134:	5d06      	ldrb	r6, [r0, r4]
 8008136:	f016 0608 	ands.w	r6, r6, #8
 800813a:	d1f8      	bne.n	800812e <_strtol_l.isra.0+0x22>
 800813c:	2c2d      	cmp	r4, #45	@ 0x2d
 800813e:	d110      	bne.n	8008162 <_strtol_l.isra.0+0x56>
 8008140:	782c      	ldrb	r4, [r5, #0]
 8008142:	2601      	movs	r6, #1
 8008144:	1c95      	adds	r5, r2, #2
 8008146:	f033 0210 	bics.w	r2, r3, #16
 800814a:	d115      	bne.n	8008178 <_strtol_l.isra.0+0x6c>
 800814c:	2c30      	cmp	r4, #48	@ 0x30
 800814e:	d10d      	bne.n	800816c <_strtol_l.isra.0+0x60>
 8008150:	782a      	ldrb	r2, [r5, #0]
 8008152:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008156:	2a58      	cmp	r2, #88	@ 0x58
 8008158:	d108      	bne.n	800816c <_strtol_l.isra.0+0x60>
 800815a:	786c      	ldrb	r4, [r5, #1]
 800815c:	3502      	adds	r5, #2
 800815e:	2310      	movs	r3, #16
 8008160:	e00a      	b.n	8008178 <_strtol_l.isra.0+0x6c>
 8008162:	2c2b      	cmp	r4, #43	@ 0x2b
 8008164:	bf04      	itt	eq
 8008166:	782c      	ldrbeq	r4, [r5, #0]
 8008168:	1c95      	addeq	r5, r2, #2
 800816a:	e7ec      	b.n	8008146 <_strtol_l.isra.0+0x3a>
 800816c:	2b00      	cmp	r3, #0
 800816e:	d1f6      	bne.n	800815e <_strtol_l.isra.0+0x52>
 8008170:	2c30      	cmp	r4, #48	@ 0x30
 8008172:	bf14      	ite	ne
 8008174:	230a      	movne	r3, #10
 8008176:	2308      	moveq	r3, #8
 8008178:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800817c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008180:	2200      	movs	r2, #0
 8008182:	fbbc f9f3 	udiv	r9, ip, r3
 8008186:	4610      	mov	r0, r2
 8008188:	fb03 ca19 	mls	sl, r3, r9, ip
 800818c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8008190:	2f09      	cmp	r7, #9
 8008192:	d80f      	bhi.n	80081b4 <_strtol_l.isra.0+0xa8>
 8008194:	463c      	mov	r4, r7
 8008196:	42a3      	cmp	r3, r4
 8008198:	dd1b      	ble.n	80081d2 <_strtol_l.isra.0+0xc6>
 800819a:	1c57      	adds	r7, r2, #1
 800819c:	d007      	beq.n	80081ae <_strtol_l.isra.0+0xa2>
 800819e:	4581      	cmp	r9, r0
 80081a0:	d314      	bcc.n	80081cc <_strtol_l.isra.0+0xc0>
 80081a2:	d101      	bne.n	80081a8 <_strtol_l.isra.0+0x9c>
 80081a4:	45a2      	cmp	sl, r4
 80081a6:	db11      	blt.n	80081cc <_strtol_l.isra.0+0xc0>
 80081a8:	fb00 4003 	mla	r0, r0, r3, r4
 80081ac:	2201      	movs	r2, #1
 80081ae:	f815 4b01 	ldrb.w	r4, [r5], #1
 80081b2:	e7eb      	b.n	800818c <_strtol_l.isra.0+0x80>
 80081b4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80081b8:	2f19      	cmp	r7, #25
 80081ba:	d801      	bhi.n	80081c0 <_strtol_l.isra.0+0xb4>
 80081bc:	3c37      	subs	r4, #55	@ 0x37
 80081be:	e7ea      	b.n	8008196 <_strtol_l.isra.0+0x8a>
 80081c0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80081c4:	2f19      	cmp	r7, #25
 80081c6:	d804      	bhi.n	80081d2 <_strtol_l.isra.0+0xc6>
 80081c8:	3c57      	subs	r4, #87	@ 0x57
 80081ca:	e7e4      	b.n	8008196 <_strtol_l.isra.0+0x8a>
 80081cc:	f04f 32ff 	mov.w	r2, #4294967295
 80081d0:	e7ed      	b.n	80081ae <_strtol_l.isra.0+0xa2>
 80081d2:	1c53      	adds	r3, r2, #1
 80081d4:	d108      	bne.n	80081e8 <_strtol_l.isra.0+0xdc>
 80081d6:	2322      	movs	r3, #34	@ 0x22
 80081d8:	f8ce 3000 	str.w	r3, [lr]
 80081dc:	4660      	mov	r0, ip
 80081de:	f1b8 0f00 	cmp.w	r8, #0
 80081e2:	d0a0      	beq.n	8008126 <_strtol_l.isra.0+0x1a>
 80081e4:	1e69      	subs	r1, r5, #1
 80081e6:	e006      	b.n	80081f6 <_strtol_l.isra.0+0xea>
 80081e8:	b106      	cbz	r6, 80081ec <_strtol_l.isra.0+0xe0>
 80081ea:	4240      	negs	r0, r0
 80081ec:	f1b8 0f00 	cmp.w	r8, #0
 80081f0:	d099      	beq.n	8008126 <_strtol_l.isra.0+0x1a>
 80081f2:	2a00      	cmp	r2, #0
 80081f4:	d1f6      	bne.n	80081e4 <_strtol_l.isra.0+0xd8>
 80081f6:	f8c8 1000 	str.w	r1, [r8]
 80081fa:	e794      	b.n	8008126 <_strtol_l.isra.0+0x1a>
 80081fc:	0800cbf9 	.word	0x0800cbf9

08008200 <_strtol_r>:
 8008200:	f7ff bf84 	b.w	800810c <_strtol_l.isra.0>

08008204 <strtol>:
 8008204:	4613      	mov	r3, r2
 8008206:	460a      	mov	r2, r1
 8008208:	4601      	mov	r1, r0
 800820a:	4802      	ldr	r0, [pc, #8]	@ (8008214 <strtol+0x10>)
 800820c:	6800      	ldr	r0, [r0, #0]
 800820e:	f7ff bf7d 	b.w	800810c <_strtol_l.isra.0>
 8008212:	bf00      	nop
 8008214:	20000064 	.word	0x20000064

08008218 <__cvt>:
 8008218:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800821c:	ec57 6b10 	vmov	r6, r7, d0
 8008220:	2f00      	cmp	r7, #0
 8008222:	460c      	mov	r4, r1
 8008224:	4619      	mov	r1, r3
 8008226:	463b      	mov	r3, r7
 8008228:	bfbb      	ittet	lt
 800822a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800822e:	461f      	movlt	r7, r3
 8008230:	2300      	movge	r3, #0
 8008232:	232d      	movlt	r3, #45	@ 0x2d
 8008234:	700b      	strb	r3, [r1, #0]
 8008236:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008238:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800823c:	4691      	mov	r9, r2
 800823e:	f023 0820 	bic.w	r8, r3, #32
 8008242:	bfbc      	itt	lt
 8008244:	4632      	movlt	r2, r6
 8008246:	4616      	movlt	r6, r2
 8008248:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800824c:	d005      	beq.n	800825a <__cvt+0x42>
 800824e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8008252:	d100      	bne.n	8008256 <__cvt+0x3e>
 8008254:	3401      	adds	r4, #1
 8008256:	2102      	movs	r1, #2
 8008258:	e000      	b.n	800825c <__cvt+0x44>
 800825a:	2103      	movs	r1, #3
 800825c:	ab03      	add	r3, sp, #12
 800825e:	9301      	str	r3, [sp, #4]
 8008260:	ab02      	add	r3, sp, #8
 8008262:	9300      	str	r3, [sp, #0]
 8008264:	ec47 6b10 	vmov	d0, r6, r7
 8008268:	4653      	mov	r3, sl
 800826a:	4622      	mov	r2, r4
 800826c:	f001 f974 	bl	8009558 <_dtoa_r>
 8008270:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8008274:	4605      	mov	r5, r0
 8008276:	d119      	bne.n	80082ac <__cvt+0x94>
 8008278:	f019 0f01 	tst.w	r9, #1
 800827c:	d00e      	beq.n	800829c <__cvt+0x84>
 800827e:	eb00 0904 	add.w	r9, r0, r4
 8008282:	2200      	movs	r2, #0
 8008284:	2300      	movs	r3, #0
 8008286:	4630      	mov	r0, r6
 8008288:	4639      	mov	r1, r7
 800828a:	f7f8 fc4d 	bl	8000b28 <__aeabi_dcmpeq>
 800828e:	b108      	cbz	r0, 8008294 <__cvt+0x7c>
 8008290:	f8cd 900c 	str.w	r9, [sp, #12]
 8008294:	2230      	movs	r2, #48	@ 0x30
 8008296:	9b03      	ldr	r3, [sp, #12]
 8008298:	454b      	cmp	r3, r9
 800829a:	d31e      	bcc.n	80082da <__cvt+0xc2>
 800829c:	9b03      	ldr	r3, [sp, #12]
 800829e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80082a0:	1b5b      	subs	r3, r3, r5
 80082a2:	4628      	mov	r0, r5
 80082a4:	6013      	str	r3, [r2, #0]
 80082a6:	b004      	add	sp, #16
 80082a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082ac:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80082b0:	eb00 0904 	add.w	r9, r0, r4
 80082b4:	d1e5      	bne.n	8008282 <__cvt+0x6a>
 80082b6:	7803      	ldrb	r3, [r0, #0]
 80082b8:	2b30      	cmp	r3, #48	@ 0x30
 80082ba:	d10a      	bne.n	80082d2 <__cvt+0xba>
 80082bc:	2200      	movs	r2, #0
 80082be:	2300      	movs	r3, #0
 80082c0:	4630      	mov	r0, r6
 80082c2:	4639      	mov	r1, r7
 80082c4:	f7f8 fc30 	bl	8000b28 <__aeabi_dcmpeq>
 80082c8:	b918      	cbnz	r0, 80082d2 <__cvt+0xba>
 80082ca:	f1c4 0401 	rsb	r4, r4, #1
 80082ce:	f8ca 4000 	str.w	r4, [sl]
 80082d2:	f8da 3000 	ldr.w	r3, [sl]
 80082d6:	4499      	add	r9, r3
 80082d8:	e7d3      	b.n	8008282 <__cvt+0x6a>
 80082da:	1c59      	adds	r1, r3, #1
 80082dc:	9103      	str	r1, [sp, #12]
 80082de:	701a      	strb	r2, [r3, #0]
 80082e0:	e7d9      	b.n	8008296 <__cvt+0x7e>

080082e2 <__exponent>:
 80082e2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80082e4:	2900      	cmp	r1, #0
 80082e6:	bfba      	itte	lt
 80082e8:	4249      	neglt	r1, r1
 80082ea:	232d      	movlt	r3, #45	@ 0x2d
 80082ec:	232b      	movge	r3, #43	@ 0x2b
 80082ee:	2909      	cmp	r1, #9
 80082f0:	7002      	strb	r2, [r0, #0]
 80082f2:	7043      	strb	r3, [r0, #1]
 80082f4:	dd29      	ble.n	800834a <__exponent+0x68>
 80082f6:	f10d 0307 	add.w	r3, sp, #7
 80082fa:	461d      	mov	r5, r3
 80082fc:	270a      	movs	r7, #10
 80082fe:	461a      	mov	r2, r3
 8008300:	fbb1 f6f7 	udiv	r6, r1, r7
 8008304:	fb07 1416 	mls	r4, r7, r6, r1
 8008308:	3430      	adds	r4, #48	@ 0x30
 800830a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800830e:	460c      	mov	r4, r1
 8008310:	2c63      	cmp	r4, #99	@ 0x63
 8008312:	f103 33ff 	add.w	r3, r3, #4294967295
 8008316:	4631      	mov	r1, r6
 8008318:	dcf1      	bgt.n	80082fe <__exponent+0x1c>
 800831a:	3130      	adds	r1, #48	@ 0x30
 800831c:	1e94      	subs	r4, r2, #2
 800831e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008322:	1c41      	adds	r1, r0, #1
 8008324:	4623      	mov	r3, r4
 8008326:	42ab      	cmp	r3, r5
 8008328:	d30a      	bcc.n	8008340 <__exponent+0x5e>
 800832a:	f10d 0309 	add.w	r3, sp, #9
 800832e:	1a9b      	subs	r3, r3, r2
 8008330:	42ac      	cmp	r4, r5
 8008332:	bf88      	it	hi
 8008334:	2300      	movhi	r3, #0
 8008336:	3302      	adds	r3, #2
 8008338:	4403      	add	r3, r0
 800833a:	1a18      	subs	r0, r3, r0
 800833c:	b003      	add	sp, #12
 800833e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008340:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008344:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008348:	e7ed      	b.n	8008326 <__exponent+0x44>
 800834a:	2330      	movs	r3, #48	@ 0x30
 800834c:	3130      	adds	r1, #48	@ 0x30
 800834e:	7083      	strb	r3, [r0, #2]
 8008350:	70c1      	strb	r1, [r0, #3]
 8008352:	1d03      	adds	r3, r0, #4
 8008354:	e7f1      	b.n	800833a <__exponent+0x58>
	...

08008358 <_printf_float>:
 8008358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800835c:	b08d      	sub	sp, #52	@ 0x34
 800835e:	460c      	mov	r4, r1
 8008360:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8008364:	4616      	mov	r6, r2
 8008366:	461f      	mov	r7, r3
 8008368:	4605      	mov	r5, r0
 800836a:	f000 ffed 	bl	8009348 <_localeconv_r>
 800836e:	6803      	ldr	r3, [r0, #0]
 8008370:	9304      	str	r3, [sp, #16]
 8008372:	4618      	mov	r0, r3
 8008374:	f7f7 ffac 	bl	80002d0 <strlen>
 8008378:	2300      	movs	r3, #0
 800837a:	930a      	str	r3, [sp, #40]	@ 0x28
 800837c:	f8d8 3000 	ldr.w	r3, [r8]
 8008380:	9005      	str	r0, [sp, #20]
 8008382:	3307      	adds	r3, #7
 8008384:	f023 0307 	bic.w	r3, r3, #7
 8008388:	f103 0208 	add.w	r2, r3, #8
 800838c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008390:	f8d4 b000 	ldr.w	fp, [r4]
 8008394:	f8c8 2000 	str.w	r2, [r8]
 8008398:	e9d3 8900 	ldrd	r8, r9, [r3]
 800839c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80083a0:	9307      	str	r3, [sp, #28]
 80083a2:	f8cd 8018 	str.w	r8, [sp, #24]
 80083a6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80083aa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80083ae:	4b9c      	ldr	r3, [pc, #624]	@ (8008620 <_printf_float+0x2c8>)
 80083b0:	f04f 32ff 	mov.w	r2, #4294967295
 80083b4:	f7f8 fbea 	bl	8000b8c <__aeabi_dcmpun>
 80083b8:	bb70      	cbnz	r0, 8008418 <_printf_float+0xc0>
 80083ba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80083be:	4b98      	ldr	r3, [pc, #608]	@ (8008620 <_printf_float+0x2c8>)
 80083c0:	f04f 32ff 	mov.w	r2, #4294967295
 80083c4:	f7f8 fbc4 	bl	8000b50 <__aeabi_dcmple>
 80083c8:	bb30      	cbnz	r0, 8008418 <_printf_float+0xc0>
 80083ca:	2200      	movs	r2, #0
 80083cc:	2300      	movs	r3, #0
 80083ce:	4640      	mov	r0, r8
 80083d0:	4649      	mov	r1, r9
 80083d2:	f7f8 fbb3 	bl	8000b3c <__aeabi_dcmplt>
 80083d6:	b110      	cbz	r0, 80083de <_printf_float+0x86>
 80083d8:	232d      	movs	r3, #45	@ 0x2d
 80083da:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80083de:	4a91      	ldr	r2, [pc, #580]	@ (8008624 <_printf_float+0x2cc>)
 80083e0:	4b91      	ldr	r3, [pc, #580]	@ (8008628 <_printf_float+0x2d0>)
 80083e2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80083e6:	bf8c      	ite	hi
 80083e8:	4690      	movhi	r8, r2
 80083ea:	4698      	movls	r8, r3
 80083ec:	2303      	movs	r3, #3
 80083ee:	6123      	str	r3, [r4, #16]
 80083f0:	f02b 0304 	bic.w	r3, fp, #4
 80083f4:	6023      	str	r3, [r4, #0]
 80083f6:	f04f 0900 	mov.w	r9, #0
 80083fa:	9700      	str	r7, [sp, #0]
 80083fc:	4633      	mov	r3, r6
 80083fe:	aa0b      	add	r2, sp, #44	@ 0x2c
 8008400:	4621      	mov	r1, r4
 8008402:	4628      	mov	r0, r5
 8008404:	f000 f9d2 	bl	80087ac <_printf_common>
 8008408:	3001      	adds	r0, #1
 800840a:	f040 808d 	bne.w	8008528 <_printf_float+0x1d0>
 800840e:	f04f 30ff 	mov.w	r0, #4294967295
 8008412:	b00d      	add	sp, #52	@ 0x34
 8008414:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008418:	4642      	mov	r2, r8
 800841a:	464b      	mov	r3, r9
 800841c:	4640      	mov	r0, r8
 800841e:	4649      	mov	r1, r9
 8008420:	f7f8 fbb4 	bl	8000b8c <__aeabi_dcmpun>
 8008424:	b140      	cbz	r0, 8008438 <_printf_float+0xe0>
 8008426:	464b      	mov	r3, r9
 8008428:	2b00      	cmp	r3, #0
 800842a:	bfbc      	itt	lt
 800842c:	232d      	movlt	r3, #45	@ 0x2d
 800842e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8008432:	4a7e      	ldr	r2, [pc, #504]	@ (800862c <_printf_float+0x2d4>)
 8008434:	4b7e      	ldr	r3, [pc, #504]	@ (8008630 <_printf_float+0x2d8>)
 8008436:	e7d4      	b.n	80083e2 <_printf_float+0x8a>
 8008438:	6863      	ldr	r3, [r4, #4]
 800843a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800843e:	9206      	str	r2, [sp, #24]
 8008440:	1c5a      	adds	r2, r3, #1
 8008442:	d13b      	bne.n	80084bc <_printf_float+0x164>
 8008444:	2306      	movs	r3, #6
 8008446:	6063      	str	r3, [r4, #4]
 8008448:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800844c:	2300      	movs	r3, #0
 800844e:	6022      	str	r2, [r4, #0]
 8008450:	9303      	str	r3, [sp, #12]
 8008452:	ab0a      	add	r3, sp, #40	@ 0x28
 8008454:	e9cd a301 	strd	sl, r3, [sp, #4]
 8008458:	ab09      	add	r3, sp, #36	@ 0x24
 800845a:	9300      	str	r3, [sp, #0]
 800845c:	6861      	ldr	r1, [r4, #4]
 800845e:	ec49 8b10 	vmov	d0, r8, r9
 8008462:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8008466:	4628      	mov	r0, r5
 8008468:	f7ff fed6 	bl	8008218 <__cvt>
 800846c:	9b06      	ldr	r3, [sp, #24]
 800846e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008470:	2b47      	cmp	r3, #71	@ 0x47
 8008472:	4680      	mov	r8, r0
 8008474:	d129      	bne.n	80084ca <_printf_float+0x172>
 8008476:	1cc8      	adds	r0, r1, #3
 8008478:	db02      	blt.n	8008480 <_printf_float+0x128>
 800847a:	6863      	ldr	r3, [r4, #4]
 800847c:	4299      	cmp	r1, r3
 800847e:	dd41      	ble.n	8008504 <_printf_float+0x1ac>
 8008480:	f1aa 0a02 	sub.w	sl, sl, #2
 8008484:	fa5f fa8a 	uxtb.w	sl, sl
 8008488:	3901      	subs	r1, #1
 800848a:	4652      	mov	r2, sl
 800848c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008490:	9109      	str	r1, [sp, #36]	@ 0x24
 8008492:	f7ff ff26 	bl	80082e2 <__exponent>
 8008496:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008498:	1813      	adds	r3, r2, r0
 800849a:	2a01      	cmp	r2, #1
 800849c:	4681      	mov	r9, r0
 800849e:	6123      	str	r3, [r4, #16]
 80084a0:	dc02      	bgt.n	80084a8 <_printf_float+0x150>
 80084a2:	6822      	ldr	r2, [r4, #0]
 80084a4:	07d2      	lsls	r2, r2, #31
 80084a6:	d501      	bpl.n	80084ac <_printf_float+0x154>
 80084a8:	3301      	adds	r3, #1
 80084aa:	6123      	str	r3, [r4, #16]
 80084ac:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d0a2      	beq.n	80083fa <_printf_float+0xa2>
 80084b4:	232d      	movs	r3, #45	@ 0x2d
 80084b6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80084ba:	e79e      	b.n	80083fa <_printf_float+0xa2>
 80084bc:	9a06      	ldr	r2, [sp, #24]
 80084be:	2a47      	cmp	r2, #71	@ 0x47
 80084c0:	d1c2      	bne.n	8008448 <_printf_float+0xf0>
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d1c0      	bne.n	8008448 <_printf_float+0xf0>
 80084c6:	2301      	movs	r3, #1
 80084c8:	e7bd      	b.n	8008446 <_printf_float+0xee>
 80084ca:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80084ce:	d9db      	bls.n	8008488 <_printf_float+0x130>
 80084d0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80084d4:	d118      	bne.n	8008508 <_printf_float+0x1b0>
 80084d6:	2900      	cmp	r1, #0
 80084d8:	6863      	ldr	r3, [r4, #4]
 80084da:	dd0b      	ble.n	80084f4 <_printf_float+0x19c>
 80084dc:	6121      	str	r1, [r4, #16]
 80084de:	b913      	cbnz	r3, 80084e6 <_printf_float+0x18e>
 80084e0:	6822      	ldr	r2, [r4, #0]
 80084e2:	07d0      	lsls	r0, r2, #31
 80084e4:	d502      	bpl.n	80084ec <_printf_float+0x194>
 80084e6:	3301      	adds	r3, #1
 80084e8:	440b      	add	r3, r1
 80084ea:	6123      	str	r3, [r4, #16]
 80084ec:	65a1      	str	r1, [r4, #88]	@ 0x58
 80084ee:	f04f 0900 	mov.w	r9, #0
 80084f2:	e7db      	b.n	80084ac <_printf_float+0x154>
 80084f4:	b913      	cbnz	r3, 80084fc <_printf_float+0x1a4>
 80084f6:	6822      	ldr	r2, [r4, #0]
 80084f8:	07d2      	lsls	r2, r2, #31
 80084fa:	d501      	bpl.n	8008500 <_printf_float+0x1a8>
 80084fc:	3302      	adds	r3, #2
 80084fe:	e7f4      	b.n	80084ea <_printf_float+0x192>
 8008500:	2301      	movs	r3, #1
 8008502:	e7f2      	b.n	80084ea <_printf_float+0x192>
 8008504:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8008508:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800850a:	4299      	cmp	r1, r3
 800850c:	db05      	blt.n	800851a <_printf_float+0x1c2>
 800850e:	6823      	ldr	r3, [r4, #0]
 8008510:	6121      	str	r1, [r4, #16]
 8008512:	07d8      	lsls	r0, r3, #31
 8008514:	d5ea      	bpl.n	80084ec <_printf_float+0x194>
 8008516:	1c4b      	adds	r3, r1, #1
 8008518:	e7e7      	b.n	80084ea <_printf_float+0x192>
 800851a:	2900      	cmp	r1, #0
 800851c:	bfd4      	ite	le
 800851e:	f1c1 0202 	rsble	r2, r1, #2
 8008522:	2201      	movgt	r2, #1
 8008524:	4413      	add	r3, r2
 8008526:	e7e0      	b.n	80084ea <_printf_float+0x192>
 8008528:	6823      	ldr	r3, [r4, #0]
 800852a:	055a      	lsls	r2, r3, #21
 800852c:	d407      	bmi.n	800853e <_printf_float+0x1e6>
 800852e:	6923      	ldr	r3, [r4, #16]
 8008530:	4642      	mov	r2, r8
 8008532:	4631      	mov	r1, r6
 8008534:	4628      	mov	r0, r5
 8008536:	47b8      	blx	r7
 8008538:	3001      	adds	r0, #1
 800853a:	d12b      	bne.n	8008594 <_printf_float+0x23c>
 800853c:	e767      	b.n	800840e <_printf_float+0xb6>
 800853e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008542:	f240 80dd 	bls.w	8008700 <_printf_float+0x3a8>
 8008546:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800854a:	2200      	movs	r2, #0
 800854c:	2300      	movs	r3, #0
 800854e:	f7f8 faeb 	bl	8000b28 <__aeabi_dcmpeq>
 8008552:	2800      	cmp	r0, #0
 8008554:	d033      	beq.n	80085be <_printf_float+0x266>
 8008556:	4a37      	ldr	r2, [pc, #220]	@ (8008634 <_printf_float+0x2dc>)
 8008558:	2301      	movs	r3, #1
 800855a:	4631      	mov	r1, r6
 800855c:	4628      	mov	r0, r5
 800855e:	47b8      	blx	r7
 8008560:	3001      	adds	r0, #1
 8008562:	f43f af54 	beq.w	800840e <_printf_float+0xb6>
 8008566:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800856a:	4543      	cmp	r3, r8
 800856c:	db02      	blt.n	8008574 <_printf_float+0x21c>
 800856e:	6823      	ldr	r3, [r4, #0]
 8008570:	07d8      	lsls	r0, r3, #31
 8008572:	d50f      	bpl.n	8008594 <_printf_float+0x23c>
 8008574:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008578:	4631      	mov	r1, r6
 800857a:	4628      	mov	r0, r5
 800857c:	47b8      	blx	r7
 800857e:	3001      	adds	r0, #1
 8008580:	f43f af45 	beq.w	800840e <_printf_float+0xb6>
 8008584:	f04f 0900 	mov.w	r9, #0
 8008588:	f108 38ff 	add.w	r8, r8, #4294967295
 800858c:	f104 0a1a 	add.w	sl, r4, #26
 8008590:	45c8      	cmp	r8, r9
 8008592:	dc09      	bgt.n	80085a8 <_printf_float+0x250>
 8008594:	6823      	ldr	r3, [r4, #0]
 8008596:	079b      	lsls	r3, r3, #30
 8008598:	f100 8103 	bmi.w	80087a2 <_printf_float+0x44a>
 800859c:	68e0      	ldr	r0, [r4, #12]
 800859e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80085a0:	4298      	cmp	r0, r3
 80085a2:	bfb8      	it	lt
 80085a4:	4618      	movlt	r0, r3
 80085a6:	e734      	b.n	8008412 <_printf_float+0xba>
 80085a8:	2301      	movs	r3, #1
 80085aa:	4652      	mov	r2, sl
 80085ac:	4631      	mov	r1, r6
 80085ae:	4628      	mov	r0, r5
 80085b0:	47b8      	blx	r7
 80085b2:	3001      	adds	r0, #1
 80085b4:	f43f af2b 	beq.w	800840e <_printf_float+0xb6>
 80085b8:	f109 0901 	add.w	r9, r9, #1
 80085bc:	e7e8      	b.n	8008590 <_printf_float+0x238>
 80085be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	dc39      	bgt.n	8008638 <_printf_float+0x2e0>
 80085c4:	4a1b      	ldr	r2, [pc, #108]	@ (8008634 <_printf_float+0x2dc>)
 80085c6:	2301      	movs	r3, #1
 80085c8:	4631      	mov	r1, r6
 80085ca:	4628      	mov	r0, r5
 80085cc:	47b8      	blx	r7
 80085ce:	3001      	adds	r0, #1
 80085d0:	f43f af1d 	beq.w	800840e <_printf_float+0xb6>
 80085d4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80085d8:	ea59 0303 	orrs.w	r3, r9, r3
 80085dc:	d102      	bne.n	80085e4 <_printf_float+0x28c>
 80085de:	6823      	ldr	r3, [r4, #0]
 80085e0:	07d9      	lsls	r1, r3, #31
 80085e2:	d5d7      	bpl.n	8008594 <_printf_float+0x23c>
 80085e4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80085e8:	4631      	mov	r1, r6
 80085ea:	4628      	mov	r0, r5
 80085ec:	47b8      	blx	r7
 80085ee:	3001      	adds	r0, #1
 80085f0:	f43f af0d 	beq.w	800840e <_printf_float+0xb6>
 80085f4:	f04f 0a00 	mov.w	sl, #0
 80085f8:	f104 0b1a 	add.w	fp, r4, #26
 80085fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085fe:	425b      	negs	r3, r3
 8008600:	4553      	cmp	r3, sl
 8008602:	dc01      	bgt.n	8008608 <_printf_float+0x2b0>
 8008604:	464b      	mov	r3, r9
 8008606:	e793      	b.n	8008530 <_printf_float+0x1d8>
 8008608:	2301      	movs	r3, #1
 800860a:	465a      	mov	r2, fp
 800860c:	4631      	mov	r1, r6
 800860e:	4628      	mov	r0, r5
 8008610:	47b8      	blx	r7
 8008612:	3001      	adds	r0, #1
 8008614:	f43f aefb 	beq.w	800840e <_printf_float+0xb6>
 8008618:	f10a 0a01 	add.w	sl, sl, #1
 800861c:	e7ee      	b.n	80085fc <_printf_float+0x2a4>
 800861e:	bf00      	nop
 8008620:	7fefffff 	.word	0x7fefffff
 8008624:	0800ccfd 	.word	0x0800ccfd
 8008628:	0800ccf9 	.word	0x0800ccf9
 800862c:	0800cd05 	.word	0x0800cd05
 8008630:	0800cd01 	.word	0x0800cd01
 8008634:	0800cd09 	.word	0x0800cd09
 8008638:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800863a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800863e:	4553      	cmp	r3, sl
 8008640:	bfa8      	it	ge
 8008642:	4653      	movge	r3, sl
 8008644:	2b00      	cmp	r3, #0
 8008646:	4699      	mov	r9, r3
 8008648:	dc36      	bgt.n	80086b8 <_printf_float+0x360>
 800864a:	f04f 0b00 	mov.w	fp, #0
 800864e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008652:	f104 021a 	add.w	r2, r4, #26
 8008656:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008658:	9306      	str	r3, [sp, #24]
 800865a:	eba3 0309 	sub.w	r3, r3, r9
 800865e:	455b      	cmp	r3, fp
 8008660:	dc31      	bgt.n	80086c6 <_printf_float+0x36e>
 8008662:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008664:	459a      	cmp	sl, r3
 8008666:	dc3a      	bgt.n	80086de <_printf_float+0x386>
 8008668:	6823      	ldr	r3, [r4, #0]
 800866a:	07da      	lsls	r2, r3, #31
 800866c:	d437      	bmi.n	80086de <_printf_float+0x386>
 800866e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008670:	ebaa 0903 	sub.w	r9, sl, r3
 8008674:	9b06      	ldr	r3, [sp, #24]
 8008676:	ebaa 0303 	sub.w	r3, sl, r3
 800867a:	4599      	cmp	r9, r3
 800867c:	bfa8      	it	ge
 800867e:	4699      	movge	r9, r3
 8008680:	f1b9 0f00 	cmp.w	r9, #0
 8008684:	dc33      	bgt.n	80086ee <_printf_float+0x396>
 8008686:	f04f 0800 	mov.w	r8, #0
 800868a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800868e:	f104 0b1a 	add.w	fp, r4, #26
 8008692:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008694:	ebaa 0303 	sub.w	r3, sl, r3
 8008698:	eba3 0309 	sub.w	r3, r3, r9
 800869c:	4543      	cmp	r3, r8
 800869e:	f77f af79 	ble.w	8008594 <_printf_float+0x23c>
 80086a2:	2301      	movs	r3, #1
 80086a4:	465a      	mov	r2, fp
 80086a6:	4631      	mov	r1, r6
 80086a8:	4628      	mov	r0, r5
 80086aa:	47b8      	blx	r7
 80086ac:	3001      	adds	r0, #1
 80086ae:	f43f aeae 	beq.w	800840e <_printf_float+0xb6>
 80086b2:	f108 0801 	add.w	r8, r8, #1
 80086b6:	e7ec      	b.n	8008692 <_printf_float+0x33a>
 80086b8:	4642      	mov	r2, r8
 80086ba:	4631      	mov	r1, r6
 80086bc:	4628      	mov	r0, r5
 80086be:	47b8      	blx	r7
 80086c0:	3001      	adds	r0, #1
 80086c2:	d1c2      	bne.n	800864a <_printf_float+0x2f2>
 80086c4:	e6a3      	b.n	800840e <_printf_float+0xb6>
 80086c6:	2301      	movs	r3, #1
 80086c8:	4631      	mov	r1, r6
 80086ca:	4628      	mov	r0, r5
 80086cc:	9206      	str	r2, [sp, #24]
 80086ce:	47b8      	blx	r7
 80086d0:	3001      	adds	r0, #1
 80086d2:	f43f ae9c 	beq.w	800840e <_printf_float+0xb6>
 80086d6:	9a06      	ldr	r2, [sp, #24]
 80086d8:	f10b 0b01 	add.w	fp, fp, #1
 80086dc:	e7bb      	b.n	8008656 <_printf_float+0x2fe>
 80086de:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80086e2:	4631      	mov	r1, r6
 80086e4:	4628      	mov	r0, r5
 80086e6:	47b8      	blx	r7
 80086e8:	3001      	adds	r0, #1
 80086ea:	d1c0      	bne.n	800866e <_printf_float+0x316>
 80086ec:	e68f      	b.n	800840e <_printf_float+0xb6>
 80086ee:	9a06      	ldr	r2, [sp, #24]
 80086f0:	464b      	mov	r3, r9
 80086f2:	4442      	add	r2, r8
 80086f4:	4631      	mov	r1, r6
 80086f6:	4628      	mov	r0, r5
 80086f8:	47b8      	blx	r7
 80086fa:	3001      	adds	r0, #1
 80086fc:	d1c3      	bne.n	8008686 <_printf_float+0x32e>
 80086fe:	e686      	b.n	800840e <_printf_float+0xb6>
 8008700:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008704:	f1ba 0f01 	cmp.w	sl, #1
 8008708:	dc01      	bgt.n	800870e <_printf_float+0x3b6>
 800870a:	07db      	lsls	r3, r3, #31
 800870c:	d536      	bpl.n	800877c <_printf_float+0x424>
 800870e:	2301      	movs	r3, #1
 8008710:	4642      	mov	r2, r8
 8008712:	4631      	mov	r1, r6
 8008714:	4628      	mov	r0, r5
 8008716:	47b8      	blx	r7
 8008718:	3001      	adds	r0, #1
 800871a:	f43f ae78 	beq.w	800840e <_printf_float+0xb6>
 800871e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008722:	4631      	mov	r1, r6
 8008724:	4628      	mov	r0, r5
 8008726:	47b8      	blx	r7
 8008728:	3001      	adds	r0, #1
 800872a:	f43f ae70 	beq.w	800840e <_printf_float+0xb6>
 800872e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008732:	2200      	movs	r2, #0
 8008734:	2300      	movs	r3, #0
 8008736:	f10a 3aff 	add.w	sl, sl, #4294967295
 800873a:	f7f8 f9f5 	bl	8000b28 <__aeabi_dcmpeq>
 800873e:	b9c0      	cbnz	r0, 8008772 <_printf_float+0x41a>
 8008740:	4653      	mov	r3, sl
 8008742:	f108 0201 	add.w	r2, r8, #1
 8008746:	4631      	mov	r1, r6
 8008748:	4628      	mov	r0, r5
 800874a:	47b8      	blx	r7
 800874c:	3001      	adds	r0, #1
 800874e:	d10c      	bne.n	800876a <_printf_float+0x412>
 8008750:	e65d      	b.n	800840e <_printf_float+0xb6>
 8008752:	2301      	movs	r3, #1
 8008754:	465a      	mov	r2, fp
 8008756:	4631      	mov	r1, r6
 8008758:	4628      	mov	r0, r5
 800875a:	47b8      	blx	r7
 800875c:	3001      	adds	r0, #1
 800875e:	f43f ae56 	beq.w	800840e <_printf_float+0xb6>
 8008762:	f108 0801 	add.w	r8, r8, #1
 8008766:	45d0      	cmp	r8, sl
 8008768:	dbf3      	blt.n	8008752 <_printf_float+0x3fa>
 800876a:	464b      	mov	r3, r9
 800876c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008770:	e6df      	b.n	8008532 <_printf_float+0x1da>
 8008772:	f04f 0800 	mov.w	r8, #0
 8008776:	f104 0b1a 	add.w	fp, r4, #26
 800877a:	e7f4      	b.n	8008766 <_printf_float+0x40e>
 800877c:	2301      	movs	r3, #1
 800877e:	4642      	mov	r2, r8
 8008780:	e7e1      	b.n	8008746 <_printf_float+0x3ee>
 8008782:	2301      	movs	r3, #1
 8008784:	464a      	mov	r2, r9
 8008786:	4631      	mov	r1, r6
 8008788:	4628      	mov	r0, r5
 800878a:	47b8      	blx	r7
 800878c:	3001      	adds	r0, #1
 800878e:	f43f ae3e 	beq.w	800840e <_printf_float+0xb6>
 8008792:	f108 0801 	add.w	r8, r8, #1
 8008796:	68e3      	ldr	r3, [r4, #12]
 8008798:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800879a:	1a5b      	subs	r3, r3, r1
 800879c:	4543      	cmp	r3, r8
 800879e:	dcf0      	bgt.n	8008782 <_printf_float+0x42a>
 80087a0:	e6fc      	b.n	800859c <_printf_float+0x244>
 80087a2:	f04f 0800 	mov.w	r8, #0
 80087a6:	f104 0919 	add.w	r9, r4, #25
 80087aa:	e7f4      	b.n	8008796 <_printf_float+0x43e>

080087ac <_printf_common>:
 80087ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80087b0:	4616      	mov	r6, r2
 80087b2:	4698      	mov	r8, r3
 80087b4:	688a      	ldr	r2, [r1, #8]
 80087b6:	690b      	ldr	r3, [r1, #16]
 80087b8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80087bc:	4293      	cmp	r3, r2
 80087be:	bfb8      	it	lt
 80087c0:	4613      	movlt	r3, r2
 80087c2:	6033      	str	r3, [r6, #0]
 80087c4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80087c8:	4607      	mov	r7, r0
 80087ca:	460c      	mov	r4, r1
 80087cc:	b10a      	cbz	r2, 80087d2 <_printf_common+0x26>
 80087ce:	3301      	adds	r3, #1
 80087d0:	6033      	str	r3, [r6, #0]
 80087d2:	6823      	ldr	r3, [r4, #0]
 80087d4:	0699      	lsls	r1, r3, #26
 80087d6:	bf42      	ittt	mi
 80087d8:	6833      	ldrmi	r3, [r6, #0]
 80087da:	3302      	addmi	r3, #2
 80087dc:	6033      	strmi	r3, [r6, #0]
 80087de:	6825      	ldr	r5, [r4, #0]
 80087e0:	f015 0506 	ands.w	r5, r5, #6
 80087e4:	d106      	bne.n	80087f4 <_printf_common+0x48>
 80087e6:	f104 0a19 	add.w	sl, r4, #25
 80087ea:	68e3      	ldr	r3, [r4, #12]
 80087ec:	6832      	ldr	r2, [r6, #0]
 80087ee:	1a9b      	subs	r3, r3, r2
 80087f0:	42ab      	cmp	r3, r5
 80087f2:	dc26      	bgt.n	8008842 <_printf_common+0x96>
 80087f4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80087f8:	6822      	ldr	r2, [r4, #0]
 80087fa:	3b00      	subs	r3, #0
 80087fc:	bf18      	it	ne
 80087fe:	2301      	movne	r3, #1
 8008800:	0692      	lsls	r2, r2, #26
 8008802:	d42b      	bmi.n	800885c <_printf_common+0xb0>
 8008804:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008808:	4641      	mov	r1, r8
 800880a:	4638      	mov	r0, r7
 800880c:	47c8      	blx	r9
 800880e:	3001      	adds	r0, #1
 8008810:	d01e      	beq.n	8008850 <_printf_common+0xa4>
 8008812:	6823      	ldr	r3, [r4, #0]
 8008814:	6922      	ldr	r2, [r4, #16]
 8008816:	f003 0306 	and.w	r3, r3, #6
 800881a:	2b04      	cmp	r3, #4
 800881c:	bf02      	ittt	eq
 800881e:	68e5      	ldreq	r5, [r4, #12]
 8008820:	6833      	ldreq	r3, [r6, #0]
 8008822:	1aed      	subeq	r5, r5, r3
 8008824:	68a3      	ldr	r3, [r4, #8]
 8008826:	bf0c      	ite	eq
 8008828:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800882c:	2500      	movne	r5, #0
 800882e:	4293      	cmp	r3, r2
 8008830:	bfc4      	itt	gt
 8008832:	1a9b      	subgt	r3, r3, r2
 8008834:	18ed      	addgt	r5, r5, r3
 8008836:	2600      	movs	r6, #0
 8008838:	341a      	adds	r4, #26
 800883a:	42b5      	cmp	r5, r6
 800883c:	d11a      	bne.n	8008874 <_printf_common+0xc8>
 800883e:	2000      	movs	r0, #0
 8008840:	e008      	b.n	8008854 <_printf_common+0xa8>
 8008842:	2301      	movs	r3, #1
 8008844:	4652      	mov	r2, sl
 8008846:	4641      	mov	r1, r8
 8008848:	4638      	mov	r0, r7
 800884a:	47c8      	blx	r9
 800884c:	3001      	adds	r0, #1
 800884e:	d103      	bne.n	8008858 <_printf_common+0xac>
 8008850:	f04f 30ff 	mov.w	r0, #4294967295
 8008854:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008858:	3501      	adds	r5, #1
 800885a:	e7c6      	b.n	80087ea <_printf_common+0x3e>
 800885c:	18e1      	adds	r1, r4, r3
 800885e:	1c5a      	adds	r2, r3, #1
 8008860:	2030      	movs	r0, #48	@ 0x30
 8008862:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008866:	4422      	add	r2, r4
 8008868:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800886c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008870:	3302      	adds	r3, #2
 8008872:	e7c7      	b.n	8008804 <_printf_common+0x58>
 8008874:	2301      	movs	r3, #1
 8008876:	4622      	mov	r2, r4
 8008878:	4641      	mov	r1, r8
 800887a:	4638      	mov	r0, r7
 800887c:	47c8      	blx	r9
 800887e:	3001      	adds	r0, #1
 8008880:	d0e6      	beq.n	8008850 <_printf_common+0xa4>
 8008882:	3601      	adds	r6, #1
 8008884:	e7d9      	b.n	800883a <_printf_common+0x8e>
	...

08008888 <_printf_i>:
 8008888:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800888c:	7e0f      	ldrb	r7, [r1, #24]
 800888e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008890:	2f78      	cmp	r7, #120	@ 0x78
 8008892:	4691      	mov	r9, r2
 8008894:	4680      	mov	r8, r0
 8008896:	460c      	mov	r4, r1
 8008898:	469a      	mov	sl, r3
 800889a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800889e:	d807      	bhi.n	80088b0 <_printf_i+0x28>
 80088a0:	2f62      	cmp	r7, #98	@ 0x62
 80088a2:	d80a      	bhi.n	80088ba <_printf_i+0x32>
 80088a4:	2f00      	cmp	r7, #0
 80088a6:	f000 80d1 	beq.w	8008a4c <_printf_i+0x1c4>
 80088aa:	2f58      	cmp	r7, #88	@ 0x58
 80088ac:	f000 80b8 	beq.w	8008a20 <_printf_i+0x198>
 80088b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80088b4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80088b8:	e03a      	b.n	8008930 <_printf_i+0xa8>
 80088ba:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80088be:	2b15      	cmp	r3, #21
 80088c0:	d8f6      	bhi.n	80088b0 <_printf_i+0x28>
 80088c2:	a101      	add	r1, pc, #4	@ (adr r1, 80088c8 <_printf_i+0x40>)
 80088c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80088c8:	08008921 	.word	0x08008921
 80088cc:	08008935 	.word	0x08008935
 80088d0:	080088b1 	.word	0x080088b1
 80088d4:	080088b1 	.word	0x080088b1
 80088d8:	080088b1 	.word	0x080088b1
 80088dc:	080088b1 	.word	0x080088b1
 80088e0:	08008935 	.word	0x08008935
 80088e4:	080088b1 	.word	0x080088b1
 80088e8:	080088b1 	.word	0x080088b1
 80088ec:	080088b1 	.word	0x080088b1
 80088f0:	080088b1 	.word	0x080088b1
 80088f4:	08008a33 	.word	0x08008a33
 80088f8:	0800895f 	.word	0x0800895f
 80088fc:	080089ed 	.word	0x080089ed
 8008900:	080088b1 	.word	0x080088b1
 8008904:	080088b1 	.word	0x080088b1
 8008908:	08008a55 	.word	0x08008a55
 800890c:	080088b1 	.word	0x080088b1
 8008910:	0800895f 	.word	0x0800895f
 8008914:	080088b1 	.word	0x080088b1
 8008918:	080088b1 	.word	0x080088b1
 800891c:	080089f5 	.word	0x080089f5
 8008920:	6833      	ldr	r3, [r6, #0]
 8008922:	1d1a      	adds	r2, r3, #4
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	6032      	str	r2, [r6, #0]
 8008928:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800892c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008930:	2301      	movs	r3, #1
 8008932:	e09c      	b.n	8008a6e <_printf_i+0x1e6>
 8008934:	6833      	ldr	r3, [r6, #0]
 8008936:	6820      	ldr	r0, [r4, #0]
 8008938:	1d19      	adds	r1, r3, #4
 800893a:	6031      	str	r1, [r6, #0]
 800893c:	0606      	lsls	r6, r0, #24
 800893e:	d501      	bpl.n	8008944 <_printf_i+0xbc>
 8008940:	681d      	ldr	r5, [r3, #0]
 8008942:	e003      	b.n	800894c <_printf_i+0xc4>
 8008944:	0645      	lsls	r5, r0, #25
 8008946:	d5fb      	bpl.n	8008940 <_printf_i+0xb8>
 8008948:	f9b3 5000 	ldrsh.w	r5, [r3]
 800894c:	2d00      	cmp	r5, #0
 800894e:	da03      	bge.n	8008958 <_printf_i+0xd0>
 8008950:	232d      	movs	r3, #45	@ 0x2d
 8008952:	426d      	negs	r5, r5
 8008954:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008958:	4858      	ldr	r0, [pc, #352]	@ (8008abc <_printf_i+0x234>)
 800895a:	230a      	movs	r3, #10
 800895c:	e011      	b.n	8008982 <_printf_i+0xfa>
 800895e:	6821      	ldr	r1, [r4, #0]
 8008960:	6833      	ldr	r3, [r6, #0]
 8008962:	0608      	lsls	r0, r1, #24
 8008964:	f853 5b04 	ldr.w	r5, [r3], #4
 8008968:	d402      	bmi.n	8008970 <_printf_i+0xe8>
 800896a:	0649      	lsls	r1, r1, #25
 800896c:	bf48      	it	mi
 800896e:	b2ad      	uxthmi	r5, r5
 8008970:	2f6f      	cmp	r7, #111	@ 0x6f
 8008972:	4852      	ldr	r0, [pc, #328]	@ (8008abc <_printf_i+0x234>)
 8008974:	6033      	str	r3, [r6, #0]
 8008976:	bf14      	ite	ne
 8008978:	230a      	movne	r3, #10
 800897a:	2308      	moveq	r3, #8
 800897c:	2100      	movs	r1, #0
 800897e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008982:	6866      	ldr	r6, [r4, #4]
 8008984:	60a6      	str	r6, [r4, #8]
 8008986:	2e00      	cmp	r6, #0
 8008988:	db05      	blt.n	8008996 <_printf_i+0x10e>
 800898a:	6821      	ldr	r1, [r4, #0]
 800898c:	432e      	orrs	r6, r5
 800898e:	f021 0104 	bic.w	r1, r1, #4
 8008992:	6021      	str	r1, [r4, #0]
 8008994:	d04b      	beq.n	8008a2e <_printf_i+0x1a6>
 8008996:	4616      	mov	r6, r2
 8008998:	fbb5 f1f3 	udiv	r1, r5, r3
 800899c:	fb03 5711 	mls	r7, r3, r1, r5
 80089a0:	5dc7      	ldrb	r7, [r0, r7]
 80089a2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80089a6:	462f      	mov	r7, r5
 80089a8:	42bb      	cmp	r3, r7
 80089aa:	460d      	mov	r5, r1
 80089ac:	d9f4      	bls.n	8008998 <_printf_i+0x110>
 80089ae:	2b08      	cmp	r3, #8
 80089b0:	d10b      	bne.n	80089ca <_printf_i+0x142>
 80089b2:	6823      	ldr	r3, [r4, #0]
 80089b4:	07df      	lsls	r7, r3, #31
 80089b6:	d508      	bpl.n	80089ca <_printf_i+0x142>
 80089b8:	6923      	ldr	r3, [r4, #16]
 80089ba:	6861      	ldr	r1, [r4, #4]
 80089bc:	4299      	cmp	r1, r3
 80089be:	bfde      	ittt	le
 80089c0:	2330      	movle	r3, #48	@ 0x30
 80089c2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80089c6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80089ca:	1b92      	subs	r2, r2, r6
 80089cc:	6122      	str	r2, [r4, #16]
 80089ce:	f8cd a000 	str.w	sl, [sp]
 80089d2:	464b      	mov	r3, r9
 80089d4:	aa03      	add	r2, sp, #12
 80089d6:	4621      	mov	r1, r4
 80089d8:	4640      	mov	r0, r8
 80089da:	f7ff fee7 	bl	80087ac <_printf_common>
 80089de:	3001      	adds	r0, #1
 80089e0:	d14a      	bne.n	8008a78 <_printf_i+0x1f0>
 80089e2:	f04f 30ff 	mov.w	r0, #4294967295
 80089e6:	b004      	add	sp, #16
 80089e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089ec:	6823      	ldr	r3, [r4, #0]
 80089ee:	f043 0320 	orr.w	r3, r3, #32
 80089f2:	6023      	str	r3, [r4, #0]
 80089f4:	4832      	ldr	r0, [pc, #200]	@ (8008ac0 <_printf_i+0x238>)
 80089f6:	2778      	movs	r7, #120	@ 0x78
 80089f8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80089fc:	6823      	ldr	r3, [r4, #0]
 80089fe:	6831      	ldr	r1, [r6, #0]
 8008a00:	061f      	lsls	r7, r3, #24
 8008a02:	f851 5b04 	ldr.w	r5, [r1], #4
 8008a06:	d402      	bmi.n	8008a0e <_printf_i+0x186>
 8008a08:	065f      	lsls	r7, r3, #25
 8008a0a:	bf48      	it	mi
 8008a0c:	b2ad      	uxthmi	r5, r5
 8008a0e:	6031      	str	r1, [r6, #0]
 8008a10:	07d9      	lsls	r1, r3, #31
 8008a12:	bf44      	itt	mi
 8008a14:	f043 0320 	orrmi.w	r3, r3, #32
 8008a18:	6023      	strmi	r3, [r4, #0]
 8008a1a:	b11d      	cbz	r5, 8008a24 <_printf_i+0x19c>
 8008a1c:	2310      	movs	r3, #16
 8008a1e:	e7ad      	b.n	800897c <_printf_i+0xf4>
 8008a20:	4826      	ldr	r0, [pc, #152]	@ (8008abc <_printf_i+0x234>)
 8008a22:	e7e9      	b.n	80089f8 <_printf_i+0x170>
 8008a24:	6823      	ldr	r3, [r4, #0]
 8008a26:	f023 0320 	bic.w	r3, r3, #32
 8008a2a:	6023      	str	r3, [r4, #0]
 8008a2c:	e7f6      	b.n	8008a1c <_printf_i+0x194>
 8008a2e:	4616      	mov	r6, r2
 8008a30:	e7bd      	b.n	80089ae <_printf_i+0x126>
 8008a32:	6833      	ldr	r3, [r6, #0]
 8008a34:	6825      	ldr	r5, [r4, #0]
 8008a36:	6961      	ldr	r1, [r4, #20]
 8008a38:	1d18      	adds	r0, r3, #4
 8008a3a:	6030      	str	r0, [r6, #0]
 8008a3c:	062e      	lsls	r6, r5, #24
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	d501      	bpl.n	8008a46 <_printf_i+0x1be>
 8008a42:	6019      	str	r1, [r3, #0]
 8008a44:	e002      	b.n	8008a4c <_printf_i+0x1c4>
 8008a46:	0668      	lsls	r0, r5, #25
 8008a48:	d5fb      	bpl.n	8008a42 <_printf_i+0x1ba>
 8008a4a:	8019      	strh	r1, [r3, #0]
 8008a4c:	2300      	movs	r3, #0
 8008a4e:	6123      	str	r3, [r4, #16]
 8008a50:	4616      	mov	r6, r2
 8008a52:	e7bc      	b.n	80089ce <_printf_i+0x146>
 8008a54:	6833      	ldr	r3, [r6, #0]
 8008a56:	1d1a      	adds	r2, r3, #4
 8008a58:	6032      	str	r2, [r6, #0]
 8008a5a:	681e      	ldr	r6, [r3, #0]
 8008a5c:	6862      	ldr	r2, [r4, #4]
 8008a5e:	2100      	movs	r1, #0
 8008a60:	4630      	mov	r0, r6
 8008a62:	f7f7 fbe5 	bl	8000230 <memchr>
 8008a66:	b108      	cbz	r0, 8008a6c <_printf_i+0x1e4>
 8008a68:	1b80      	subs	r0, r0, r6
 8008a6a:	6060      	str	r0, [r4, #4]
 8008a6c:	6863      	ldr	r3, [r4, #4]
 8008a6e:	6123      	str	r3, [r4, #16]
 8008a70:	2300      	movs	r3, #0
 8008a72:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008a76:	e7aa      	b.n	80089ce <_printf_i+0x146>
 8008a78:	6923      	ldr	r3, [r4, #16]
 8008a7a:	4632      	mov	r2, r6
 8008a7c:	4649      	mov	r1, r9
 8008a7e:	4640      	mov	r0, r8
 8008a80:	47d0      	blx	sl
 8008a82:	3001      	adds	r0, #1
 8008a84:	d0ad      	beq.n	80089e2 <_printf_i+0x15a>
 8008a86:	6823      	ldr	r3, [r4, #0]
 8008a88:	079b      	lsls	r3, r3, #30
 8008a8a:	d413      	bmi.n	8008ab4 <_printf_i+0x22c>
 8008a8c:	68e0      	ldr	r0, [r4, #12]
 8008a8e:	9b03      	ldr	r3, [sp, #12]
 8008a90:	4298      	cmp	r0, r3
 8008a92:	bfb8      	it	lt
 8008a94:	4618      	movlt	r0, r3
 8008a96:	e7a6      	b.n	80089e6 <_printf_i+0x15e>
 8008a98:	2301      	movs	r3, #1
 8008a9a:	4632      	mov	r2, r6
 8008a9c:	4649      	mov	r1, r9
 8008a9e:	4640      	mov	r0, r8
 8008aa0:	47d0      	blx	sl
 8008aa2:	3001      	adds	r0, #1
 8008aa4:	d09d      	beq.n	80089e2 <_printf_i+0x15a>
 8008aa6:	3501      	adds	r5, #1
 8008aa8:	68e3      	ldr	r3, [r4, #12]
 8008aaa:	9903      	ldr	r1, [sp, #12]
 8008aac:	1a5b      	subs	r3, r3, r1
 8008aae:	42ab      	cmp	r3, r5
 8008ab0:	dcf2      	bgt.n	8008a98 <_printf_i+0x210>
 8008ab2:	e7eb      	b.n	8008a8c <_printf_i+0x204>
 8008ab4:	2500      	movs	r5, #0
 8008ab6:	f104 0619 	add.w	r6, r4, #25
 8008aba:	e7f5      	b.n	8008aa8 <_printf_i+0x220>
 8008abc:	0800cd0b 	.word	0x0800cd0b
 8008ac0:	0800cd1c 	.word	0x0800cd1c

08008ac4 <_scanf_float>:
 8008ac4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ac8:	b087      	sub	sp, #28
 8008aca:	4691      	mov	r9, r2
 8008acc:	9303      	str	r3, [sp, #12]
 8008ace:	688b      	ldr	r3, [r1, #8]
 8008ad0:	1e5a      	subs	r2, r3, #1
 8008ad2:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8008ad6:	bf81      	itttt	hi
 8008ad8:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8008adc:	eb03 0b05 	addhi.w	fp, r3, r5
 8008ae0:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8008ae4:	608b      	strhi	r3, [r1, #8]
 8008ae6:	680b      	ldr	r3, [r1, #0]
 8008ae8:	460a      	mov	r2, r1
 8008aea:	f04f 0500 	mov.w	r5, #0
 8008aee:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8008af2:	f842 3b1c 	str.w	r3, [r2], #28
 8008af6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008afa:	4680      	mov	r8, r0
 8008afc:	460c      	mov	r4, r1
 8008afe:	bf98      	it	ls
 8008b00:	f04f 0b00 	movls.w	fp, #0
 8008b04:	9201      	str	r2, [sp, #4]
 8008b06:	4616      	mov	r6, r2
 8008b08:	46aa      	mov	sl, r5
 8008b0a:	462f      	mov	r7, r5
 8008b0c:	9502      	str	r5, [sp, #8]
 8008b0e:	68a2      	ldr	r2, [r4, #8]
 8008b10:	b15a      	cbz	r2, 8008b2a <_scanf_float+0x66>
 8008b12:	f8d9 3000 	ldr.w	r3, [r9]
 8008b16:	781b      	ldrb	r3, [r3, #0]
 8008b18:	2b4e      	cmp	r3, #78	@ 0x4e
 8008b1a:	d863      	bhi.n	8008be4 <_scanf_float+0x120>
 8008b1c:	2b40      	cmp	r3, #64	@ 0x40
 8008b1e:	d83b      	bhi.n	8008b98 <_scanf_float+0xd4>
 8008b20:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8008b24:	b2c8      	uxtb	r0, r1
 8008b26:	280e      	cmp	r0, #14
 8008b28:	d939      	bls.n	8008b9e <_scanf_float+0xda>
 8008b2a:	b11f      	cbz	r7, 8008b34 <_scanf_float+0x70>
 8008b2c:	6823      	ldr	r3, [r4, #0]
 8008b2e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008b32:	6023      	str	r3, [r4, #0]
 8008b34:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008b38:	f1ba 0f01 	cmp.w	sl, #1
 8008b3c:	f200 8114 	bhi.w	8008d68 <_scanf_float+0x2a4>
 8008b40:	9b01      	ldr	r3, [sp, #4]
 8008b42:	429e      	cmp	r6, r3
 8008b44:	f200 8105 	bhi.w	8008d52 <_scanf_float+0x28e>
 8008b48:	2001      	movs	r0, #1
 8008b4a:	b007      	add	sp, #28
 8008b4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b50:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8008b54:	2a0d      	cmp	r2, #13
 8008b56:	d8e8      	bhi.n	8008b2a <_scanf_float+0x66>
 8008b58:	a101      	add	r1, pc, #4	@ (adr r1, 8008b60 <_scanf_float+0x9c>)
 8008b5a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008b5e:	bf00      	nop
 8008b60:	08008ca9 	.word	0x08008ca9
 8008b64:	08008b2b 	.word	0x08008b2b
 8008b68:	08008b2b 	.word	0x08008b2b
 8008b6c:	08008b2b 	.word	0x08008b2b
 8008b70:	08008d05 	.word	0x08008d05
 8008b74:	08008cdf 	.word	0x08008cdf
 8008b78:	08008b2b 	.word	0x08008b2b
 8008b7c:	08008b2b 	.word	0x08008b2b
 8008b80:	08008cb7 	.word	0x08008cb7
 8008b84:	08008b2b 	.word	0x08008b2b
 8008b88:	08008b2b 	.word	0x08008b2b
 8008b8c:	08008b2b 	.word	0x08008b2b
 8008b90:	08008b2b 	.word	0x08008b2b
 8008b94:	08008c73 	.word	0x08008c73
 8008b98:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8008b9c:	e7da      	b.n	8008b54 <_scanf_float+0x90>
 8008b9e:	290e      	cmp	r1, #14
 8008ba0:	d8c3      	bhi.n	8008b2a <_scanf_float+0x66>
 8008ba2:	a001      	add	r0, pc, #4	@ (adr r0, 8008ba8 <_scanf_float+0xe4>)
 8008ba4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008ba8:	08008c63 	.word	0x08008c63
 8008bac:	08008b2b 	.word	0x08008b2b
 8008bb0:	08008c63 	.word	0x08008c63
 8008bb4:	08008cf3 	.word	0x08008cf3
 8008bb8:	08008b2b 	.word	0x08008b2b
 8008bbc:	08008c05 	.word	0x08008c05
 8008bc0:	08008c49 	.word	0x08008c49
 8008bc4:	08008c49 	.word	0x08008c49
 8008bc8:	08008c49 	.word	0x08008c49
 8008bcc:	08008c49 	.word	0x08008c49
 8008bd0:	08008c49 	.word	0x08008c49
 8008bd4:	08008c49 	.word	0x08008c49
 8008bd8:	08008c49 	.word	0x08008c49
 8008bdc:	08008c49 	.word	0x08008c49
 8008be0:	08008c49 	.word	0x08008c49
 8008be4:	2b6e      	cmp	r3, #110	@ 0x6e
 8008be6:	d809      	bhi.n	8008bfc <_scanf_float+0x138>
 8008be8:	2b60      	cmp	r3, #96	@ 0x60
 8008bea:	d8b1      	bhi.n	8008b50 <_scanf_float+0x8c>
 8008bec:	2b54      	cmp	r3, #84	@ 0x54
 8008bee:	d07b      	beq.n	8008ce8 <_scanf_float+0x224>
 8008bf0:	2b59      	cmp	r3, #89	@ 0x59
 8008bf2:	d19a      	bne.n	8008b2a <_scanf_float+0x66>
 8008bf4:	2d07      	cmp	r5, #7
 8008bf6:	d198      	bne.n	8008b2a <_scanf_float+0x66>
 8008bf8:	2508      	movs	r5, #8
 8008bfa:	e02f      	b.n	8008c5c <_scanf_float+0x198>
 8008bfc:	2b74      	cmp	r3, #116	@ 0x74
 8008bfe:	d073      	beq.n	8008ce8 <_scanf_float+0x224>
 8008c00:	2b79      	cmp	r3, #121	@ 0x79
 8008c02:	e7f6      	b.n	8008bf2 <_scanf_float+0x12e>
 8008c04:	6821      	ldr	r1, [r4, #0]
 8008c06:	05c8      	lsls	r0, r1, #23
 8008c08:	d51e      	bpl.n	8008c48 <_scanf_float+0x184>
 8008c0a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8008c0e:	6021      	str	r1, [r4, #0]
 8008c10:	3701      	adds	r7, #1
 8008c12:	f1bb 0f00 	cmp.w	fp, #0
 8008c16:	d003      	beq.n	8008c20 <_scanf_float+0x15c>
 8008c18:	3201      	adds	r2, #1
 8008c1a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008c1e:	60a2      	str	r2, [r4, #8]
 8008c20:	68a3      	ldr	r3, [r4, #8]
 8008c22:	3b01      	subs	r3, #1
 8008c24:	60a3      	str	r3, [r4, #8]
 8008c26:	6923      	ldr	r3, [r4, #16]
 8008c28:	3301      	adds	r3, #1
 8008c2a:	6123      	str	r3, [r4, #16]
 8008c2c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8008c30:	3b01      	subs	r3, #1
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	f8c9 3004 	str.w	r3, [r9, #4]
 8008c38:	f340 8082 	ble.w	8008d40 <_scanf_float+0x27c>
 8008c3c:	f8d9 3000 	ldr.w	r3, [r9]
 8008c40:	3301      	adds	r3, #1
 8008c42:	f8c9 3000 	str.w	r3, [r9]
 8008c46:	e762      	b.n	8008b0e <_scanf_float+0x4a>
 8008c48:	eb1a 0105 	adds.w	r1, sl, r5
 8008c4c:	f47f af6d 	bne.w	8008b2a <_scanf_float+0x66>
 8008c50:	6822      	ldr	r2, [r4, #0]
 8008c52:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8008c56:	6022      	str	r2, [r4, #0]
 8008c58:	460d      	mov	r5, r1
 8008c5a:	468a      	mov	sl, r1
 8008c5c:	f806 3b01 	strb.w	r3, [r6], #1
 8008c60:	e7de      	b.n	8008c20 <_scanf_float+0x15c>
 8008c62:	6822      	ldr	r2, [r4, #0]
 8008c64:	0610      	lsls	r0, r2, #24
 8008c66:	f57f af60 	bpl.w	8008b2a <_scanf_float+0x66>
 8008c6a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008c6e:	6022      	str	r2, [r4, #0]
 8008c70:	e7f4      	b.n	8008c5c <_scanf_float+0x198>
 8008c72:	f1ba 0f00 	cmp.w	sl, #0
 8008c76:	d10c      	bne.n	8008c92 <_scanf_float+0x1ce>
 8008c78:	b977      	cbnz	r7, 8008c98 <_scanf_float+0x1d4>
 8008c7a:	6822      	ldr	r2, [r4, #0]
 8008c7c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8008c80:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8008c84:	d108      	bne.n	8008c98 <_scanf_float+0x1d4>
 8008c86:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008c8a:	6022      	str	r2, [r4, #0]
 8008c8c:	f04f 0a01 	mov.w	sl, #1
 8008c90:	e7e4      	b.n	8008c5c <_scanf_float+0x198>
 8008c92:	f1ba 0f02 	cmp.w	sl, #2
 8008c96:	d050      	beq.n	8008d3a <_scanf_float+0x276>
 8008c98:	2d01      	cmp	r5, #1
 8008c9a:	d002      	beq.n	8008ca2 <_scanf_float+0x1de>
 8008c9c:	2d04      	cmp	r5, #4
 8008c9e:	f47f af44 	bne.w	8008b2a <_scanf_float+0x66>
 8008ca2:	3501      	adds	r5, #1
 8008ca4:	b2ed      	uxtb	r5, r5
 8008ca6:	e7d9      	b.n	8008c5c <_scanf_float+0x198>
 8008ca8:	f1ba 0f01 	cmp.w	sl, #1
 8008cac:	f47f af3d 	bne.w	8008b2a <_scanf_float+0x66>
 8008cb0:	f04f 0a02 	mov.w	sl, #2
 8008cb4:	e7d2      	b.n	8008c5c <_scanf_float+0x198>
 8008cb6:	b975      	cbnz	r5, 8008cd6 <_scanf_float+0x212>
 8008cb8:	2f00      	cmp	r7, #0
 8008cba:	f47f af37 	bne.w	8008b2c <_scanf_float+0x68>
 8008cbe:	6822      	ldr	r2, [r4, #0]
 8008cc0:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8008cc4:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8008cc8:	f040 8103 	bne.w	8008ed2 <_scanf_float+0x40e>
 8008ccc:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008cd0:	6022      	str	r2, [r4, #0]
 8008cd2:	2501      	movs	r5, #1
 8008cd4:	e7c2      	b.n	8008c5c <_scanf_float+0x198>
 8008cd6:	2d03      	cmp	r5, #3
 8008cd8:	d0e3      	beq.n	8008ca2 <_scanf_float+0x1de>
 8008cda:	2d05      	cmp	r5, #5
 8008cdc:	e7df      	b.n	8008c9e <_scanf_float+0x1da>
 8008cde:	2d02      	cmp	r5, #2
 8008ce0:	f47f af23 	bne.w	8008b2a <_scanf_float+0x66>
 8008ce4:	2503      	movs	r5, #3
 8008ce6:	e7b9      	b.n	8008c5c <_scanf_float+0x198>
 8008ce8:	2d06      	cmp	r5, #6
 8008cea:	f47f af1e 	bne.w	8008b2a <_scanf_float+0x66>
 8008cee:	2507      	movs	r5, #7
 8008cf0:	e7b4      	b.n	8008c5c <_scanf_float+0x198>
 8008cf2:	6822      	ldr	r2, [r4, #0]
 8008cf4:	0591      	lsls	r1, r2, #22
 8008cf6:	f57f af18 	bpl.w	8008b2a <_scanf_float+0x66>
 8008cfa:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8008cfe:	6022      	str	r2, [r4, #0]
 8008d00:	9702      	str	r7, [sp, #8]
 8008d02:	e7ab      	b.n	8008c5c <_scanf_float+0x198>
 8008d04:	6822      	ldr	r2, [r4, #0]
 8008d06:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8008d0a:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8008d0e:	d005      	beq.n	8008d1c <_scanf_float+0x258>
 8008d10:	0550      	lsls	r0, r2, #21
 8008d12:	f57f af0a 	bpl.w	8008b2a <_scanf_float+0x66>
 8008d16:	2f00      	cmp	r7, #0
 8008d18:	f000 80db 	beq.w	8008ed2 <_scanf_float+0x40e>
 8008d1c:	0591      	lsls	r1, r2, #22
 8008d1e:	bf58      	it	pl
 8008d20:	9902      	ldrpl	r1, [sp, #8]
 8008d22:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008d26:	bf58      	it	pl
 8008d28:	1a79      	subpl	r1, r7, r1
 8008d2a:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8008d2e:	bf58      	it	pl
 8008d30:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008d34:	6022      	str	r2, [r4, #0]
 8008d36:	2700      	movs	r7, #0
 8008d38:	e790      	b.n	8008c5c <_scanf_float+0x198>
 8008d3a:	f04f 0a03 	mov.w	sl, #3
 8008d3e:	e78d      	b.n	8008c5c <_scanf_float+0x198>
 8008d40:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8008d44:	4649      	mov	r1, r9
 8008d46:	4640      	mov	r0, r8
 8008d48:	4798      	blx	r3
 8008d4a:	2800      	cmp	r0, #0
 8008d4c:	f43f aedf 	beq.w	8008b0e <_scanf_float+0x4a>
 8008d50:	e6eb      	b.n	8008b2a <_scanf_float+0x66>
 8008d52:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008d56:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008d5a:	464a      	mov	r2, r9
 8008d5c:	4640      	mov	r0, r8
 8008d5e:	4798      	blx	r3
 8008d60:	6923      	ldr	r3, [r4, #16]
 8008d62:	3b01      	subs	r3, #1
 8008d64:	6123      	str	r3, [r4, #16]
 8008d66:	e6eb      	b.n	8008b40 <_scanf_float+0x7c>
 8008d68:	1e6b      	subs	r3, r5, #1
 8008d6a:	2b06      	cmp	r3, #6
 8008d6c:	d824      	bhi.n	8008db8 <_scanf_float+0x2f4>
 8008d6e:	2d02      	cmp	r5, #2
 8008d70:	d836      	bhi.n	8008de0 <_scanf_float+0x31c>
 8008d72:	9b01      	ldr	r3, [sp, #4]
 8008d74:	429e      	cmp	r6, r3
 8008d76:	f67f aee7 	bls.w	8008b48 <_scanf_float+0x84>
 8008d7a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008d7e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008d82:	464a      	mov	r2, r9
 8008d84:	4640      	mov	r0, r8
 8008d86:	4798      	blx	r3
 8008d88:	6923      	ldr	r3, [r4, #16]
 8008d8a:	3b01      	subs	r3, #1
 8008d8c:	6123      	str	r3, [r4, #16]
 8008d8e:	e7f0      	b.n	8008d72 <_scanf_float+0x2ae>
 8008d90:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008d94:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8008d98:	464a      	mov	r2, r9
 8008d9a:	4640      	mov	r0, r8
 8008d9c:	4798      	blx	r3
 8008d9e:	6923      	ldr	r3, [r4, #16]
 8008da0:	3b01      	subs	r3, #1
 8008da2:	6123      	str	r3, [r4, #16]
 8008da4:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008da8:	fa5f fa8a 	uxtb.w	sl, sl
 8008dac:	f1ba 0f02 	cmp.w	sl, #2
 8008db0:	d1ee      	bne.n	8008d90 <_scanf_float+0x2cc>
 8008db2:	3d03      	subs	r5, #3
 8008db4:	b2ed      	uxtb	r5, r5
 8008db6:	1b76      	subs	r6, r6, r5
 8008db8:	6823      	ldr	r3, [r4, #0]
 8008dba:	05da      	lsls	r2, r3, #23
 8008dbc:	d530      	bpl.n	8008e20 <_scanf_float+0x35c>
 8008dbe:	055b      	lsls	r3, r3, #21
 8008dc0:	d511      	bpl.n	8008de6 <_scanf_float+0x322>
 8008dc2:	9b01      	ldr	r3, [sp, #4]
 8008dc4:	429e      	cmp	r6, r3
 8008dc6:	f67f aebf 	bls.w	8008b48 <_scanf_float+0x84>
 8008dca:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008dce:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008dd2:	464a      	mov	r2, r9
 8008dd4:	4640      	mov	r0, r8
 8008dd6:	4798      	blx	r3
 8008dd8:	6923      	ldr	r3, [r4, #16]
 8008dda:	3b01      	subs	r3, #1
 8008ddc:	6123      	str	r3, [r4, #16]
 8008dde:	e7f0      	b.n	8008dc2 <_scanf_float+0x2fe>
 8008de0:	46aa      	mov	sl, r5
 8008de2:	46b3      	mov	fp, r6
 8008de4:	e7de      	b.n	8008da4 <_scanf_float+0x2e0>
 8008de6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008dea:	6923      	ldr	r3, [r4, #16]
 8008dec:	2965      	cmp	r1, #101	@ 0x65
 8008dee:	f103 33ff 	add.w	r3, r3, #4294967295
 8008df2:	f106 35ff 	add.w	r5, r6, #4294967295
 8008df6:	6123      	str	r3, [r4, #16]
 8008df8:	d00c      	beq.n	8008e14 <_scanf_float+0x350>
 8008dfa:	2945      	cmp	r1, #69	@ 0x45
 8008dfc:	d00a      	beq.n	8008e14 <_scanf_float+0x350>
 8008dfe:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008e02:	464a      	mov	r2, r9
 8008e04:	4640      	mov	r0, r8
 8008e06:	4798      	blx	r3
 8008e08:	6923      	ldr	r3, [r4, #16]
 8008e0a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008e0e:	3b01      	subs	r3, #1
 8008e10:	1eb5      	subs	r5, r6, #2
 8008e12:	6123      	str	r3, [r4, #16]
 8008e14:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008e18:	464a      	mov	r2, r9
 8008e1a:	4640      	mov	r0, r8
 8008e1c:	4798      	blx	r3
 8008e1e:	462e      	mov	r6, r5
 8008e20:	6822      	ldr	r2, [r4, #0]
 8008e22:	f012 0210 	ands.w	r2, r2, #16
 8008e26:	d001      	beq.n	8008e2c <_scanf_float+0x368>
 8008e28:	2000      	movs	r0, #0
 8008e2a:	e68e      	b.n	8008b4a <_scanf_float+0x86>
 8008e2c:	7032      	strb	r2, [r6, #0]
 8008e2e:	6823      	ldr	r3, [r4, #0]
 8008e30:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8008e34:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008e38:	d125      	bne.n	8008e86 <_scanf_float+0x3c2>
 8008e3a:	9b02      	ldr	r3, [sp, #8]
 8008e3c:	429f      	cmp	r7, r3
 8008e3e:	d00a      	beq.n	8008e56 <_scanf_float+0x392>
 8008e40:	1bda      	subs	r2, r3, r7
 8008e42:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8008e46:	429e      	cmp	r6, r3
 8008e48:	bf28      	it	cs
 8008e4a:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8008e4e:	4922      	ldr	r1, [pc, #136]	@ (8008ed8 <_scanf_float+0x414>)
 8008e50:	4630      	mov	r0, r6
 8008e52:	f000 f977 	bl	8009144 <siprintf>
 8008e56:	9901      	ldr	r1, [sp, #4]
 8008e58:	2200      	movs	r2, #0
 8008e5a:	4640      	mov	r0, r8
 8008e5c:	f002 fcf8 	bl	800b850 <_strtod_r>
 8008e60:	9b03      	ldr	r3, [sp, #12]
 8008e62:	6821      	ldr	r1, [r4, #0]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	f011 0f02 	tst.w	r1, #2
 8008e6a:	ec57 6b10 	vmov	r6, r7, d0
 8008e6e:	f103 0204 	add.w	r2, r3, #4
 8008e72:	d015      	beq.n	8008ea0 <_scanf_float+0x3dc>
 8008e74:	9903      	ldr	r1, [sp, #12]
 8008e76:	600a      	str	r2, [r1, #0]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	e9c3 6700 	strd	r6, r7, [r3]
 8008e7e:	68e3      	ldr	r3, [r4, #12]
 8008e80:	3301      	adds	r3, #1
 8008e82:	60e3      	str	r3, [r4, #12]
 8008e84:	e7d0      	b.n	8008e28 <_scanf_float+0x364>
 8008e86:	9b04      	ldr	r3, [sp, #16]
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d0e4      	beq.n	8008e56 <_scanf_float+0x392>
 8008e8c:	9905      	ldr	r1, [sp, #20]
 8008e8e:	230a      	movs	r3, #10
 8008e90:	3101      	adds	r1, #1
 8008e92:	4640      	mov	r0, r8
 8008e94:	f7ff f9b4 	bl	8008200 <_strtol_r>
 8008e98:	9b04      	ldr	r3, [sp, #16]
 8008e9a:	9e05      	ldr	r6, [sp, #20]
 8008e9c:	1ac2      	subs	r2, r0, r3
 8008e9e:	e7d0      	b.n	8008e42 <_scanf_float+0x37e>
 8008ea0:	f011 0f04 	tst.w	r1, #4
 8008ea4:	9903      	ldr	r1, [sp, #12]
 8008ea6:	600a      	str	r2, [r1, #0]
 8008ea8:	d1e6      	bne.n	8008e78 <_scanf_float+0x3b4>
 8008eaa:	681d      	ldr	r5, [r3, #0]
 8008eac:	4632      	mov	r2, r6
 8008eae:	463b      	mov	r3, r7
 8008eb0:	4630      	mov	r0, r6
 8008eb2:	4639      	mov	r1, r7
 8008eb4:	f7f7 fe6a 	bl	8000b8c <__aeabi_dcmpun>
 8008eb8:	b128      	cbz	r0, 8008ec6 <_scanf_float+0x402>
 8008eba:	4808      	ldr	r0, [pc, #32]	@ (8008edc <_scanf_float+0x418>)
 8008ebc:	f000 fabc 	bl	8009438 <nanf>
 8008ec0:	ed85 0a00 	vstr	s0, [r5]
 8008ec4:	e7db      	b.n	8008e7e <_scanf_float+0x3ba>
 8008ec6:	4630      	mov	r0, r6
 8008ec8:	4639      	mov	r1, r7
 8008eca:	f7f7 febd 	bl	8000c48 <__aeabi_d2f>
 8008ece:	6028      	str	r0, [r5, #0]
 8008ed0:	e7d5      	b.n	8008e7e <_scanf_float+0x3ba>
 8008ed2:	2700      	movs	r7, #0
 8008ed4:	e62e      	b.n	8008b34 <_scanf_float+0x70>
 8008ed6:	bf00      	nop
 8008ed8:	0800cd2d 	.word	0x0800cd2d
 8008edc:	0800ce6e 	.word	0x0800ce6e

08008ee0 <std>:
 8008ee0:	2300      	movs	r3, #0
 8008ee2:	b510      	push	{r4, lr}
 8008ee4:	4604      	mov	r4, r0
 8008ee6:	e9c0 3300 	strd	r3, r3, [r0]
 8008eea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008eee:	6083      	str	r3, [r0, #8]
 8008ef0:	8181      	strh	r1, [r0, #12]
 8008ef2:	6643      	str	r3, [r0, #100]	@ 0x64
 8008ef4:	81c2      	strh	r2, [r0, #14]
 8008ef6:	6183      	str	r3, [r0, #24]
 8008ef8:	4619      	mov	r1, r3
 8008efa:	2208      	movs	r2, #8
 8008efc:	305c      	adds	r0, #92	@ 0x5c
 8008efe:	f000 fa1b 	bl	8009338 <memset>
 8008f02:	4b0d      	ldr	r3, [pc, #52]	@ (8008f38 <std+0x58>)
 8008f04:	6263      	str	r3, [r4, #36]	@ 0x24
 8008f06:	4b0d      	ldr	r3, [pc, #52]	@ (8008f3c <std+0x5c>)
 8008f08:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008f0a:	4b0d      	ldr	r3, [pc, #52]	@ (8008f40 <std+0x60>)
 8008f0c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008f0e:	4b0d      	ldr	r3, [pc, #52]	@ (8008f44 <std+0x64>)
 8008f10:	6323      	str	r3, [r4, #48]	@ 0x30
 8008f12:	4b0d      	ldr	r3, [pc, #52]	@ (8008f48 <std+0x68>)
 8008f14:	6224      	str	r4, [r4, #32]
 8008f16:	429c      	cmp	r4, r3
 8008f18:	d006      	beq.n	8008f28 <std+0x48>
 8008f1a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008f1e:	4294      	cmp	r4, r2
 8008f20:	d002      	beq.n	8008f28 <std+0x48>
 8008f22:	33d0      	adds	r3, #208	@ 0xd0
 8008f24:	429c      	cmp	r4, r3
 8008f26:	d105      	bne.n	8008f34 <std+0x54>
 8008f28:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008f2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008f30:	f000 ba7e 	b.w	8009430 <__retarget_lock_init_recursive>
 8008f34:	bd10      	pop	{r4, pc}
 8008f36:	bf00      	nop
 8008f38:	08009189 	.word	0x08009189
 8008f3c:	080091ab 	.word	0x080091ab
 8008f40:	080091e3 	.word	0x080091e3
 8008f44:	08009207 	.word	0x08009207
 8008f48:	20000670 	.word	0x20000670

08008f4c <stdio_exit_handler>:
 8008f4c:	4a02      	ldr	r2, [pc, #8]	@ (8008f58 <stdio_exit_handler+0xc>)
 8008f4e:	4903      	ldr	r1, [pc, #12]	@ (8008f5c <stdio_exit_handler+0x10>)
 8008f50:	4803      	ldr	r0, [pc, #12]	@ (8008f60 <stdio_exit_handler+0x14>)
 8008f52:	f000 b869 	b.w	8009028 <_fwalk_sglue>
 8008f56:	bf00      	nop
 8008f58:	20000058 	.word	0x20000058
 8008f5c:	0800be99 	.word	0x0800be99
 8008f60:	20000068 	.word	0x20000068

08008f64 <cleanup_stdio>:
 8008f64:	6841      	ldr	r1, [r0, #4]
 8008f66:	4b0c      	ldr	r3, [pc, #48]	@ (8008f98 <cleanup_stdio+0x34>)
 8008f68:	4299      	cmp	r1, r3
 8008f6a:	b510      	push	{r4, lr}
 8008f6c:	4604      	mov	r4, r0
 8008f6e:	d001      	beq.n	8008f74 <cleanup_stdio+0x10>
 8008f70:	f002 ff92 	bl	800be98 <_fflush_r>
 8008f74:	68a1      	ldr	r1, [r4, #8]
 8008f76:	4b09      	ldr	r3, [pc, #36]	@ (8008f9c <cleanup_stdio+0x38>)
 8008f78:	4299      	cmp	r1, r3
 8008f7a:	d002      	beq.n	8008f82 <cleanup_stdio+0x1e>
 8008f7c:	4620      	mov	r0, r4
 8008f7e:	f002 ff8b 	bl	800be98 <_fflush_r>
 8008f82:	68e1      	ldr	r1, [r4, #12]
 8008f84:	4b06      	ldr	r3, [pc, #24]	@ (8008fa0 <cleanup_stdio+0x3c>)
 8008f86:	4299      	cmp	r1, r3
 8008f88:	d004      	beq.n	8008f94 <cleanup_stdio+0x30>
 8008f8a:	4620      	mov	r0, r4
 8008f8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008f90:	f002 bf82 	b.w	800be98 <_fflush_r>
 8008f94:	bd10      	pop	{r4, pc}
 8008f96:	bf00      	nop
 8008f98:	20000670 	.word	0x20000670
 8008f9c:	200006d8 	.word	0x200006d8
 8008fa0:	20000740 	.word	0x20000740

08008fa4 <global_stdio_init.part.0>:
 8008fa4:	b510      	push	{r4, lr}
 8008fa6:	4b0b      	ldr	r3, [pc, #44]	@ (8008fd4 <global_stdio_init.part.0+0x30>)
 8008fa8:	4c0b      	ldr	r4, [pc, #44]	@ (8008fd8 <global_stdio_init.part.0+0x34>)
 8008faa:	4a0c      	ldr	r2, [pc, #48]	@ (8008fdc <global_stdio_init.part.0+0x38>)
 8008fac:	601a      	str	r2, [r3, #0]
 8008fae:	4620      	mov	r0, r4
 8008fb0:	2200      	movs	r2, #0
 8008fb2:	2104      	movs	r1, #4
 8008fb4:	f7ff ff94 	bl	8008ee0 <std>
 8008fb8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008fbc:	2201      	movs	r2, #1
 8008fbe:	2109      	movs	r1, #9
 8008fc0:	f7ff ff8e 	bl	8008ee0 <std>
 8008fc4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008fc8:	2202      	movs	r2, #2
 8008fca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008fce:	2112      	movs	r1, #18
 8008fd0:	f7ff bf86 	b.w	8008ee0 <std>
 8008fd4:	200007a8 	.word	0x200007a8
 8008fd8:	20000670 	.word	0x20000670
 8008fdc:	08008f4d 	.word	0x08008f4d

08008fe0 <__sfp_lock_acquire>:
 8008fe0:	4801      	ldr	r0, [pc, #4]	@ (8008fe8 <__sfp_lock_acquire+0x8>)
 8008fe2:	f000 ba26 	b.w	8009432 <__retarget_lock_acquire_recursive>
 8008fe6:	bf00      	nop
 8008fe8:	200007b1 	.word	0x200007b1

08008fec <__sfp_lock_release>:
 8008fec:	4801      	ldr	r0, [pc, #4]	@ (8008ff4 <__sfp_lock_release+0x8>)
 8008fee:	f000 ba21 	b.w	8009434 <__retarget_lock_release_recursive>
 8008ff2:	bf00      	nop
 8008ff4:	200007b1 	.word	0x200007b1

08008ff8 <__sinit>:
 8008ff8:	b510      	push	{r4, lr}
 8008ffa:	4604      	mov	r4, r0
 8008ffc:	f7ff fff0 	bl	8008fe0 <__sfp_lock_acquire>
 8009000:	6a23      	ldr	r3, [r4, #32]
 8009002:	b11b      	cbz	r3, 800900c <__sinit+0x14>
 8009004:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009008:	f7ff bff0 	b.w	8008fec <__sfp_lock_release>
 800900c:	4b04      	ldr	r3, [pc, #16]	@ (8009020 <__sinit+0x28>)
 800900e:	6223      	str	r3, [r4, #32]
 8009010:	4b04      	ldr	r3, [pc, #16]	@ (8009024 <__sinit+0x2c>)
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d1f5      	bne.n	8009004 <__sinit+0xc>
 8009018:	f7ff ffc4 	bl	8008fa4 <global_stdio_init.part.0>
 800901c:	e7f2      	b.n	8009004 <__sinit+0xc>
 800901e:	bf00      	nop
 8009020:	08008f65 	.word	0x08008f65
 8009024:	200007a8 	.word	0x200007a8

08009028 <_fwalk_sglue>:
 8009028:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800902c:	4607      	mov	r7, r0
 800902e:	4688      	mov	r8, r1
 8009030:	4614      	mov	r4, r2
 8009032:	2600      	movs	r6, #0
 8009034:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009038:	f1b9 0901 	subs.w	r9, r9, #1
 800903c:	d505      	bpl.n	800904a <_fwalk_sglue+0x22>
 800903e:	6824      	ldr	r4, [r4, #0]
 8009040:	2c00      	cmp	r4, #0
 8009042:	d1f7      	bne.n	8009034 <_fwalk_sglue+0xc>
 8009044:	4630      	mov	r0, r6
 8009046:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800904a:	89ab      	ldrh	r3, [r5, #12]
 800904c:	2b01      	cmp	r3, #1
 800904e:	d907      	bls.n	8009060 <_fwalk_sglue+0x38>
 8009050:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009054:	3301      	adds	r3, #1
 8009056:	d003      	beq.n	8009060 <_fwalk_sglue+0x38>
 8009058:	4629      	mov	r1, r5
 800905a:	4638      	mov	r0, r7
 800905c:	47c0      	blx	r8
 800905e:	4306      	orrs	r6, r0
 8009060:	3568      	adds	r5, #104	@ 0x68
 8009062:	e7e9      	b.n	8009038 <_fwalk_sglue+0x10>

08009064 <iprintf>:
 8009064:	b40f      	push	{r0, r1, r2, r3}
 8009066:	b507      	push	{r0, r1, r2, lr}
 8009068:	4906      	ldr	r1, [pc, #24]	@ (8009084 <iprintf+0x20>)
 800906a:	ab04      	add	r3, sp, #16
 800906c:	6808      	ldr	r0, [r1, #0]
 800906e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009072:	6881      	ldr	r1, [r0, #8]
 8009074:	9301      	str	r3, [sp, #4]
 8009076:	f002 fd73 	bl	800bb60 <_vfiprintf_r>
 800907a:	b003      	add	sp, #12
 800907c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009080:	b004      	add	sp, #16
 8009082:	4770      	bx	lr
 8009084:	20000064 	.word	0x20000064

08009088 <_puts_r>:
 8009088:	6a03      	ldr	r3, [r0, #32]
 800908a:	b570      	push	{r4, r5, r6, lr}
 800908c:	6884      	ldr	r4, [r0, #8]
 800908e:	4605      	mov	r5, r0
 8009090:	460e      	mov	r6, r1
 8009092:	b90b      	cbnz	r3, 8009098 <_puts_r+0x10>
 8009094:	f7ff ffb0 	bl	8008ff8 <__sinit>
 8009098:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800909a:	07db      	lsls	r3, r3, #31
 800909c:	d405      	bmi.n	80090aa <_puts_r+0x22>
 800909e:	89a3      	ldrh	r3, [r4, #12]
 80090a0:	0598      	lsls	r0, r3, #22
 80090a2:	d402      	bmi.n	80090aa <_puts_r+0x22>
 80090a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80090a6:	f000 f9c4 	bl	8009432 <__retarget_lock_acquire_recursive>
 80090aa:	89a3      	ldrh	r3, [r4, #12]
 80090ac:	0719      	lsls	r1, r3, #28
 80090ae:	d502      	bpl.n	80090b6 <_puts_r+0x2e>
 80090b0:	6923      	ldr	r3, [r4, #16]
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d135      	bne.n	8009122 <_puts_r+0x9a>
 80090b6:	4621      	mov	r1, r4
 80090b8:	4628      	mov	r0, r5
 80090ba:	f000 f8e7 	bl	800928c <__swsetup_r>
 80090be:	b380      	cbz	r0, 8009122 <_puts_r+0x9a>
 80090c0:	f04f 35ff 	mov.w	r5, #4294967295
 80090c4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80090c6:	07da      	lsls	r2, r3, #31
 80090c8:	d405      	bmi.n	80090d6 <_puts_r+0x4e>
 80090ca:	89a3      	ldrh	r3, [r4, #12]
 80090cc:	059b      	lsls	r3, r3, #22
 80090ce:	d402      	bmi.n	80090d6 <_puts_r+0x4e>
 80090d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80090d2:	f000 f9af 	bl	8009434 <__retarget_lock_release_recursive>
 80090d6:	4628      	mov	r0, r5
 80090d8:	bd70      	pop	{r4, r5, r6, pc}
 80090da:	2b00      	cmp	r3, #0
 80090dc:	da04      	bge.n	80090e8 <_puts_r+0x60>
 80090de:	69a2      	ldr	r2, [r4, #24]
 80090e0:	429a      	cmp	r2, r3
 80090e2:	dc17      	bgt.n	8009114 <_puts_r+0x8c>
 80090e4:	290a      	cmp	r1, #10
 80090e6:	d015      	beq.n	8009114 <_puts_r+0x8c>
 80090e8:	6823      	ldr	r3, [r4, #0]
 80090ea:	1c5a      	adds	r2, r3, #1
 80090ec:	6022      	str	r2, [r4, #0]
 80090ee:	7019      	strb	r1, [r3, #0]
 80090f0:	68a3      	ldr	r3, [r4, #8]
 80090f2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80090f6:	3b01      	subs	r3, #1
 80090f8:	60a3      	str	r3, [r4, #8]
 80090fa:	2900      	cmp	r1, #0
 80090fc:	d1ed      	bne.n	80090da <_puts_r+0x52>
 80090fe:	2b00      	cmp	r3, #0
 8009100:	da11      	bge.n	8009126 <_puts_r+0x9e>
 8009102:	4622      	mov	r2, r4
 8009104:	210a      	movs	r1, #10
 8009106:	4628      	mov	r0, r5
 8009108:	f000 f881 	bl	800920e <__swbuf_r>
 800910c:	3001      	adds	r0, #1
 800910e:	d0d7      	beq.n	80090c0 <_puts_r+0x38>
 8009110:	250a      	movs	r5, #10
 8009112:	e7d7      	b.n	80090c4 <_puts_r+0x3c>
 8009114:	4622      	mov	r2, r4
 8009116:	4628      	mov	r0, r5
 8009118:	f000 f879 	bl	800920e <__swbuf_r>
 800911c:	3001      	adds	r0, #1
 800911e:	d1e7      	bne.n	80090f0 <_puts_r+0x68>
 8009120:	e7ce      	b.n	80090c0 <_puts_r+0x38>
 8009122:	3e01      	subs	r6, #1
 8009124:	e7e4      	b.n	80090f0 <_puts_r+0x68>
 8009126:	6823      	ldr	r3, [r4, #0]
 8009128:	1c5a      	adds	r2, r3, #1
 800912a:	6022      	str	r2, [r4, #0]
 800912c:	220a      	movs	r2, #10
 800912e:	701a      	strb	r2, [r3, #0]
 8009130:	e7ee      	b.n	8009110 <_puts_r+0x88>
	...

08009134 <puts>:
 8009134:	4b02      	ldr	r3, [pc, #8]	@ (8009140 <puts+0xc>)
 8009136:	4601      	mov	r1, r0
 8009138:	6818      	ldr	r0, [r3, #0]
 800913a:	f7ff bfa5 	b.w	8009088 <_puts_r>
 800913e:	bf00      	nop
 8009140:	20000064 	.word	0x20000064

08009144 <siprintf>:
 8009144:	b40e      	push	{r1, r2, r3}
 8009146:	b510      	push	{r4, lr}
 8009148:	b09d      	sub	sp, #116	@ 0x74
 800914a:	ab1f      	add	r3, sp, #124	@ 0x7c
 800914c:	9002      	str	r0, [sp, #8]
 800914e:	9006      	str	r0, [sp, #24]
 8009150:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009154:	480a      	ldr	r0, [pc, #40]	@ (8009180 <siprintf+0x3c>)
 8009156:	9107      	str	r1, [sp, #28]
 8009158:	9104      	str	r1, [sp, #16]
 800915a:	490a      	ldr	r1, [pc, #40]	@ (8009184 <siprintf+0x40>)
 800915c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009160:	9105      	str	r1, [sp, #20]
 8009162:	2400      	movs	r4, #0
 8009164:	a902      	add	r1, sp, #8
 8009166:	6800      	ldr	r0, [r0, #0]
 8009168:	9301      	str	r3, [sp, #4]
 800916a:	941b      	str	r4, [sp, #108]	@ 0x6c
 800916c:	f002 fbd2 	bl	800b914 <_svfiprintf_r>
 8009170:	9b02      	ldr	r3, [sp, #8]
 8009172:	701c      	strb	r4, [r3, #0]
 8009174:	b01d      	add	sp, #116	@ 0x74
 8009176:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800917a:	b003      	add	sp, #12
 800917c:	4770      	bx	lr
 800917e:	bf00      	nop
 8009180:	20000064 	.word	0x20000064
 8009184:	ffff0208 	.word	0xffff0208

08009188 <__sread>:
 8009188:	b510      	push	{r4, lr}
 800918a:	460c      	mov	r4, r1
 800918c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009190:	f000 f900 	bl	8009394 <_read_r>
 8009194:	2800      	cmp	r0, #0
 8009196:	bfab      	itete	ge
 8009198:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800919a:	89a3      	ldrhlt	r3, [r4, #12]
 800919c:	181b      	addge	r3, r3, r0
 800919e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80091a2:	bfac      	ite	ge
 80091a4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80091a6:	81a3      	strhlt	r3, [r4, #12]
 80091a8:	bd10      	pop	{r4, pc}

080091aa <__swrite>:
 80091aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80091ae:	461f      	mov	r7, r3
 80091b0:	898b      	ldrh	r3, [r1, #12]
 80091b2:	05db      	lsls	r3, r3, #23
 80091b4:	4605      	mov	r5, r0
 80091b6:	460c      	mov	r4, r1
 80091b8:	4616      	mov	r6, r2
 80091ba:	d505      	bpl.n	80091c8 <__swrite+0x1e>
 80091bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091c0:	2302      	movs	r3, #2
 80091c2:	2200      	movs	r2, #0
 80091c4:	f000 f8d4 	bl	8009370 <_lseek_r>
 80091c8:	89a3      	ldrh	r3, [r4, #12]
 80091ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80091ce:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80091d2:	81a3      	strh	r3, [r4, #12]
 80091d4:	4632      	mov	r2, r6
 80091d6:	463b      	mov	r3, r7
 80091d8:	4628      	mov	r0, r5
 80091da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80091de:	f000 b8eb 	b.w	80093b8 <_write_r>

080091e2 <__sseek>:
 80091e2:	b510      	push	{r4, lr}
 80091e4:	460c      	mov	r4, r1
 80091e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091ea:	f000 f8c1 	bl	8009370 <_lseek_r>
 80091ee:	1c43      	adds	r3, r0, #1
 80091f0:	89a3      	ldrh	r3, [r4, #12]
 80091f2:	bf15      	itete	ne
 80091f4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80091f6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80091fa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80091fe:	81a3      	strheq	r3, [r4, #12]
 8009200:	bf18      	it	ne
 8009202:	81a3      	strhne	r3, [r4, #12]
 8009204:	bd10      	pop	{r4, pc}

08009206 <__sclose>:
 8009206:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800920a:	f000 b8a1 	b.w	8009350 <_close_r>

0800920e <__swbuf_r>:
 800920e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009210:	460e      	mov	r6, r1
 8009212:	4614      	mov	r4, r2
 8009214:	4605      	mov	r5, r0
 8009216:	b118      	cbz	r0, 8009220 <__swbuf_r+0x12>
 8009218:	6a03      	ldr	r3, [r0, #32]
 800921a:	b90b      	cbnz	r3, 8009220 <__swbuf_r+0x12>
 800921c:	f7ff feec 	bl	8008ff8 <__sinit>
 8009220:	69a3      	ldr	r3, [r4, #24]
 8009222:	60a3      	str	r3, [r4, #8]
 8009224:	89a3      	ldrh	r3, [r4, #12]
 8009226:	071a      	lsls	r2, r3, #28
 8009228:	d501      	bpl.n	800922e <__swbuf_r+0x20>
 800922a:	6923      	ldr	r3, [r4, #16]
 800922c:	b943      	cbnz	r3, 8009240 <__swbuf_r+0x32>
 800922e:	4621      	mov	r1, r4
 8009230:	4628      	mov	r0, r5
 8009232:	f000 f82b 	bl	800928c <__swsetup_r>
 8009236:	b118      	cbz	r0, 8009240 <__swbuf_r+0x32>
 8009238:	f04f 37ff 	mov.w	r7, #4294967295
 800923c:	4638      	mov	r0, r7
 800923e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009240:	6823      	ldr	r3, [r4, #0]
 8009242:	6922      	ldr	r2, [r4, #16]
 8009244:	1a98      	subs	r0, r3, r2
 8009246:	6963      	ldr	r3, [r4, #20]
 8009248:	b2f6      	uxtb	r6, r6
 800924a:	4283      	cmp	r3, r0
 800924c:	4637      	mov	r7, r6
 800924e:	dc05      	bgt.n	800925c <__swbuf_r+0x4e>
 8009250:	4621      	mov	r1, r4
 8009252:	4628      	mov	r0, r5
 8009254:	f002 fe20 	bl	800be98 <_fflush_r>
 8009258:	2800      	cmp	r0, #0
 800925a:	d1ed      	bne.n	8009238 <__swbuf_r+0x2a>
 800925c:	68a3      	ldr	r3, [r4, #8]
 800925e:	3b01      	subs	r3, #1
 8009260:	60a3      	str	r3, [r4, #8]
 8009262:	6823      	ldr	r3, [r4, #0]
 8009264:	1c5a      	adds	r2, r3, #1
 8009266:	6022      	str	r2, [r4, #0]
 8009268:	701e      	strb	r6, [r3, #0]
 800926a:	6962      	ldr	r2, [r4, #20]
 800926c:	1c43      	adds	r3, r0, #1
 800926e:	429a      	cmp	r2, r3
 8009270:	d004      	beq.n	800927c <__swbuf_r+0x6e>
 8009272:	89a3      	ldrh	r3, [r4, #12]
 8009274:	07db      	lsls	r3, r3, #31
 8009276:	d5e1      	bpl.n	800923c <__swbuf_r+0x2e>
 8009278:	2e0a      	cmp	r6, #10
 800927a:	d1df      	bne.n	800923c <__swbuf_r+0x2e>
 800927c:	4621      	mov	r1, r4
 800927e:	4628      	mov	r0, r5
 8009280:	f002 fe0a 	bl	800be98 <_fflush_r>
 8009284:	2800      	cmp	r0, #0
 8009286:	d0d9      	beq.n	800923c <__swbuf_r+0x2e>
 8009288:	e7d6      	b.n	8009238 <__swbuf_r+0x2a>
	...

0800928c <__swsetup_r>:
 800928c:	b538      	push	{r3, r4, r5, lr}
 800928e:	4b29      	ldr	r3, [pc, #164]	@ (8009334 <__swsetup_r+0xa8>)
 8009290:	4605      	mov	r5, r0
 8009292:	6818      	ldr	r0, [r3, #0]
 8009294:	460c      	mov	r4, r1
 8009296:	b118      	cbz	r0, 80092a0 <__swsetup_r+0x14>
 8009298:	6a03      	ldr	r3, [r0, #32]
 800929a:	b90b      	cbnz	r3, 80092a0 <__swsetup_r+0x14>
 800929c:	f7ff feac 	bl	8008ff8 <__sinit>
 80092a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80092a4:	0719      	lsls	r1, r3, #28
 80092a6:	d422      	bmi.n	80092ee <__swsetup_r+0x62>
 80092a8:	06da      	lsls	r2, r3, #27
 80092aa:	d407      	bmi.n	80092bc <__swsetup_r+0x30>
 80092ac:	2209      	movs	r2, #9
 80092ae:	602a      	str	r2, [r5, #0]
 80092b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80092b4:	81a3      	strh	r3, [r4, #12]
 80092b6:	f04f 30ff 	mov.w	r0, #4294967295
 80092ba:	e033      	b.n	8009324 <__swsetup_r+0x98>
 80092bc:	0758      	lsls	r0, r3, #29
 80092be:	d512      	bpl.n	80092e6 <__swsetup_r+0x5a>
 80092c0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80092c2:	b141      	cbz	r1, 80092d6 <__swsetup_r+0x4a>
 80092c4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80092c8:	4299      	cmp	r1, r3
 80092ca:	d002      	beq.n	80092d2 <__swsetup_r+0x46>
 80092cc:	4628      	mov	r0, r5
 80092ce:	f000 ff13 	bl	800a0f8 <_free_r>
 80092d2:	2300      	movs	r3, #0
 80092d4:	6363      	str	r3, [r4, #52]	@ 0x34
 80092d6:	89a3      	ldrh	r3, [r4, #12]
 80092d8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80092dc:	81a3      	strh	r3, [r4, #12]
 80092de:	2300      	movs	r3, #0
 80092e0:	6063      	str	r3, [r4, #4]
 80092e2:	6923      	ldr	r3, [r4, #16]
 80092e4:	6023      	str	r3, [r4, #0]
 80092e6:	89a3      	ldrh	r3, [r4, #12]
 80092e8:	f043 0308 	orr.w	r3, r3, #8
 80092ec:	81a3      	strh	r3, [r4, #12]
 80092ee:	6923      	ldr	r3, [r4, #16]
 80092f0:	b94b      	cbnz	r3, 8009306 <__swsetup_r+0x7a>
 80092f2:	89a3      	ldrh	r3, [r4, #12]
 80092f4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80092f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80092fc:	d003      	beq.n	8009306 <__swsetup_r+0x7a>
 80092fe:	4621      	mov	r1, r4
 8009300:	4628      	mov	r0, r5
 8009302:	f002 fe17 	bl	800bf34 <__smakebuf_r>
 8009306:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800930a:	f013 0201 	ands.w	r2, r3, #1
 800930e:	d00a      	beq.n	8009326 <__swsetup_r+0x9a>
 8009310:	2200      	movs	r2, #0
 8009312:	60a2      	str	r2, [r4, #8]
 8009314:	6962      	ldr	r2, [r4, #20]
 8009316:	4252      	negs	r2, r2
 8009318:	61a2      	str	r2, [r4, #24]
 800931a:	6922      	ldr	r2, [r4, #16]
 800931c:	b942      	cbnz	r2, 8009330 <__swsetup_r+0xa4>
 800931e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009322:	d1c5      	bne.n	80092b0 <__swsetup_r+0x24>
 8009324:	bd38      	pop	{r3, r4, r5, pc}
 8009326:	0799      	lsls	r1, r3, #30
 8009328:	bf58      	it	pl
 800932a:	6962      	ldrpl	r2, [r4, #20]
 800932c:	60a2      	str	r2, [r4, #8]
 800932e:	e7f4      	b.n	800931a <__swsetup_r+0x8e>
 8009330:	2000      	movs	r0, #0
 8009332:	e7f7      	b.n	8009324 <__swsetup_r+0x98>
 8009334:	20000064 	.word	0x20000064

08009338 <memset>:
 8009338:	4402      	add	r2, r0
 800933a:	4603      	mov	r3, r0
 800933c:	4293      	cmp	r3, r2
 800933e:	d100      	bne.n	8009342 <memset+0xa>
 8009340:	4770      	bx	lr
 8009342:	f803 1b01 	strb.w	r1, [r3], #1
 8009346:	e7f9      	b.n	800933c <memset+0x4>

08009348 <_localeconv_r>:
 8009348:	4800      	ldr	r0, [pc, #0]	@ (800934c <_localeconv_r+0x4>)
 800934a:	4770      	bx	lr
 800934c:	200001a4 	.word	0x200001a4

08009350 <_close_r>:
 8009350:	b538      	push	{r3, r4, r5, lr}
 8009352:	4d06      	ldr	r5, [pc, #24]	@ (800936c <_close_r+0x1c>)
 8009354:	2300      	movs	r3, #0
 8009356:	4604      	mov	r4, r0
 8009358:	4608      	mov	r0, r1
 800935a:	602b      	str	r3, [r5, #0]
 800935c:	f7f9 fc00 	bl	8002b60 <_close>
 8009360:	1c43      	adds	r3, r0, #1
 8009362:	d102      	bne.n	800936a <_close_r+0x1a>
 8009364:	682b      	ldr	r3, [r5, #0]
 8009366:	b103      	cbz	r3, 800936a <_close_r+0x1a>
 8009368:	6023      	str	r3, [r4, #0]
 800936a:	bd38      	pop	{r3, r4, r5, pc}
 800936c:	200007ac 	.word	0x200007ac

08009370 <_lseek_r>:
 8009370:	b538      	push	{r3, r4, r5, lr}
 8009372:	4d07      	ldr	r5, [pc, #28]	@ (8009390 <_lseek_r+0x20>)
 8009374:	4604      	mov	r4, r0
 8009376:	4608      	mov	r0, r1
 8009378:	4611      	mov	r1, r2
 800937a:	2200      	movs	r2, #0
 800937c:	602a      	str	r2, [r5, #0]
 800937e:	461a      	mov	r2, r3
 8009380:	f7f9 fc15 	bl	8002bae <_lseek>
 8009384:	1c43      	adds	r3, r0, #1
 8009386:	d102      	bne.n	800938e <_lseek_r+0x1e>
 8009388:	682b      	ldr	r3, [r5, #0]
 800938a:	b103      	cbz	r3, 800938e <_lseek_r+0x1e>
 800938c:	6023      	str	r3, [r4, #0]
 800938e:	bd38      	pop	{r3, r4, r5, pc}
 8009390:	200007ac 	.word	0x200007ac

08009394 <_read_r>:
 8009394:	b538      	push	{r3, r4, r5, lr}
 8009396:	4d07      	ldr	r5, [pc, #28]	@ (80093b4 <_read_r+0x20>)
 8009398:	4604      	mov	r4, r0
 800939a:	4608      	mov	r0, r1
 800939c:	4611      	mov	r1, r2
 800939e:	2200      	movs	r2, #0
 80093a0:	602a      	str	r2, [r5, #0]
 80093a2:	461a      	mov	r2, r3
 80093a4:	f7f9 fba3 	bl	8002aee <_read>
 80093a8:	1c43      	adds	r3, r0, #1
 80093aa:	d102      	bne.n	80093b2 <_read_r+0x1e>
 80093ac:	682b      	ldr	r3, [r5, #0]
 80093ae:	b103      	cbz	r3, 80093b2 <_read_r+0x1e>
 80093b0:	6023      	str	r3, [r4, #0]
 80093b2:	bd38      	pop	{r3, r4, r5, pc}
 80093b4:	200007ac 	.word	0x200007ac

080093b8 <_write_r>:
 80093b8:	b538      	push	{r3, r4, r5, lr}
 80093ba:	4d07      	ldr	r5, [pc, #28]	@ (80093d8 <_write_r+0x20>)
 80093bc:	4604      	mov	r4, r0
 80093be:	4608      	mov	r0, r1
 80093c0:	4611      	mov	r1, r2
 80093c2:	2200      	movs	r2, #0
 80093c4:	602a      	str	r2, [r5, #0]
 80093c6:	461a      	mov	r2, r3
 80093c8:	f7f9 fbae 	bl	8002b28 <_write>
 80093cc:	1c43      	adds	r3, r0, #1
 80093ce:	d102      	bne.n	80093d6 <_write_r+0x1e>
 80093d0:	682b      	ldr	r3, [r5, #0]
 80093d2:	b103      	cbz	r3, 80093d6 <_write_r+0x1e>
 80093d4:	6023      	str	r3, [r4, #0]
 80093d6:	bd38      	pop	{r3, r4, r5, pc}
 80093d8:	200007ac 	.word	0x200007ac

080093dc <__errno>:
 80093dc:	4b01      	ldr	r3, [pc, #4]	@ (80093e4 <__errno+0x8>)
 80093de:	6818      	ldr	r0, [r3, #0]
 80093e0:	4770      	bx	lr
 80093e2:	bf00      	nop
 80093e4:	20000064 	.word	0x20000064

080093e8 <__libc_init_array>:
 80093e8:	b570      	push	{r4, r5, r6, lr}
 80093ea:	4d0d      	ldr	r5, [pc, #52]	@ (8009420 <__libc_init_array+0x38>)
 80093ec:	4c0d      	ldr	r4, [pc, #52]	@ (8009424 <__libc_init_array+0x3c>)
 80093ee:	1b64      	subs	r4, r4, r5
 80093f0:	10a4      	asrs	r4, r4, #2
 80093f2:	2600      	movs	r6, #0
 80093f4:	42a6      	cmp	r6, r4
 80093f6:	d109      	bne.n	800940c <__libc_init_array+0x24>
 80093f8:	4d0b      	ldr	r5, [pc, #44]	@ (8009428 <__libc_init_array+0x40>)
 80093fa:	4c0c      	ldr	r4, [pc, #48]	@ (800942c <__libc_init_array+0x44>)
 80093fc:	f003 fa6a 	bl	800c8d4 <_init>
 8009400:	1b64      	subs	r4, r4, r5
 8009402:	10a4      	asrs	r4, r4, #2
 8009404:	2600      	movs	r6, #0
 8009406:	42a6      	cmp	r6, r4
 8009408:	d105      	bne.n	8009416 <__libc_init_array+0x2e>
 800940a:	bd70      	pop	{r4, r5, r6, pc}
 800940c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009410:	4798      	blx	r3
 8009412:	3601      	adds	r6, #1
 8009414:	e7ee      	b.n	80093f4 <__libc_init_array+0xc>
 8009416:	f855 3b04 	ldr.w	r3, [r5], #4
 800941a:	4798      	blx	r3
 800941c:	3601      	adds	r6, #1
 800941e:	e7f2      	b.n	8009406 <__libc_init_array+0x1e>
 8009420:	0800d028 	.word	0x0800d028
 8009424:	0800d028 	.word	0x0800d028
 8009428:	0800d028 	.word	0x0800d028
 800942c:	0800d02c 	.word	0x0800d02c

08009430 <__retarget_lock_init_recursive>:
 8009430:	4770      	bx	lr

08009432 <__retarget_lock_acquire_recursive>:
 8009432:	4770      	bx	lr

08009434 <__retarget_lock_release_recursive>:
 8009434:	4770      	bx	lr
	...

08009438 <nanf>:
 8009438:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8009440 <nanf+0x8>
 800943c:	4770      	bx	lr
 800943e:	bf00      	nop
 8009440:	7fc00000 	.word	0x7fc00000

08009444 <quorem>:
 8009444:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009448:	6903      	ldr	r3, [r0, #16]
 800944a:	690c      	ldr	r4, [r1, #16]
 800944c:	42a3      	cmp	r3, r4
 800944e:	4607      	mov	r7, r0
 8009450:	db7e      	blt.n	8009550 <quorem+0x10c>
 8009452:	3c01      	subs	r4, #1
 8009454:	f101 0814 	add.w	r8, r1, #20
 8009458:	00a3      	lsls	r3, r4, #2
 800945a:	f100 0514 	add.w	r5, r0, #20
 800945e:	9300      	str	r3, [sp, #0]
 8009460:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009464:	9301      	str	r3, [sp, #4]
 8009466:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800946a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800946e:	3301      	adds	r3, #1
 8009470:	429a      	cmp	r2, r3
 8009472:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009476:	fbb2 f6f3 	udiv	r6, r2, r3
 800947a:	d32e      	bcc.n	80094da <quorem+0x96>
 800947c:	f04f 0a00 	mov.w	sl, #0
 8009480:	46c4      	mov	ip, r8
 8009482:	46ae      	mov	lr, r5
 8009484:	46d3      	mov	fp, sl
 8009486:	f85c 3b04 	ldr.w	r3, [ip], #4
 800948a:	b298      	uxth	r0, r3
 800948c:	fb06 a000 	mla	r0, r6, r0, sl
 8009490:	0c02      	lsrs	r2, r0, #16
 8009492:	0c1b      	lsrs	r3, r3, #16
 8009494:	fb06 2303 	mla	r3, r6, r3, r2
 8009498:	f8de 2000 	ldr.w	r2, [lr]
 800949c:	b280      	uxth	r0, r0
 800949e:	b292      	uxth	r2, r2
 80094a0:	1a12      	subs	r2, r2, r0
 80094a2:	445a      	add	r2, fp
 80094a4:	f8de 0000 	ldr.w	r0, [lr]
 80094a8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80094ac:	b29b      	uxth	r3, r3
 80094ae:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80094b2:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80094b6:	b292      	uxth	r2, r2
 80094b8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80094bc:	45e1      	cmp	r9, ip
 80094be:	f84e 2b04 	str.w	r2, [lr], #4
 80094c2:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80094c6:	d2de      	bcs.n	8009486 <quorem+0x42>
 80094c8:	9b00      	ldr	r3, [sp, #0]
 80094ca:	58eb      	ldr	r3, [r5, r3]
 80094cc:	b92b      	cbnz	r3, 80094da <quorem+0x96>
 80094ce:	9b01      	ldr	r3, [sp, #4]
 80094d0:	3b04      	subs	r3, #4
 80094d2:	429d      	cmp	r5, r3
 80094d4:	461a      	mov	r2, r3
 80094d6:	d32f      	bcc.n	8009538 <quorem+0xf4>
 80094d8:	613c      	str	r4, [r7, #16]
 80094da:	4638      	mov	r0, r7
 80094dc:	f001 f9c8 	bl	800a870 <__mcmp>
 80094e0:	2800      	cmp	r0, #0
 80094e2:	db25      	blt.n	8009530 <quorem+0xec>
 80094e4:	4629      	mov	r1, r5
 80094e6:	2000      	movs	r0, #0
 80094e8:	f858 2b04 	ldr.w	r2, [r8], #4
 80094ec:	f8d1 c000 	ldr.w	ip, [r1]
 80094f0:	fa1f fe82 	uxth.w	lr, r2
 80094f4:	fa1f f38c 	uxth.w	r3, ip
 80094f8:	eba3 030e 	sub.w	r3, r3, lr
 80094fc:	4403      	add	r3, r0
 80094fe:	0c12      	lsrs	r2, r2, #16
 8009500:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8009504:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8009508:	b29b      	uxth	r3, r3
 800950a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800950e:	45c1      	cmp	r9, r8
 8009510:	f841 3b04 	str.w	r3, [r1], #4
 8009514:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009518:	d2e6      	bcs.n	80094e8 <quorem+0xa4>
 800951a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800951e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009522:	b922      	cbnz	r2, 800952e <quorem+0xea>
 8009524:	3b04      	subs	r3, #4
 8009526:	429d      	cmp	r5, r3
 8009528:	461a      	mov	r2, r3
 800952a:	d30b      	bcc.n	8009544 <quorem+0x100>
 800952c:	613c      	str	r4, [r7, #16]
 800952e:	3601      	adds	r6, #1
 8009530:	4630      	mov	r0, r6
 8009532:	b003      	add	sp, #12
 8009534:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009538:	6812      	ldr	r2, [r2, #0]
 800953a:	3b04      	subs	r3, #4
 800953c:	2a00      	cmp	r2, #0
 800953e:	d1cb      	bne.n	80094d8 <quorem+0x94>
 8009540:	3c01      	subs	r4, #1
 8009542:	e7c6      	b.n	80094d2 <quorem+0x8e>
 8009544:	6812      	ldr	r2, [r2, #0]
 8009546:	3b04      	subs	r3, #4
 8009548:	2a00      	cmp	r2, #0
 800954a:	d1ef      	bne.n	800952c <quorem+0xe8>
 800954c:	3c01      	subs	r4, #1
 800954e:	e7ea      	b.n	8009526 <quorem+0xe2>
 8009550:	2000      	movs	r0, #0
 8009552:	e7ee      	b.n	8009532 <quorem+0xee>
 8009554:	0000      	movs	r0, r0
	...

08009558 <_dtoa_r>:
 8009558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800955c:	69c7      	ldr	r7, [r0, #28]
 800955e:	b097      	sub	sp, #92	@ 0x5c
 8009560:	ed8d 0b04 	vstr	d0, [sp, #16]
 8009564:	ec55 4b10 	vmov	r4, r5, d0
 8009568:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800956a:	9107      	str	r1, [sp, #28]
 800956c:	4681      	mov	r9, r0
 800956e:	920c      	str	r2, [sp, #48]	@ 0x30
 8009570:	9311      	str	r3, [sp, #68]	@ 0x44
 8009572:	b97f      	cbnz	r7, 8009594 <_dtoa_r+0x3c>
 8009574:	2010      	movs	r0, #16
 8009576:	f000 fe09 	bl	800a18c <malloc>
 800957a:	4602      	mov	r2, r0
 800957c:	f8c9 001c 	str.w	r0, [r9, #28]
 8009580:	b920      	cbnz	r0, 800958c <_dtoa_r+0x34>
 8009582:	4ba9      	ldr	r3, [pc, #676]	@ (8009828 <_dtoa_r+0x2d0>)
 8009584:	21ef      	movs	r1, #239	@ 0xef
 8009586:	48a9      	ldr	r0, [pc, #676]	@ (800982c <_dtoa_r+0x2d4>)
 8009588:	f002 fd86 	bl	800c098 <__assert_func>
 800958c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009590:	6007      	str	r7, [r0, #0]
 8009592:	60c7      	str	r7, [r0, #12]
 8009594:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009598:	6819      	ldr	r1, [r3, #0]
 800959a:	b159      	cbz	r1, 80095b4 <_dtoa_r+0x5c>
 800959c:	685a      	ldr	r2, [r3, #4]
 800959e:	604a      	str	r2, [r1, #4]
 80095a0:	2301      	movs	r3, #1
 80095a2:	4093      	lsls	r3, r2
 80095a4:	608b      	str	r3, [r1, #8]
 80095a6:	4648      	mov	r0, r9
 80095a8:	f000 fee6 	bl	800a378 <_Bfree>
 80095ac:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80095b0:	2200      	movs	r2, #0
 80095b2:	601a      	str	r2, [r3, #0]
 80095b4:	1e2b      	subs	r3, r5, #0
 80095b6:	bfb9      	ittee	lt
 80095b8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80095bc:	9305      	strlt	r3, [sp, #20]
 80095be:	2300      	movge	r3, #0
 80095c0:	6033      	strge	r3, [r6, #0]
 80095c2:	9f05      	ldr	r7, [sp, #20]
 80095c4:	4b9a      	ldr	r3, [pc, #616]	@ (8009830 <_dtoa_r+0x2d8>)
 80095c6:	bfbc      	itt	lt
 80095c8:	2201      	movlt	r2, #1
 80095ca:	6032      	strlt	r2, [r6, #0]
 80095cc:	43bb      	bics	r3, r7
 80095ce:	d112      	bne.n	80095f6 <_dtoa_r+0x9e>
 80095d0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80095d2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80095d6:	6013      	str	r3, [r2, #0]
 80095d8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80095dc:	4323      	orrs	r3, r4
 80095de:	f000 855a 	beq.w	800a096 <_dtoa_r+0xb3e>
 80095e2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80095e4:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8009844 <_dtoa_r+0x2ec>
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	f000 855c 	beq.w	800a0a6 <_dtoa_r+0xb4e>
 80095ee:	f10a 0303 	add.w	r3, sl, #3
 80095f2:	f000 bd56 	b.w	800a0a2 <_dtoa_r+0xb4a>
 80095f6:	ed9d 7b04 	vldr	d7, [sp, #16]
 80095fa:	2200      	movs	r2, #0
 80095fc:	ec51 0b17 	vmov	r0, r1, d7
 8009600:	2300      	movs	r3, #0
 8009602:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8009606:	f7f7 fa8f 	bl	8000b28 <__aeabi_dcmpeq>
 800960a:	4680      	mov	r8, r0
 800960c:	b158      	cbz	r0, 8009626 <_dtoa_r+0xce>
 800960e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8009610:	2301      	movs	r3, #1
 8009612:	6013      	str	r3, [r2, #0]
 8009614:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009616:	b113      	cbz	r3, 800961e <_dtoa_r+0xc6>
 8009618:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800961a:	4b86      	ldr	r3, [pc, #536]	@ (8009834 <_dtoa_r+0x2dc>)
 800961c:	6013      	str	r3, [r2, #0]
 800961e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8009848 <_dtoa_r+0x2f0>
 8009622:	f000 bd40 	b.w	800a0a6 <_dtoa_r+0xb4e>
 8009626:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800962a:	aa14      	add	r2, sp, #80	@ 0x50
 800962c:	a915      	add	r1, sp, #84	@ 0x54
 800962e:	4648      	mov	r0, r9
 8009630:	f001 fa3e 	bl	800aab0 <__d2b>
 8009634:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8009638:	9002      	str	r0, [sp, #8]
 800963a:	2e00      	cmp	r6, #0
 800963c:	d078      	beq.n	8009730 <_dtoa_r+0x1d8>
 800963e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009640:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8009644:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009648:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800964c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009650:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8009654:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009658:	4619      	mov	r1, r3
 800965a:	2200      	movs	r2, #0
 800965c:	4b76      	ldr	r3, [pc, #472]	@ (8009838 <_dtoa_r+0x2e0>)
 800965e:	f7f6 fe43 	bl	80002e8 <__aeabi_dsub>
 8009662:	a36b      	add	r3, pc, #428	@ (adr r3, 8009810 <_dtoa_r+0x2b8>)
 8009664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009668:	f7f6 fff6 	bl	8000658 <__aeabi_dmul>
 800966c:	a36a      	add	r3, pc, #424	@ (adr r3, 8009818 <_dtoa_r+0x2c0>)
 800966e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009672:	f7f6 fe3b 	bl	80002ec <__adddf3>
 8009676:	4604      	mov	r4, r0
 8009678:	4630      	mov	r0, r6
 800967a:	460d      	mov	r5, r1
 800967c:	f7f6 ff82 	bl	8000584 <__aeabi_i2d>
 8009680:	a367      	add	r3, pc, #412	@ (adr r3, 8009820 <_dtoa_r+0x2c8>)
 8009682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009686:	f7f6 ffe7 	bl	8000658 <__aeabi_dmul>
 800968a:	4602      	mov	r2, r0
 800968c:	460b      	mov	r3, r1
 800968e:	4620      	mov	r0, r4
 8009690:	4629      	mov	r1, r5
 8009692:	f7f6 fe2b 	bl	80002ec <__adddf3>
 8009696:	4604      	mov	r4, r0
 8009698:	460d      	mov	r5, r1
 800969a:	f7f7 fa8d 	bl	8000bb8 <__aeabi_d2iz>
 800969e:	2200      	movs	r2, #0
 80096a0:	4607      	mov	r7, r0
 80096a2:	2300      	movs	r3, #0
 80096a4:	4620      	mov	r0, r4
 80096a6:	4629      	mov	r1, r5
 80096a8:	f7f7 fa48 	bl	8000b3c <__aeabi_dcmplt>
 80096ac:	b140      	cbz	r0, 80096c0 <_dtoa_r+0x168>
 80096ae:	4638      	mov	r0, r7
 80096b0:	f7f6 ff68 	bl	8000584 <__aeabi_i2d>
 80096b4:	4622      	mov	r2, r4
 80096b6:	462b      	mov	r3, r5
 80096b8:	f7f7 fa36 	bl	8000b28 <__aeabi_dcmpeq>
 80096bc:	b900      	cbnz	r0, 80096c0 <_dtoa_r+0x168>
 80096be:	3f01      	subs	r7, #1
 80096c0:	2f16      	cmp	r7, #22
 80096c2:	d852      	bhi.n	800976a <_dtoa_r+0x212>
 80096c4:	4b5d      	ldr	r3, [pc, #372]	@ (800983c <_dtoa_r+0x2e4>)
 80096c6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80096ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096ce:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80096d2:	f7f7 fa33 	bl	8000b3c <__aeabi_dcmplt>
 80096d6:	2800      	cmp	r0, #0
 80096d8:	d049      	beq.n	800976e <_dtoa_r+0x216>
 80096da:	3f01      	subs	r7, #1
 80096dc:	2300      	movs	r3, #0
 80096de:	9310      	str	r3, [sp, #64]	@ 0x40
 80096e0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80096e2:	1b9b      	subs	r3, r3, r6
 80096e4:	1e5a      	subs	r2, r3, #1
 80096e6:	bf45      	ittet	mi
 80096e8:	f1c3 0301 	rsbmi	r3, r3, #1
 80096ec:	9300      	strmi	r3, [sp, #0]
 80096ee:	2300      	movpl	r3, #0
 80096f0:	2300      	movmi	r3, #0
 80096f2:	9206      	str	r2, [sp, #24]
 80096f4:	bf54      	ite	pl
 80096f6:	9300      	strpl	r3, [sp, #0]
 80096f8:	9306      	strmi	r3, [sp, #24]
 80096fa:	2f00      	cmp	r7, #0
 80096fc:	db39      	blt.n	8009772 <_dtoa_r+0x21a>
 80096fe:	9b06      	ldr	r3, [sp, #24]
 8009700:	970d      	str	r7, [sp, #52]	@ 0x34
 8009702:	443b      	add	r3, r7
 8009704:	9306      	str	r3, [sp, #24]
 8009706:	2300      	movs	r3, #0
 8009708:	9308      	str	r3, [sp, #32]
 800970a:	9b07      	ldr	r3, [sp, #28]
 800970c:	2b09      	cmp	r3, #9
 800970e:	d863      	bhi.n	80097d8 <_dtoa_r+0x280>
 8009710:	2b05      	cmp	r3, #5
 8009712:	bfc4      	itt	gt
 8009714:	3b04      	subgt	r3, #4
 8009716:	9307      	strgt	r3, [sp, #28]
 8009718:	9b07      	ldr	r3, [sp, #28]
 800971a:	f1a3 0302 	sub.w	r3, r3, #2
 800971e:	bfcc      	ite	gt
 8009720:	2400      	movgt	r4, #0
 8009722:	2401      	movle	r4, #1
 8009724:	2b03      	cmp	r3, #3
 8009726:	d863      	bhi.n	80097f0 <_dtoa_r+0x298>
 8009728:	e8df f003 	tbb	[pc, r3]
 800972c:	2b375452 	.word	0x2b375452
 8009730:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8009734:	441e      	add	r6, r3
 8009736:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800973a:	2b20      	cmp	r3, #32
 800973c:	bfc1      	itttt	gt
 800973e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009742:	409f      	lslgt	r7, r3
 8009744:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8009748:	fa24 f303 	lsrgt.w	r3, r4, r3
 800974c:	bfd6      	itet	le
 800974e:	f1c3 0320 	rsble	r3, r3, #32
 8009752:	ea47 0003 	orrgt.w	r0, r7, r3
 8009756:	fa04 f003 	lslle.w	r0, r4, r3
 800975a:	f7f6 ff03 	bl	8000564 <__aeabi_ui2d>
 800975e:	2201      	movs	r2, #1
 8009760:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8009764:	3e01      	subs	r6, #1
 8009766:	9212      	str	r2, [sp, #72]	@ 0x48
 8009768:	e776      	b.n	8009658 <_dtoa_r+0x100>
 800976a:	2301      	movs	r3, #1
 800976c:	e7b7      	b.n	80096de <_dtoa_r+0x186>
 800976e:	9010      	str	r0, [sp, #64]	@ 0x40
 8009770:	e7b6      	b.n	80096e0 <_dtoa_r+0x188>
 8009772:	9b00      	ldr	r3, [sp, #0]
 8009774:	1bdb      	subs	r3, r3, r7
 8009776:	9300      	str	r3, [sp, #0]
 8009778:	427b      	negs	r3, r7
 800977a:	9308      	str	r3, [sp, #32]
 800977c:	2300      	movs	r3, #0
 800977e:	930d      	str	r3, [sp, #52]	@ 0x34
 8009780:	e7c3      	b.n	800970a <_dtoa_r+0x1b2>
 8009782:	2301      	movs	r3, #1
 8009784:	9309      	str	r3, [sp, #36]	@ 0x24
 8009786:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009788:	eb07 0b03 	add.w	fp, r7, r3
 800978c:	f10b 0301 	add.w	r3, fp, #1
 8009790:	2b01      	cmp	r3, #1
 8009792:	9303      	str	r3, [sp, #12]
 8009794:	bfb8      	it	lt
 8009796:	2301      	movlt	r3, #1
 8009798:	e006      	b.n	80097a8 <_dtoa_r+0x250>
 800979a:	2301      	movs	r3, #1
 800979c:	9309      	str	r3, [sp, #36]	@ 0x24
 800979e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	dd28      	ble.n	80097f6 <_dtoa_r+0x29e>
 80097a4:	469b      	mov	fp, r3
 80097a6:	9303      	str	r3, [sp, #12]
 80097a8:	f8d9 001c 	ldr.w	r0, [r9, #28]
 80097ac:	2100      	movs	r1, #0
 80097ae:	2204      	movs	r2, #4
 80097b0:	f102 0514 	add.w	r5, r2, #20
 80097b4:	429d      	cmp	r5, r3
 80097b6:	d926      	bls.n	8009806 <_dtoa_r+0x2ae>
 80097b8:	6041      	str	r1, [r0, #4]
 80097ba:	4648      	mov	r0, r9
 80097bc:	f000 fd9c 	bl	800a2f8 <_Balloc>
 80097c0:	4682      	mov	sl, r0
 80097c2:	2800      	cmp	r0, #0
 80097c4:	d142      	bne.n	800984c <_dtoa_r+0x2f4>
 80097c6:	4b1e      	ldr	r3, [pc, #120]	@ (8009840 <_dtoa_r+0x2e8>)
 80097c8:	4602      	mov	r2, r0
 80097ca:	f240 11af 	movw	r1, #431	@ 0x1af
 80097ce:	e6da      	b.n	8009586 <_dtoa_r+0x2e>
 80097d0:	2300      	movs	r3, #0
 80097d2:	e7e3      	b.n	800979c <_dtoa_r+0x244>
 80097d4:	2300      	movs	r3, #0
 80097d6:	e7d5      	b.n	8009784 <_dtoa_r+0x22c>
 80097d8:	2401      	movs	r4, #1
 80097da:	2300      	movs	r3, #0
 80097dc:	9307      	str	r3, [sp, #28]
 80097de:	9409      	str	r4, [sp, #36]	@ 0x24
 80097e0:	f04f 3bff 	mov.w	fp, #4294967295
 80097e4:	2200      	movs	r2, #0
 80097e6:	f8cd b00c 	str.w	fp, [sp, #12]
 80097ea:	2312      	movs	r3, #18
 80097ec:	920c      	str	r2, [sp, #48]	@ 0x30
 80097ee:	e7db      	b.n	80097a8 <_dtoa_r+0x250>
 80097f0:	2301      	movs	r3, #1
 80097f2:	9309      	str	r3, [sp, #36]	@ 0x24
 80097f4:	e7f4      	b.n	80097e0 <_dtoa_r+0x288>
 80097f6:	f04f 0b01 	mov.w	fp, #1
 80097fa:	f8cd b00c 	str.w	fp, [sp, #12]
 80097fe:	465b      	mov	r3, fp
 8009800:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8009804:	e7d0      	b.n	80097a8 <_dtoa_r+0x250>
 8009806:	3101      	adds	r1, #1
 8009808:	0052      	lsls	r2, r2, #1
 800980a:	e7d1      	b.n	80097b0 <_dtoa_r+0x258>
 800980c:	f3af 8000 	nop.w
 8009810:	636f4361 	.word	0x636f4361
 8009814:	3fd287a7 	.word	0x3fd287a7
 8009818:	8b60c8b3 	.word	0x8b60c8b3
 800981c:	3fc68a28 	.word	0x3fc68a28
 8009820:	509f79fb 	.word	0x509f79fb
 8009824:	3fd34413 	.word	0x3fd34413
 8009828:	0800cd3f 	.word	0x0800cd3f
 800982c:	0800cd56 	.word	0x0800cd56
 8009830:	7ff00000 	.word	0x7ff00000
 8009834:	0800cd0a 	.word	0x0800cd0a
 8009838:	3ff80000 	.word	0x3ff80000
 800983c:	0800cf08 	.word	0x0800cf08
 8009840:	0800cdae 	.word	0x0800cdae
 8009844:	0800cd3b 	.word	0x0800cd3b
 8009848:	0800cd09 	.word	0x0800cd09
 800984c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009850:	6018      	str	r0, [r3, #0]
 8009852:	9b03      	ldr	r3, [sp, #12]
 8009854:	2b0e      	cmp	r3, #14
 8009856:	f200 80a1 	bhi.w	800999c <_dtoa_r+0x444>
 800985a:	2c00      	cmp	r4, #0
 800985c:	f000 809e 	beq.w	800999c <_dtoa_r+0x444>
 8009860:	2f00      	cmp	r7, #0
 8009862:	dd33      	ble.n	80098cc <_dtoa_r+0x374>
 8009864:	4b9c      	ldr	r3, [pc, #624]	@ (8009ad8 <_dtoa_r+0x580>)
 8009866:	f007 020f 	and.w	r2, r7, #15
 800986a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800986e:	ed93 7b00 	vldr	d7, [r3]
 8009872:	05f8      	lsls	r0, r7, #23
 8009874:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8009878:	ea4f 1427 	mov.w	r4, r7, asr #4
 800987c:	d516      	bpl.n	80098ac <_dtoa_r+0x354>
 800987e:	4b97      	ldr	r3, [pc, #604]	@ (8009adc <_dtoa_r+0x584>)
 8009880:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009884:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009888:	f7f7 f810 	bl	80008ac <__aeabi_ddiv>
 800988c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009890:	f004 040f 	and.w	r4, r4, #15
 8009894:	2603      	movs	r6, #3
 8009896:	4d91      	ldr	r5, [pc, #580]	@ (8009adc <_dtoa_r+0x584>)
 8009898:	b954      	cbnz	r4, 80098b0 <_dtoa_r+0x358>
 800989a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800989e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80098a2:	f7f7 f803 	bl	80008ac <__aeabi_ddiv>
 80098a6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80098aa:	e028      	b.n	80098fe <_dtoa_r+0x3a6>
 80098ac:	2602      	movs	r6, #2
 80098ae:	e7f2      	b.n	8009896 <_dtoa_r+0x33e>
 80098b0:	07e1      	lsls	r1, r4, #31
 80098b2:	d508      	bpl.n	80098c6 <_dtoa_r+0x36e>
 80098b4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80098b8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80098bc:	f7f6 fecc 	bl	8000658 <__aeabi_dmul>
 80098c0:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80098c4:	3601      	adds	r6, #1
 80098c6:	1064      	asrs	r4, r4, #1
 80098c8:	3508      	adds	r5, #8
 80098ca:	e7e5      	b.n	8009898 <_dtoa_r+0x340>
 80098cc:	f000 80af 	beq.w	8009a2e <_dtoa_r+0x4d6>
 80098d0:	427c      	negs	r4, r7
 80098d2:	4b81      	ldr	r3, [pc, #516]	@ (8009ad8 <_dtoa_r+0x580>)
 80098d4:	4d81      	ldr	r5, [pc, #516]	@ (8009adc <_dtoa_r+0x584>)
 80098d6:	f004 020f 	and.w	r2, r4, #15
 80098da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80098de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098e2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80098e6:	f7f6 feb7 	bl	8000658 <__aeabi_dmul>
 80098ea:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80098ee:	1124      	asrs	r4, r4, #4
 80098f0:	2300      	movs	r3, #0
 80098f2:	2602      	movs	r6, #2
 80098f4:	2c00      	cmp	r4, #0
 80098f6:	f040 808f 	bne.w	8009a18 <_dtoa_r+0x4c0>
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d1d3      	bne.n	80098a6 <_dtoa_r+0x34e>
 80098fe:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009900:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8009904:	2b00      	cmp	r3, #0
 8009906:	f000 8094 	beq.w	8009a32 <_dtoa_r+0x4da>
 800990a:	4b75      	ldr	r3, [pc, #468]	@ (8009ae0 <_dtoa_r+0x588>)
 800990c:	2200      	movs	r2, #0
 800990e:	4620      	mov	r0, r4
 8009910:	4629      	mov	r1, r5
 8009912:	f7f7 f913 	bl	8000b3c <__aeabi_dcmplt>
 8009916:	2800      	cmp	r0, #0
 8009918:	f000 808b 	beq.w	8009a32 <_dtoa_r+0x4da>
 800991c:	9b03      	ldr	r3, [sp, #12]
 800991e:	2b00      	cmp	r3, #0
 8009920:	f000 8087 	beq.w	8009a32 <_dtoa_r+0x4da>
 8009924:	f1bb 0f00 	cmp.w	fp, #0
 8009928:	dd34      	ble.n	8009994 <_dtoa_r+0x43c>
 800992a:	4620      	mov	r0, r4
 800992c:	4b6d      	ldr	r3, [pc, #436]	@ (8009ae4 <_dtoa_r+0x58c>)
 800992e:	2200      	movs	r2, #0
 8009930:	4629      	mov	r1, r5
 8009932:	f7f6 fe91 	bl	8000658 <__aeabi_dmul>
 8009936:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800993a:	f107 38ff 	add.w	r8, r7, #4294967295
 800993e:	3601      	adds	r6, #1
 8009940:	465c      	mov	r4, fp
 8009942:	4630      	mov	r0, r6
 8009944:	f7f6 fe1e 	bl	8000584 <__aeabi_i2d>
 8009948:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800994c:	f7f6 fe84 	bl	8000658 <__aeabi_dmul>
 8009950:	4b65      	ldr	r3, [pc, #404]	@ (8009ae8 <_dtoa_r+0x590>)
 8009952:	2200      	movs	r2, #0
 8009954:	f7f6 fcca 	bl	80002ec <__adddf3>
 8009958:	4605      	mov	r5, r0
 800995a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800995e:	2c00      	cmp	r4, #0
 8009960:	d16a      	bne.n	8009a38 <_dtoa_r+0x4e0>
 8009962:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009966:	4b61      	ldr	r3, [pc, #388]	@ (8009aec <_dtoa_r+0x594>)
 8009968:	2200      	movs	r2, #0
 800996a:	f7f6 fcbd 	bl	80002e8 <__aeabi_dsub>
 800996e:	4602      	mov	r2, r0
 8009970:	460b      	mov	r3, r1
 8009972:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009976:	462a      	mov	r2, r5
 8009978:	4633      	mov	r3, r6
 800997a:	f7f7 f8fd 	bl	8000b78 <__aeabi_dcmpgt>
 800997e:	2800      	cmp	r0, #0
 8009980:	f040 8298 	bne.w	8009eb4 <_dtoa_r+0x95c>
 8009984:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009988:	462a      	mov	r2, r5
 800998a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800998e:	f7f7 f8d5 	bl	8000b3c <__aeabi_dcmplt>
 8009992:	bb38      	cbnz	r0, 80099e4 <_dtoa_r+0x48c>
 8009994:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8009998:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800999c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800999e:	2b00      	cmp	r3, #0
 80099a0:	f2c0 8157 	blt.w	8009c52 <_dtoa_r+0x6fa>
 80099a4:	2f0e      	cmp	r7, #14
 80099a6:	f300 8154 	bgt.w	8009c52 <_dtoa_r+0x6fa>
 80099aa:	4b4b      	ldr	r3, [pc, #300]	@ (8009ad8 <_dtoa_r+0x580>)
 80099ac:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80099b0:	ed93 7b00 	vldr	d7, [r3]
 80099b4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	ed8d 7b00 	vstr	d7, [sp]
 80099bc:	f280 80e5 	bge.w	8009b8a <_dtoa_r+0x632>
 80099c0:	9b03      	ldr	r3, [sp, #12]
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	f300 80e1 	bgt.w	8009b8a <_dtoa_r+0x632>
 80099c8:	d10c      	bne.n	80099e4 <_dtoa_r+0x48c>
 80099ca:	4b48      	ldr	r3, [pc, #288]	@ (8009aec <_dtoa_r+0x594>)
 80099cc:	2200      	movs	r2, #0
 80099ce:	ec51 0b17 	vmov	r0, r1, d7
 80099d2:	f7f6 fe41 	bl	8000658 <__aeabi_dmul>
 80099d6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80099da:	f7f7 f8c3 	bl	8000b64 <__aeabi_dcmpge>
 80099de:	2800      	cmp	r0, #0
 80099e0:	f000 8266 	beq.w	8009eb0 <_dtoa_r+0x958>
 80099e4:	2400      	movs	r4, #0
 80099e6:	4625      	mov	r5, r4
 80099e8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80099ea:	4656      	mov	r6, sl
 80099ec:	ea6f 0803 	mvn.w	r8, r3
 80099f0:	2700      	movs	r7, #0
 80099f2:	4621      	mov	r1, r4
 80099f4:	4648      	mov	r0, r9
 80099f6:	f000 fcbf 	bl	800a378 <_Bfree>
 80099fa:	2d00      	cmp	r5, #0
 80099fc:	f000 80bd 	beq.w	8009b7a <_dtoa_r+0x622>
 8009a00:	b12f      	cbz	r7, 8009a0e <_dtoa_r+0x4b6>
 8009a02:	42af      	cmp	r7, r5
 8009a04:	d003      	beq.n	8009a0e <_dtoa_r+0x4b6>
 8009a06:	4639      	mov	r1, r7
 8009a08:	4648      	mov	r0, r9
 8009a0a:	f000 fcb5 	bl	800a378 <_Bfree>
 8009a0e:	4629      	mov	r1, r5
 8009a10:	4648      	mov	r0, r9
 8009a12:	f000 fcb1 	bl	800a378 <_Bfree>
 8009a16:	e0b0      	b.n	8009b7a <_dtoa_r+0x622>
 8009a18:	07e2      	lsls	r2, r4, #31
 8009a1a:	d505      	bpl.n	8009a28 <_dtoa_r+0x4d0>
 8009a1c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009a20:	f7f6 fe1a 	bl	8000658 <__aeabi_dmul>
 8009a24:	3601      	adds	r6, #1
 8009a26:	2301      	movs	r3, #1
 8009a28:	1064      	asrs	r4, r4, #1
 8009a2a:	3508      	adds	r5, #8
 8009a2c:	e762      	b.n	80098f4 <_dtoa_r+0x39c>
 8009a2e:	2602      	movs	r6, #2
 8009a30:	e765      	b.n	80098fe <_dtoa_r+0x3a6>
 8009a32:	9c03      	ldr	r4, [sp, #12]
 8009a34:	46b8      	mov	r8, r7
 8009a36:	e784      	b.n	8009942 <_dtoa_r+0x3ea>
 8009a38:	4b27      	ldr	r3, [pc, #156]	@ (8009ad8 <_dtoa_r+0x580>)
 8009a3a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009a3c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009a40:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009a44:	4454      	add	r4, sl
 8009a46:	2900      	cmp	r1, #0
 8009a48:	d054      	beq.n	8009af4 <_dtoa_r+0x59c>
 8009a4a:	4929      	ldr	r1, [pc, #164]	@ (8009af0 <_dtoa_r+0x598>)
 8009a4c:	2000      	movs	r0, #0
 8009a4e:	f7f6 ff2d 	bl	80008ac <__aeabi_ddiv>
 8009a52:	4633      	mov	r3, r6
 8009a54:	462a      	mov	r2, r5
 8009a56:	f7f6 fc47 	bl	80002e8 <__aeabi_dsub>
 8009a5a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009a5e:	4656      	mov	r6, sl
 8009a60:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009a64:	f7f7 f8a8 	bl	8000bb8 <__aeabi_d2iz>
 8009a68:	4605      	mov	r5, r0
 8009a6a:	f7f6 fd8b 	bl	8000584 <__aeabi_i2d>
 8009a6e:	4602      	mov	r2, r0
 8009a70:	460b      	mov	r3, r1
 8009a72:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009a76:	f7f6 fc37 	bl	80002e8 <__aeabi_dsub>
 8009a7a:	3530      	adds	r5, #48	@ 0x30
 8009a7c:	4602      	mov	r2, r0
 8009a7e:	460b      	mov	r3, r1
 8009a80:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009a84:	f806 5b01 	strb.w	r5, [r6], #1
 8009a88:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009a8c:	f7f7 f856 	bl	8000b3c <__aeabi_dcmplt>
 8009a90:	2800      	cmp	r0, #0
 8009a92:	d172      	bne.n	8009b7a <_dtoa_r+0x622>
 8009a94:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009a98:	4911      	ldr	r1, [pc, #68]	@ (8009ae0 <_dtoa_r+0x588>)
 8009a9a:	2000      	movs	r0, #0
 8009a9c:	f7f6 fc24 	bl	80002e8 <__aeabi_dsub>
 8009aa0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009aa4:	f7f7 f84a 	bl	8000b3c <__aeabi_dcmplt>
 8009aa8:	2800      	cmp	r0, #0
 8009aaa:	f040 80b4 	bne.w	8009c16 <_dtoa_r+0x6be>
 8009aae:	42a6      	cmp	r6, r4
 8009ab0:	f43f af70 	beq.w	8009994 <_dtoa_r+0x43c>
 8009ab4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8009ab8:	4b0a      	ldr	r3, [pc, #40]	@ (8009ae4 <_dtoa_r+0x58c>)
 8009aba:	2200      	movs	r2, #0
 8009abc:	f7f6 fdcc 	bl	8000658 <__aeabi_dmul>
 8009ac0:	4b08      	ldr	r3, [pc, #32]	@ (8009ae4 <_dtoa_r+0x58c>)
 8009ac2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009ac6:	2200      	movs	r2, #0
 8009ac8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009acc:	f7f6 fdc4 	bl	8000658 <__aeabi_dmul>
 8009ad0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009ad4:	e7c4      	b.n	8009a60 <_dtoa_r+0x508>
 8009ad6:	bf00      	nop
 8009ad8:	0800cf08 	.word	0x0800cf08
 8009adc:	0800cee0 	.word	0x0800cee0
 8009ae0:	3ff00000 	.word	0x3ff00000
 8009ae4:	40240000 	.word	0x40240000
 8009ae8:	401c0000 	.word	0x401c0000
 8009aec:	40140000 	.word	0x40140000
 8009af0:	3fe00000 	.word	0x3fe00000
 8009af4:	4631      	mov	r1, r6
 8009af6:	4628      	mov	r0, r5
 8009af8:	f7f6 fdae 	bl	8000658 <__aeabi_dmul>
 8009afc:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009b00:	9413      	str	r4, [sp, #76]	@ 0x4c
 8009b02:	4656      	mov	r6, sl
 8009b04:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009b08:	f7f7 f856 	bl	8000bb8 <__aeabi_d2iz>
 8009b0c:	4605      	mov	r5, r0
 8009b0e:	f7f6 fd39 	bl	8000584 <__aeabi_i2d>
 8009b12:	4602      	mov	r2, r0
 8009b14:	460b      	mov	r3, r1
 8009b16:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009b1a:	f7f6 fbe5 	bl	80002e8 <__aeabi_dsub>
 8009b1e:	3530      	adds	r5, #48	@ 0x30
 8009b20:	f806 5b01 	strb.w	r5, [r6], #1
 8009b24:	4602      	mov	r2, r0
 8009b26:	460b      	mov	r3, r1
 8009b28:	42a6      	cmp	r6, r4
 8009b2a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009b2e:	f04f 0200 	mov.w	r2, #0
 8009b32:	d124      	bne.n	8009b7e <_dtoa_r+0x626>
 8009b34:	4baf      	ldr	r3, [pc, #700]	@ (8009df4 <_dtoa_r+0x89c>)
 8009b36:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8009b3a:	f7f6 fbd7 	bl	80002ec <__adddf3>
 8009b3e:	4602      	mov	r2, r0
 8009b40:	460b      	mov	r3, r1
 8009b42:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009b46:	f7f7 f817 	bl	8000b78 <__aeabi_dcmpgt>
 8009b4a:	2800      	cmp	r0, #0
 8009b4c:	d163      	bne.n	8009c16 <_dtoa_r+0x6be>
 8009b4e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009b52:	49a8      	ldr	r1, [pc, #672]	@ (8009df4 <_dtoa_r+0x89c>)
 8009b54:	2000      	movs	r0, #0
 8009b56:	f7f6 fbc7 	bl	80002e8 <__aeabi_dsub>
 8009b5a:	4602      	mov	r2, r0
 8009b5c:	460b      	mov	r3, r1
 8009b5e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009b62:	f7f6 ffeb 	bl	8000b3c <__aeabi_dcmplt>
 8009b66:	2800      	cmp	r0, #0
 8009b68:	f43f af14 	beq.w	8009994 <_dtoa_r+0x43c>
 8009b6c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8009b6e:	1e73      	subs	r3, r6, #1
 8009b70:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009b72:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009b76:	2b30      	cmp	r3, #48	@ 0x30
 8009b78:	d0f8      	beq.n	8009b6c <_dtoa_r+0x614>
 8009b7a:	4647      	mov	r7, r8
 8009b7c:	e03b      	b.n	8009bf6 <_dtoa_r+0x69e>
 8009b7e:	4b9e      	ldr	r3, [pc, #632]	@ (8009df8 <_dtoa_r+0x8a0>)
 8009b80:	f7f6 fd6a 	bl	8000658 <__aeabi_dmul>
 8009b84:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009b88:	e7bc      	b.n	8009b04 <_dtoa_r+0x5ac>
 8009b8a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8009b8e:	4656      	mov	r6, sl
 8009b90:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009b94:	4620      	mov	r0, r4
 8009b96:	4629      	mov	r1, r5
 8009b98:	f7f6 fe88 	bl	80008ac <__aeabi_ddiv>
 8009b9c:	f7f7 f80c 	bl	8000bb8 <__aeabi_d2iz>
 8009ba0:	4680      	mov	r8, r0
 8009ba2:	f7f6 fcef 	bl	8000584 <__aeabi_i2d>
 8009ba6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009baa:	f7f6 fd55 	bl	8000658 <__aeabi_dmul>
 8009bae:	4602      	mov	r2, r0
 8009bb0:	460b      	mov	r3, r1
 8009bb2:	4620      	mov	r0, r4
 8009bb4:	4629      	mov	r1, r5
 8009bb6:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8009bba:	f7f6 fb95 	bl	80002e8 <__aeabi_dsub>
 8009bbe:	f806 4b01 	strb.w	r4, [r6], #1
 8009bc2:	9d03      	ldr	r5, [sp, #12]
 8009bc4:	eba6 040a 	sub.w	r4, r6, sl
 8009bc8:	42a5      	cmp	r5, r4
 8009bca:	4602      	mov	r2, r0
 8009bcc:	460b      	mov	r3, r1
 8009bce:	d133      	bne.n	8009c38 <_dtoa_r+0x6e0>
 8009bd0:	f7f6 fb8c 	bl	80002ec <__adddf3>
 8009bd4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009bd8:	4604      	mov	r4, r0
 8009bda:	460d      	mov	r5, r1
 8009bdc:	f7f6 ffcc 	bl	8000b78 <__aeabi_dcmpgt>
 8009be0:	b9c0      	cbnz	r0, 8009c14 <_dtoa_r+0x6bc>
 8009be2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009be6:	4620      	mov	r0, r4
 8009be8:	4629      	mov	r1, r5
 8009bea:	f7f6 ff9d 	bl	8000b28 <__aeabi_dcmpeq>
 8009bee:	b110      	cbz	r0, 8009bf6 <_dtoa_r+0x69e>
 8009bf0:	f018 0f01 	tst.w	r8, #1
 8009bf4:	d10e      	bne.n	8009c14 <_dtoa_r+0x6bc>
 8009bf6:	9902      	ldr	r1, [sp, #8]
 8009bf8:	4648      	mov	r0, r9
 8009bfa:	f000 fbbd 	bl	800a378 <_Bfree>
 8009bfe:	2300      	movs	r3, #0
 8009c00:	7033      	strb	r3, [r6, #0]
 8009c02:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009c04:	3701      	adds	r7, #1
 8009c06:	601f      	str	r7, [r3, #0]
 8009c08:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	f000 824b 	beq.w	800a0a6 <_dtoa_r+0xb4e>
 8009c10:	601e      	str	r6, [r3, #0]
 8009c12:	e248      	b.n	800a0a6 <_dtoa_r+0xb4e>
 8009c14:	46b8      	mov	r8, r7
 8009c16:	4633      	mov	r3, r6
 8009c18:	461e      	mov	r6, r3
 8009c1a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009c1e:	2a39      	cmp	r2, #57	@ 0x39
 8009c20:	d106      	bne.n	8009c30 <_dtoa_r+0x6d8>
 8009c22:	459a      	cmp	sl, r3
 8009c24:	d1f8      	bne.n	8009c18 <_dtoa_r+0x6c0>
 8009c26:	2230      	movs	r2, #48	@ 0x30
 8009c28:	f108 0801 	add.w	r8, r8, #1
 8009c2c:	f88a 2000 	strb.w	r2, [sl]
 8009c30:	781a      	ldrb	r2, [r3, #0]
 8009c32:	3201      	adds	r2, #1
 8009c34:	701a      	strb	r2, [r3, #0]
 8009c36:	e7a0      	b.n	8009b7a <_dtoa_r+0x622>
 8009c38:	4b6f      	ldr	r3, [pc, #444]	@ (8009df8 <_dtoa_r+0x8a0>)
 8009c3a:	2200      	movs	r2, #0
 8009c3c:	f7f6 fd0c 	bl	8000658 <__aeabi_dmul>
 8009c40:	2200      	movs	r2, #0
 8009c42:	2300      	movs	r3, #0
 8009c44:	4604      	mov	r4, r0
 8009c46:	460d      	mov	r5, r1
 8009c48:	f7f6 ff6e 	bl	8000b28 <__aeabi_dcmpeq>
 8009c4c:	2800      	cmp	r0, #0
 8009c4e:	d09f      	beq.n	8009b90 <_dtoa_r+0x638>
 8009c50:	e7d1      	b.n	8009bf6 <_dtoa_r+0x69e>
 8009c52:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009c54:	2a00      	cmp	r2, #0
 8009c56:	f000 80ea 	beq.w	8009e2e <_dtoa_r+0x8d6>
 8009c5a:	9a07      	ldr	r2, [sp, #28]
 8009c5c:	2a01      	cmp	r2, #1
 8009c5e:	f300 80cd 	bgt.w	8009dfc <_dtoa_r+0x8a4>
 8009c62:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8009c64:	2a00      	cmp	r2, #0
 8009c66:	f000 80c1 	beq.w	8009dec <_dtoa_r+0x894>
 8009c6a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8009c6e:	9c08      	ldr	r4, [sp, #32]
 8009c70:	9e00      	ldr	r6, [sp, #0]
 8009c72:	9a00      	ldr	r2, [sp, #0]
 8009c74:	441a      	add	r2, r3
 8009c76:	9200      	str	r2, [sp, #0]
 8009c78:	9a06      	ldr	r2, [sp, #24]
 8009c7a:	2101      	movs	r1, #1
 8009c7c:	441a      	add	r2, r3
 8009c7e:	4648      	mov	r0, r9
 8009c80:	9206      	str	r2, [sp, #24]
 8009c82:	f000 fc77 	bl	800a574 <__i2b>
 8009c86:	4605      	mov	r5, r0
 8009c88:	b166      	cbz	r6, 8009ca4 <_dtoa_r+0x74c>
 8009c8a:	9b06      	ldr	r3, [sp, #24]
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	dd09      	ble.n	8009ca4 <_dtoa_r+0x74c>
 8009c90:	42b3      	cmp	r3, r6
 8009c92:	9a00      	ldr	r2, [sp, #0]
 8009c94:	bfa8      	it	ge
 8009c96:	4633      	movge	r3, r6
 8009c98:	1ad2      	subs	r2, r2, r3
 8009c9a:	9200      	str	r2, [sp, #0]
 8009c9c:	9a06      	ldr	r2, [sp, #24]
 8009c9e:	1af6      	subs	r6, r6, r3
 8009ca0:	1ad3      	subs	r3, r2, r3
 8009ca2:	9306      	str	r3, [sp, #24]
 8009ca4:	9b08      	ldr	r3, [sp, #32]
 8009ca6:	b30b      	cbz	r3, 8009cec <_dtoa_r+0x794>
 8009ca8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	f000 80c6 	beq.w	8009e3c <_dtoa_r+0x8e4>
 8009cb0:	2c00      	cmp	r4, #0
 8009cb2:	f000 80c0 	beq.w	8009e36 <_dtoa_r+0x8de>
 8009cb6:	4629      	mov	r1, r5
 8009cb8:	4622      	mov	r2, r4
 8009cba:	4648      	mov	r0, r9
 8009cbc:	f000 fd12 	bl	800a6e4 <__pow5mult>
 8009cc0:	9a02      	ldr	r2, [sp, #8]
 8009cc2:	4601      	mov	r1, r0
 8009cc4:	4605      	mov	r5, r0
 8009cc6:	4648      	mov	r0, r9
 8009cc8:	f000 fc6a 	bl	800a5a0 <__multiply>
 8009ccc:	9902      	ldr	r1, [sp, #8]
 8009cce:	4680      	mov	r8, r0
 8009cd0:	4648      	mov	r0, r9
 8009cd2:	f000 fb51 	bl	800a378 <_Bfree>
 8009cd6:	9b08      	ldr	r3, [sp, #32]
 8009cd8:	1b1b      	subs	r3, r3, r4
 8009cda:	9308      	str	r3, [sp, #32]
 8009cdc:	f000 80b1 	beq.w	8009e42 <_dtoa_r+0x8ea>
 8009ce0:	9a08      	ldr	r2, [sp, #32]
 8009ce2:	4641      	mov	r1, r8
 8009ce4:	4648      	mov	r0, r9
 8009ce6:	f000 fcfd 	bl	800a6e4 <__pow5mult>
 8009cea:	9002      	str	r0, [sp, #8]
 8009cec:	2101      	movs	r1, #1
 8009cee:	4648      	mov	r0, r9
 8009cf0:	f000 fc40 	bl	800a574 <__i2b>
 8009cf4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009cf6:	4604      	mov	r4, r0
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	f000 81d8 	beq.w	800a0ae <_dtoa_r+0xb56>
 8009cfe:	461a      	mov	r2, r3
 8009d00:	4601      	mov	r1, r0
 8009d02:	4648      	mov	r0, r9
 8009d04:	f000 fcee 	bl	800a6e4 <__pow5mult>
 8009d08:	9b07      	ldr	r3, [sp, #28]
 8009d0a:	2b01      	cmp	r3, #1
 8009d0c:	4604      	mov	r4, r0
 8009d0e:	f300 809f 	bgt.w	8009e50 <_dtoa_r+0x8f8>
 8009d12:	9b04      	ldr	r3, [sp, #16]
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	f040 8097 	bne.w	8009e48 <_dtoa_r+0x8f0>
 8009d1a:	9b05      	ldr	r3, [sp, #20]
 8009d1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	f040 8093 	bne.w	8009e4c <_dtoa_r+0x8f4>
 8009d26:	9b05      	ldr	r3, [sp, #20]
 8009d28:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009d2c:	0d1b      	lsrs	r3, r3, #20
 8009d2e:	051b      	lsls	r3, r3, #20
 8009d30:	b133      	cbz	r3, 8009d40 <_dtoa_r+0x7e8>
 8009d32:	9b00      	ldr	r3, [sp, #0]
 8009d34:	3301      	adds	r3, #1
 8009d36:	9300      	str	r3, [sp, #0]
 8009d38:	9b06      	ldr	r3, [sp, #24]
 8009d3a:	3301      	adds	r3, #1
 8009d3c:	9306      	str	r3, [sp, #24]
 8009d3e:	2301      	movs	r3, #1
 8009d40:	9308      	str	r3, [sp, #32]
 8009d42:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	f000 81b8 	beq.w	800a0ba <_dtoa_r+0xb62>
 8009d4a:	6923      	ldr	r3, [r4, #16]
 8009d4c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009d50:	6918      	ldr	r0, [r3, #16]
 8009d52:	f000 fbc3 	bl	800a4dc <__hi0bits>
 8009d56:	f1c0 0020 	rsb	r0, r0, #32
 8009d5a:	9b06      	ldr	r3, [sp, #24]
 8009d5c:	4418      	add	r0, r3
 8009d5e:	f010 001f 	ands.w	r0, r0, #31
 8009d62:	f000 8082 	beq.w	8009e6a <_dtoa_r+0x912>
 8009d66:	f1c0 0320 	rsb	r3, r0, #32
 8009d6a:	2b04      	cmp	r3, #4
 8009d6c:	dd73      	ble.n	8009e56 <_dtoa_r+0x8fe>
 8009d6e:	9b00      	ldr	r3, [sp, #0]
 8009d70:	f1c0 001c 	rsb	r0, r0, #28
 8009d74:	4403      	add	r3, r0
 8009d76:	9300      	str	r3, [sp, #0]
 8009d78:	9b06      	ldr	r3, [sp, #24]
 8009d7a:	4403      	add	r3, r0
 8009d7c:	4406      	add	r6, r0
 8009d7e:	9306      	str	r3, [sp, #24]
 8009d80:	9b00      	ldr	r3, [sp, #0]
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	dd05      	ble.n	8009d92 <_dtoa_r+0x83a>
 8009d86:	9902      	ldr	r1, [sp, #8]
 8009d88:	461a      	mov	r2, r3
 8009d8a:	4648      	mov	r0, r9
 8009d8c:	f000 fd04 	bl	800a798 <__lshift>
 8009d90:	9002      	str	r0, [sp, #8]
 8009d92:	9b06      	ldr	r3, [sp, #24]
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	dd05      	ble.n	8009da4 <_dtoa_r+0x84c>
 8009d98:	4621      	mov	r1, r4
 8009d9a:	461a      	mov	r2, r3
 8009d9c:	4648      	mov	r0, r9
 8009d9e:	f000 fcfb 	bl	800a798 <__lshift>
 8009da2:	4604      	mov	r4, r0
 8009da4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d061      	beq.n	8009e6e <_dtoa_r+0x916>
 8009daa:	9802      	ldr	r0, [sp, #8]
 8009dac:	4621      	mov	r1, r4
 8009dae:	f000 fd5f 	bl	800a870 <__mcmp>
 8009db2:	2800      	cmp	r0, #0
 8009db4:	da5b      	bge.n	8009e6e <_dtoa_r+0x916>
 8009db6:	2300      	movs	r3, #0
 8009db8:	9902      	ldr	r1, [sp, #8]
 8009dba:	220a      	movs	r2, #10
 8009dbc:	4648      	mov	r0, r9
 8009dbe:	f000 fafd 	bl	800a3bc <__multadd>
 8009dc2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009dc4:	9002      	str	r0, [sp, #8]
 8009dc6:	f107 38ff 	add.w	r8, r7, #4294967295
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	f000 8177 	beq.w	800a0be <_dtoa_r+0xb66>
 8009dd0:	4629      	mov	r1, r5
 8009dd2:	2300      	movs	r3, #0
 8009dd4:	220a      	movs	r2, #10
 8009dd6:	4648      	mov	r0, r9
 8009dd8:	f000 faf0 	bl	800a3bc <__multadd>
 8009ddc:	f1bb 0f00 	cmp.w	fp, #0
 8009de0:	4605      	mov	r5, r0
 8009de2:	dc6f      	bgt.n	8009ec4 <_dtoa_r+0x96c>
 8009de4:	9b07      	ldr	r3, [sp, #28]
 8009de6:	2b02      	cmp	r3, #2
 8009de8:	dc49      	bgt.n	8009e7e <_dtoa_r+0x926>
 8009dea:	e06b      	b.n	8009ec4 <_dtoa_r+0x96c>
 8009dec:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009dee:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8009df2:	e73c      	b.n	8009c6e <_dtoa_r+0x716>
 8009df4:	3fe00000 	.word	0x3fe00000
 8009df8:	40240000 	.word	0x40240000
 8009dfc:	9b03      	ldr	r3, [sp, #12]
 8009dfe:	1e5c      	subs	r4, r3, #1
 8009e00:	9b08      	ldr	r3, [sp, #32]
 8009e02:	42a3      	cmp	r3, r4
 8009e04:	db09      	blt.n	8009e1a <_dtoa_r+0x8c2>
 8009e06:	1b1c      	subs	r4, r3, r4
 8009e08:	9b03      	ldr	r3, [sp, #12]
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	f6bf af30 	bge.w	8009c70 <_dtoa_r+0x718>
 8009e10:	9b00      	ldr	r3, [sp, #0]
 8009e12:	9a03      	ldr	r2, [sp, #12]
 8009e14:	1a9e      	subs	r6, r3, r2
 8009e16:	2300      	movs	r3, #0
 8009e18:	e72b      	b.n	8009c72 <_dtoa_r+0x71a>
 8009e1a:	9b08      	ldr	r3, [sp, #32]
 8009e1c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009e1e:	9408      	str	r4, [sp, #32]
 8009e20:	1ae3      	subs	r3, r4, r3
 8009e22:	441a      	add	r2, r3
 8009e24:	9e00      	ldr	r6, [sp, #0]
 8009e26:	9b03      	ldr	r3, [sp, #12]
 8009e28:	920d      	str	r2, [sp, #52]	@ 0x34
 8009e2a:	2400      	movs	r4, #0
 8009e2c:	e721      	b.n	8009c72 <_dtoa_r+0x71a>
 8009e2e:	9c08      	ldr	r4, [sp, #32]
 8009e30:	9e00      	ldr	r6, [sp, #0]
 8009e32:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8009e34:	e728      	b.n	8009c88 <_dtoa_r+0x730>
 8009e36:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8009e3a:	e751      	b.n	8009ce0 <_dtoa_r+0x788>
 8009e3c:	9a08      	ldr	r2, [sp, #32]
 8009e3e:	9902      	ldr	r1, [sp, #8]
 8009e40:	e750      	b.n	8009ce4 <_dtoa_r+0x78c>
 8009e42:	f8cd 8008 	str.w	r8, [sp, #8]
 8009e46:	e751      	b.n	8009cec <_dtoa_r+0x794>
 8009e48:	2300      	movs	r3, #0
 8009e4a:	e779      	b.n	8009d40 <_dtoa_r+0x7e8>
 8009e4c:	9b04      	ldr	r3, [sp, #16]
 8009e4e:	e777      	b.n	8009d40 <_dtoa_r+0x7e8>
 8009e50:	2300      	movs	r3, #0
 8009e52:	9308      	str	r3, [sp, #32]
 8009e54:	e779      	b.n	8009d4a <_dtoa_r+0x7f2>
 8009e56:	d093      	beq.n	8009d80 <_dtoa_r+0x828>
 8009e58:	9a00      	ldr	r2, [sp, #0]
 8009e5a:	331c      	adds	r3, #28
 8009e5c:	441a      	add	r2, r3
 8009e5e:	9200      	str	r2, [sp, #0]
 8009e60:	9a06      	ldr	r2, [sp, #24]
 8009e62:	441a      	add	r2, r3
 8009e64:	441e      	add	r6, r3
 8009e66:	9206      	str	r2, [sp, #24]
 8009e68:	e78a      	b.n	8009d80 <_dtoa_r+0x828>
 8009e6a:	4603      	mov	r3, r0
 8009e6c:	e7f4      	b.n	8009e58 <_dtoa_r+0x900>
 8009e6e:	9b03      	ldr	r3, [sp, #12]
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	46b8      	mov	r8, r7
 8009e74:	dc20      	bgt.n	8009eb8 <_dtoa_r+0x960>
 8009e76:	469b      	mov	fp, r3
 8009e78:	9b07      	ldr	r3, [sp, #28]
 8009e7a:	2b02      	cmp	r3, #2
 8009e7c:	dd1e      	ble.n	8009ebc <_dtoa_r+0x964>
 8009e7e:	f1bb 0f00 	cmp.w	fp, #0
 8009e82:	f47f adb1 	bne.w	80099e8 <_dtoa_r+0x490>
 8009e86:	4621      	mov	r1, r4
 8009e88:	465b      	mov	r3, fp
 8009e8a:	2205      	movs	r2, #5
 8009e8c:	4648      	mov	r0, r9
 8009e8e:	f000 fa95 	bl	800a3bc <__multadd>
 8009e92:	4601      	mov	r1, r0
 8009e94:	4604      	mov	r4, r0
 8009e96:	9802      	ldr	r0, [sp, #8]
 8009e98:	f000 fcea 	bl	800a870 <__mcmp>
 8009e9c:	2800      	cmp	r0, #0
 8009e9e:	f77f ada3 	ble.w	80099e8 <_dtoa_r+0x490>
 8009ea2:	4656      	mov	r6, sl
 8009ea4:	2331      	movs	r3, #49	@ 0x31
 8009ea6:	f806 3b01 	strb.w	r3, [r6], #1
 8009eaa:	f108 0801 	add.w	r8, r8, #1
 8009eae:	e59f      	b.n	80099f0 <_dtoa_r+0x498>
 8009eb0:	9c03      	ldr	r4, [sp, #12]
 8009eb2:	46b8      	mov	r8, r7
 8009eb4:	4625      	mov	r5, r4
 8009eb6:	e7f4      	b.n	8009ea2 <_dtoa_r+0x94a>
 8009eb8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8009ebc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	f000 8101 	beq.w	800a0c6 <_dtoa_r+0xb6e>
 8009ec4:	2e00      	cmp	r6, #0
 8009ec6:	dd05      	ble.n	8009ed4 <_dtoa_r+0x97c>
 8009ec8:	4629      	mov	r1, r5
 8009eca:	4632      	mov	r2, r6
 8009ecc:	4648      	mov	r0, r9
 8009ece:	f000 fc63 	bl	800a798 <__lshift>
 8009ed2:	4605      	mov	r5, r0
 8009ed4:	9b08      	ldr	r3, [sp, #32]
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d05c      	beq.n	8009f94 <_dtoa_r+0xa3c>
 8009eda:	6869      	ldr	r1, [r5, #4]
 8009edc:	4648      	mov	r0, r9
 8009ede:	f000 fa0b 	bl	800a2f8 <_Balloc>
 8009ee2:	4606      	mov	r6, r0
 8009ee4:	b928      	cbnz	r0, 8009ef2 <_dtoa_r+0x99a>
 8009ee6:	4b82      	ldr	r3, [pc, #520]	@ (800a0f0 <_dtoa_r+0xb98>)
 8009ee8:	4602      	mov	r2, r0
 8009eea:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009eee:	f7ff bb4a 	b.w	8009586 <_dtoa_r+0x2e>
 8009ef2:	692a      	ldr	r2, [r5, #16]
 8009ef4:	3202      	adds	r2, #2
 8009ef6:	0092      	lsls	r2, r2, #2
 8009ef8:	f105 010c 	add.w	r1, r5, #12
 8009efc:	300c      	adds	r0, #12
 8009efe:	f002 f8b3 	bl	800c068 <memcpy>
 8009f02:	2201      	movs	r2, #1
 8009f04:	4631      	mov	r1, r6
 8009f06:	4648      	mov	r0, r9
 8009f08:	f000 fc46 	bl	800a798 <__lshift>
 8009f0c:	f10a 0301 	add.w	r3, sl, #1
 8009f10:	9300      	str	r3, [sp, #0]
 8009f12:	eb0a 030b 	add.w	r3, sl, fp
 8009f16:	9308      	str	r3, [sp, #32]
 8009f18:	9b04      	ldr	r3, [sp, #16]
 8009f1a:	f003 0301 	and.w	r3, r3, #1
 8009f1e:	462f      	mov	r7, r5
 8009f20:	9306      	str	r3, [sp, #24]
 8009f22:	4605      	mov	r5, r0
 8009f24:	9b00      	ldr	r3, [sp, #0]
 8009f26:	9802      	ldr	r0, [sp, #8]
 8009f28:	4621      	mov	r1, r4
 8009f2a:	f103 3bff 	add.w	fp, r3, #4294967295
 8009f2e:	f7ff fa89 	bl	8009444 <quorem>
 8009f32:	4603      	mov	r3, r0
 8009f34:	3330      	adds	r3, #48	@ 0x30
 8009f36:	9003      	str	r0, [sp, #12]
 8009f38:	4639      	mov	r1, r7
 8009f3a:	9802      	ldr	r0, [sp, #8]
 8009f3c:	9309      	str	r3, [sp, #36]	@ 0x24
 8009f3e:	f000 fc97 	bl	800a870 <__mcmp>
 8009f42:	462a      	mov	r2, r5
 8009f44:	9004      	str	r0, [sp, #16]
 8009f46:	4621      	mov	r1, r4
 8009f48:	4648      	mov	r0, r9
 8009f4a:	f000 fcad 	bl	800a8a8 <__mdiff>
 8009f4e:	68c2      	ldr	r2, [r0, #12]
 8009f50:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f52:	4606      	mov	r6, r0
 8009f54:	bb02      	cbnz	r2, 8009f98 <_dtoa_r+0xa40>
 8009f56:	4601      	mov	r1, r0
 8009f58:	9802      	ldr	r0, [sp, #8]
 8009f5a:	f000 fc89 	bl	800a870 <__mcmp>
 8009f5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f60:	4602      	mov	r2, r0
 8009f62:	4631      	mov	r1, r6
 8009f64:	4648      	mov	r0, r9
 8009f66:	920c      	str	r2, [sp, #48]	@ 0x30
 8009f68:	9309      	str	r3, [sp, #36]	@ 0x24
 8009f6a:	f000 fa05 	bl	800a378 <_Bfree>
 8009f6e:	9b07      	ldr	r3, [sp, #28]
 8009f70:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009f72:	9e00      	ldr	r6, [sp, #0]
 8009f74:	ea42 0103 	orr.w	r1, r2, r3
 8009f78:	9b06      	ldr	r3, [sp, #24]
 8009f7a:	4319      	orrs	r1, r3
 8009f7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f7e:	d10d      	bne.n	8009f9c <_dtoa_r+0xa44>
 8009f80:	2b39      	cmp	r3, #57	@ 0x39
 8009f82:	d027      	beq.n	8009fd4 <_dtoa_r+0xa7c>
 8009f84:	9a04      	ldr	r2, [sp, #16]
 8009f86:	2a00      	cmp	r2, #0
 8009f88:	dd01      	ble.n	8009f8e <_dtoa_r+0xa36>
 8009f8a:	9b03      	ldr	r3, [sp, #12]
 8009f8c:	3331      	adds	r3, #49	@ 0x31
 8009f8e:	f88b 3000 	strb.w	r3, [fp]
 8009f92:	e52e      	b.n	80099f2 <_dtoa_r+0x49a>
 8009f94:	4628      	mov	r0, r5
 8009f96:	e7b9      	b.n	8009f0c <_dtoa_r+0x9b4>
 8009f98:	2201      	movs	r2, #1
 8009f9a:	e7e2      	b.n	8009f62 <_dtoa_r+0xa0a>
 8009f9c:	9904      	ldr	r1, [sp, #16]
 8009f9e:	2900      	cmp	r1, #0
 8009fa0:	db04      	blt.n	8009fac <_dtoa_r+0xa54>
 8009fa2:	9807      	ldr	r0, [sp, #28]
 8009fa4:	4301      	orrs	r1, r0
 8009fa6:	9806      	ldr	r0, [sp, #24]
 8009fa8:	4301      	orrs	r1, r0
 8009faa:	d120      	bne.n	8009fee <_dtoa_r+0xa96>
 8009fac:	2a00      	cmp	r2, #0
 8009fae:	ddee      	ble.n	8009f8e <_dtoa_r+0xa36>
 8009fb0:	9902      	ldr	r1, [sp, #8]
 8009fb2:	9300      	str	r3, [sp, #0]
 8009fb4:	2201      	movs	r2, #1
 8009fb6:	4648      	mov	r0, r9
 8009fb8:	f000 fbee 	bl	800a798 <__lshift>
 8009fbc:	4621      	mov	r1, r4
 8009fbe:	9002      	str	r0, [sp, #8]
 8009fc0:	f000 fc56 	bl	800a870 <__mcmp>
 8009fc4:	2800      	cmp	r0, #0
 8009fc6:	9b00      	ldr	r3, [sp, #0]
 8009fc8:	dc02      	bgt.n	8009fd0 <_dtoa_r+0xa78>
 8009fca:	d1e0      	bne.n	8009f8e <_dtoa_r+0xa36>
 8009fcc:	07da      	lsls	r2, r3, #31
 8009fce:	d5de      	bpl.n	8009f8e <_dtoa_r+0xa36>
 8009fd0:	2b39      	cmp	r3, #57	@ 0x39
 8009fd2:	d1da      	bne.n	8009f8a <_dtoa_r+0xa32>
 8009fd4:	2339      	movs	r3, #57	@ 0x39
 8009fd6:	f88b 3000 	strb.w	r3, [fp]
 8009fda:	4633      	mov	r3, r6
 8009fdc:	461e      	mov	r6, r3
 8009fde:	3b01      	subs	r3, #1
 8009fe0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009fe4:	2a39      	cmp	r2, #57	@ 0x39
 8009fe6:	d04e      	beq.n	800a086 <_dtoa_r+0xb2e>
 8009fe8:	3201      	adds	r2, #1
 8009fea:	701a      	strb	r2, [r3, #0]
 8009fec:	e501      	b.n	80099f2 <_dtoa_r+0x49a>
 8009fee:	2a00      	cmp	r2, #0
 8009ff0:	dd03      	ble.n	8009ffa <_dtoa_r+0xaa2>
 8009ff2:	2b39      	cmp	r3, #57	@ 0x39
 8009ff4:	d0ee      	beq.n	8009fd4 <_dtoa_r+0xa7c>
 8009ff6:	3301      	adds	r3, #1
 8009ff8:	e7c9      	b.n	8009f8e <_dtoa_r+0xa36>
 8009ffa:	9a00      	ldr	r2, [sp, #0]
 8009ffc:	9908      	ldr	r1, [sp, #32]
 8009ffe:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a002:	428a      	cmp	r2, r1
 800a004:	d028      	beq.n	800a058 <_dtoa_r+0xb00>
 800a006:	9902      	ldr	r1, [sp, #8]
 800a008:	2300      	movs	r3, #0
 800a00a:	220a      	movs	r2, #10
 800a00c:	4648      	mov	r0, r9
 800a00e:	f000 f9d5 	bl	800a3bc <__multadd>
 800a012:	42af      	cmp	r7, r5
 800a014:	9002      	str	r0, [sp, #8]
 800a016:	f04f 0300 	mov.w	r3, #0
 800a01a:	f04f 020a 	mov.w	r2, #10
 800a01e:	4639      	mov	r1, r7
 800a020:	4648      	mov	r0, r9
 800a022:	d107      	bne.n	800a034 <_dtoa_r+0xadc>
 800a024:	f000 f9ca 	bl	800a3bc <__multadd>
 800a028:	4607      	mov	r7, r0
 800a02a:	4605      	mov	r5, r0
 800a02c:	9b00      	ldr	r3, [sp, #0]
 800a02e:	3301      	adds	r3, #1
 800a030:	9300      	str	r3, [sp, #0]
 800a032:	e777      	b.n	8009f24 <_dtoa_r+0x9cc>
 800a034:	f000 f9c2 	bl	800a3bc <__multadd>
 800a038:	4629      	mov	r1, r5
 800a03a:	4607      	mov	r7, r0
 800a03c:	2300      	movs	r3, #0
 800a03e:	220a      	movs	r2, #10
 800a040:	4648      	mov	r0, r9
 800a042:	f000 f9bb 	bl	800a3bc <__multadd>
 800a046:	4605      	mov	r5, r0
 800a048:	e7f0      	b.n	800a02c <_dtoa_r+0xad4>
 800a04a:	f1bb 0f00 	cmp.w	fp, #0
 800a04e:	bfcc      	ite	gt
 800a050:	465e      	movgt	r6, fp
 800a052:	2601      	movle	r6, #1
 800a054:	4456      	add	r6, sl
 800a056:	2700      	movs	r7, #0
 800a058:	9902      	ldr	r1, [sp, #8]
 800a05a:	9300      	str	r3, [sp, #0]
 800a05c:	2201      	movs	r2, #1
 800a05e:	4648      	mov	r0, r9
 800a060:	f000 fb9a 	bl	800a798 <__lshift>
 800a064:	4621      	mov	r1, r4
 800a066:	9002      	str	r0, [sp, #8]
 800a068:	f000 fc02 	bl	800a870 <__mcmp>
 800a06c:	2800      	cmp	r0, #0
 800a06e:	dcb4      	bgt.n	8009fda <_dtoa_r+0xa82>
 800a070:	d102      	bne.n	800a078 <_dtoa_r+0xb20>
 800a072:	9b00      	ldr	r3, [sp, #0]
 800a074:	07db      	lsls	r3, r3, #31
 800a076:	d4b0      	bmi.n	8009fda <_dtoa_r+0xa82>
 800a078:	4633      	mov	r3, r6
 800a07a:	461e      	mov	r6, r3
 800a07c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a080:	2a30      	cmp	r2, #48	@ 0x30
 800a082:	d0fa      	beq.n	800a07a <_dtoa_r+0xb22>
 800a084:	e4b5      	b.n	80099f2 <_dtoa_r+0x49a>
 800a086:	459a      	cmp	sl, r3
 800a088:	d1a8      	bne.n	8009fdc <_dtoa_r+0xa84>
 800a08a:	2331      	movs	r3, #49	@ 0x31
 800a08c:	f108 0801 	add.w	r8, r8, #1
 800a090:	f88a 3000 	strb.w	r3, [sl]
 800a094:	e4ad      	b.n	80099f2 <_dtoa_r+0x49a>
 800a096:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a098:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800a0f4 <_dtoa_r+0xb9c>
 800a09c:	b11b      	cbz	r3, 800a0a6 <_dtoa_r+0xb4e>
 800a09e:	f10a 0308 	add.w	r3, sl, #8
 800a0a2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800a0a4:	6013      	str	r3, [r2, #0]
 800a0a6:	4650      	mov	r0, sl
 800a0a8:	b017      	add	sp, #92	@ 0x5c
 800a0aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0ae:	9b07      	ldr	r3, [sp, #28]
 800a0b0:	2b01      	cmp	r3, #1
 800a0b2:	f77f ae2e 	ble.w	8009d12 <_dtoa_r+0x7ba>
 800a0b6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a0b8:	9308      	str	r3, [sp, #32]
 800a0ba:	2001      	movs	r0, #1
 800a0bc:	e64d      	b.n	8009d5a <_dtoa_r+0x802>
 800a0be:	f1bb 0f00 	cmp.w	fp, #0
 800a0c2:	f77f aed9 	ble.w	8009e78 <_dtoa_r+0x920>
 800a0c6:	4656      	mov	r6, sl
 800a0c8:	9802      	ldr	r0, [sp, #8]
 800a0ca:	4621      	mov	r1, r4
 800a0cc:	f7ff f9ba 	bl	8009444 <quorem>
 800a0d0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800a0d4:	f806 3b01 	strb.w	r3, [r6], #1
 800a0d8:	eba6 020a 	sub.w	r2, r6, sl
 800a0dc:	4593      	cmp	fp, r2
 800a0de:	ddb4      	ble.n	800a04a <_dtoa_r+0xaf2>
 800a0e0:	9902      	ldr	r1, [sp, #8]
 800a0e2:	2300      	movs	r3, #0
 800a0e4:	220a      	movs	r2, #10
 800a0e6:	4648      	mov	r0, r9
 800a0e8:	f000 f968 	bl	800a3bc <__multadd>
 800a0ec:	9002      	str	r0, [sp, #8]
 800a0ee:	e7eb      	b.n	800a0c8 <_dtoa_r+0xb70>
 800a0f0:	0800cdae 	.word	0x0800cdae
 800a0f4:	0800cd32 	.word	0x0800cd32

0800a0f8 <_free_r>:
 800a0f8:	b538      	push	{r3, r4, r5, lr}
 800a0fa:	4605      	mov	r5, r0
 800a0fc:	2900      	cmp	r1, #0
 800a0fe:	d041      	beq.n	800a184 <_free_r+0x8c>
 800a100:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a104:	1f0c      	subs	r4, r1, #4
 800a106:	2b00      	cmp	r3, #0
 800a108:	bfb8      	it	lt
 800a10a:	18e4      	addlt	r4, r4, r3
 800a10c:	f000 f8e8 	bl	800a2e0 <__malloc_lock>
 800a110:	4a1d      	ldr	r2, [pc, #116]	@ (800a188 <_free_r+0x90>)
 800a112:	6813      	ldr	r3, [r2, #0]
 800a114:	b933      	cbnz	r3, 800a124 <_free_r+0x2c>
 800a116:	6063      	str	r3, [r4, #4]
 800a118:	6014      	str	r4, [r2, #0]
 800a11a:	4628      	mov	r0, r5
 800a11c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a120:	f000 b8e4 	b.w	800a2ec <__malloc_unlock>
 800a124:	42a3      	cmp	r3, r4
 800a126:	d908      	bls.n	800a13a <_free_r+0x42>
 800a128:	6820      	ldr	r0, [r4, #0]
 800a12a:	1821      	adds	r1, r4, r0
 800a12c:	428b      	cmp	r3, r1
 800a12e:	bf01      	itttt	eq
 800a130:	6819      	ldreq	r1, [r3, #0]
 800a132:	685b      	ldreq	r3, [r3, #4]
 800a134:	1809      	addeq	r1, r1, r0
 800a136:	6021      	streq	r1, [r4, #0]
 800a138:	e7ed      	b.n	800a116 <_free_r+0x1e>
 800a13a:	461a      	mov	r2, r3
 800a13c:	685b      	ldr	r3, [r3, #4]
 800a13e:	b10b      	cbz	r3, 800a144 <_free_r+0x4c>
 800a140:	42a3      	cmp	r3, r4
 800a142:	d9fa      	bls.n	800a13a <_free_r+0x42>
 800a144:	6811      	ldr	r1, [r2, #0]
 800a146:	1850      	adds	r0, r2, r1
 800a148:	42a0      	cmp	r0, r4
 800a14a:	d10b      	bne.n	800a164 <_free_r+0x6c>
 800a14c:	6820      	ldr	r0, [r4, #0]
 800a14e:	4401      	add	r1, r0
 800a150:	1850      	adds	r0, r2, r1
 800a152:	4283      	cmp	r3, r0
 800a154:	6011      	str	r1, [r2, #0]
 800a156:	d1e0      	bne.n	800a11a <_free_r+0x22>
 800a158:	6818      	ldr	r0, [r3, #0]
 800a15a:	685b      	ldr	r3, [r3, #4]
 800a15c:	6053      	str	r3, [r2, #4]
 800a15e:	4408      	add	r0, r1
 800a160:	6010      	str	r0, [r2, #0]
 800a162:	e7da      	b.n	800a11a <_free_r+0x22>
 800a164:	d902      	bls.n	800a16c <_free_r+0x74>
 800a166:	230c      	movs	r3, #12
 800a168:	602b      	str	r3, [r5, #0]
 800a16a:	e7d6      	b.n	800a11a <_free_r+0x22>
 800a16c:	6820      	ldr	r0, [r4, #0]
 800a16e:	1821      	adds	r1, r4, r0
 800a170:	428b      	cmp	r3, r1
 800a172:	bf04      	itt	eq
 800a174:	6819      	ldreq	r1, [r3, #0]
 800a176:	685b      	ldreq	r3, [r3, #4]
 800a178:	6063      	str	r3, [r4, #4]
 800a17a:	bf04      	itt	eq
 800a17c:	1809      	addeq	r1, r1, r0
 800a17e:	6021      	streq	r1, [r4, #0]
 800a180:	6054      	str	r4, [r2, #4]
 800a182:	e7ca      	b.n	800a11a <_free_r+0x22>
 800a184:	bd38      	pop	{r3, r4, r5, pc}
 800a186:	bf00      	nop
 800a188:	200007b8 	.word	0x200007b8

0800a18c <malloc>:
 800a18c:	4b02      	ldr	r3, [pc, #8]	@ (800a198 <malloc+0xc>)
 800a18e:	4601      	mov	r1, r0
 800a190:	6818      	ldr	r0, [r3, #0]
 800a192:	f000 b825 	b.w	800a1e0 <_malloc_r>
 800a196:	bf00      	nop
 800a198:	20000064 	.word	0x20000064

0800a19c <sbrk_aligned>:
 800a19c:	b570      	push	{r4, r5, r6, lr}
 800a19e:	4e0f      	ldr	r6, [pc, #60]	@ (800a1dc <sbrk_aligned+0x40>)
 800a1a0:	460c      	mov	r4, r1
 800a1a2:	6831      	ldr	r1, [r6, #0]
 800a1a4:	4605      	mov	r5, r0
 800a1a6:	b911      	cbnz	r1, 800a1ae <sbrk_aligned+0x12>
 800a1a8:	f001 ff4e 	bl	800c048 <_sbrk_r>
 800a1ac:	6030      	str	r0, [r6, #0]
 800a1ae:	4621      	mov	r1, r4
 800a1b0:	4628      	mov	r0, r5
 800a1b2:	f001 ff49 	bl	800c048 <_sbrk_r>
 800a1b6:	1c43      	adds	r3, r0, #1
 800a1b8:	d103      	bne.n	800a1c2 <sbrk_aligned+0x26>
 800a1ba:	f04f 34ff 	mov.w	r4, #4294967295
 800a1be:	4620      	mov	r0, r4
 800a1c0:	bd70      	pop	{r4, r5, r6, pc}
 800a1c2:	1cc4      	adds	r4, r0, #3
 800a1c4:	f024 0403 	bic.w	r4, r4, #3
 800a1c8:	42a0      	cmp	r0, r4
 800a1ca:	d0f8      	beq.n	800a1be <sbrk_aligned+0x22>
 800a1cc:	1a21      	subs	r1, r4, r0
 800a1ce:	4628      	mov	r0, r5
 800a1d0:	f001 ff3a 	bl	800c048 <_sbrk_r>
 800a1d4:	3001      	adds	r0, #1
 800a1d6:	d1f2      	bne.n	800a1be <sbrk_aligned+0x22>
 800a1d8:	e7ef      	b.n	800a1ba <sbrk_aligned+0x1e>
 800a1da:	bf00      	nop
 800a1dc:	200007b4 	.word	0x200007b4

0800a1e0 <_malloc_r>:
 800a1e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a1e4:	1ccd      	adds	r5, r1, #3
 800a1e6:	f025 0503 	bic.w	r5, r5, #3
 800a1ea:	3508      	adds	r5, #8
 800a1ec:	2d0c      	cmp	r5, #12
 800a1ee:	bf38      	it	cc
 800a1f0:	250c      	movcc	r5, #12
 800a1f2:	2d00      	cmp	r5, #0
 800a1f4:	4606      	mov	r6, r0
 800a1f6:	db01      	blt.n	800a1fc <_malloc_r+0x1c>
 800a1f8:	42a9      	cmp	r1, r5
 800a1fa:	d904      	bls.n	800a206 <_malloc_r+0x26>
 800a1fc:	230c      	movs	r3, #12
 800a1fe:	6033      	str	r3, [r6, #0]
 800a200:	2000      	movs	r0, #0
 800a202:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a206:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a2dc <_malloc_r+0xfc>
 800a20a:	f000 f869 	bl	800a2e0 <__malloc_lock>
 800a20e:	f8d8 3000 	ldr.w	r3, [r8]
 800a212:	461c      	mov	r4, r3
 800a214:	bb44      	cbnz	r4, 800a268 <_malloc_r+0x88>
 800a216:	4629      	mov	r1, r5
 800a218:	4630      	mov	r0, r6
 800a21a:	f7ff ffbf 	bl	800a19c <sbrk_aligned>
 800a21e:	1c43      	adds	r3, r0, #1
 800a220:	4604      	mov	r4, r0
 800a222:	d158      	bne.n	800a2d6 <_malloc_r+0xf6>
 800a224:	f8d8 4000 	ldr.w	r4, [r8]
 800a228:	4627      	mov	r7, r4
 800a22a:	2f00      	cmp	r7, #0
 800a22c:	d143      	bne.n	800a2b6 <_malloc_r+0xd6>
 800a22e:	2c00      	cmp	r4, #0
 800a230:	d04b      	beq.n	800a2ca <_malloc_r+0xea>
 800a232:	6823      	ldr	r3, [r4, #0]
 800a234:	4639      	mov	r1, r7
 800a236:	4630      	mov	r0, r6
 800a238:	eb04 0903 	add.w	r9, r4, r3
 800a23c:	f001 ff04 	bl	800c048 <_sbrk_r>
 800a240:	4581      	cmp	r9, r0
 800a242:	d142      	bne.n	800a2ca <_malloc_r+0xea>
 800a244:	6821      	ldr	r1, [r4, #0]
 800a246:	1a6d      	subs	r5, r5, r1
 800a248:	4629      	mov	r1, r5
 800a24a:	4630      	mov	r0, r6
 800a24c:	f7ff ffa6 	bl	800a19c <sbrk_aligned>
 800a250:	3001      	adds	r0, #1
 800a252:	d03a      	beq.n	800a2ca <_malloc_r+0xea>
 800a254:	6823      	ldr	r3, [r4, #0]
 800a256:	442b      	add	r3, r5
 800a258:	6023      	str	r3, [r4, #0]
 800a25a:	f8d8 3000 	ldr.w	r3, [r8]
 800a25e:	685a      	ldr	r2, [r3, #4]
 800a260:	bb62      	cbnz	r2, 800a2bc <_malloc_r+0xdc>
 800a262:	f8c8 7000 	str.w	r7, [r8]
 800a266:	e00f      	b.n	800a288 <_malloc_r+0xa8>
 800a268:	6822      	ldr	r2, [r4, #0]
 800a26a:	1b52      	subs	r2, r2, r5
 800a26c:	d420      	bmi.n	800a2b0 <_malloc_r+0xd0>
 800a26e:	2a0b      	cmp	r2, #11
 800a270:	d917      	bls.n	800a2a2 <_malloc_r+0xc2>
 800a272:	1961      	adds	r1, r4, r5
 800a274:	42a3      	cmp	r3, r4
 800a276:	6025      	str	r5, [r4, #0]
 800a278:	bf18      	it	ne
 800a27a:	6059      	strne	r1, [r3, #4]
 800a27c:	6863      	ldr	r3, [r4, #4]
 800a27e:	bf08      	it	eq
 800a280:	f8c8 1000 	streq.w	r1, [r8]
 800a284:	5162      	str	r2, [r4, r5]
 800a286:	604b      	str	r3, [r1, #4]
 800a288:	4630      	mov	r0, r6
 800a28a:	f000 f82f 	bl	800a2ec <__malloc_unlock>
 800a28e:	f104 000b 	add.w	r0, r4, #11
 800a292:	1d23      	adds	r3, r4, #4
 800a294:	f020 0007 	bic.w	r0, r0, #7
 800a298:	1ac2      	subs	r2, r0, r3
 800a29a:	bf1c      	itt	ne
 800a29c:	1a1b      	subne	r3, r3, r0
 800a29e:	50a3      	strne	r3, [r4, r2]
 800a2a0:	e7af      	b.n	800a202 <_malloc_r+0x22>
 800a2a2:	6862      	ldr	r2, [r4, #4]
 800a2a4:	42a3      	cmp	r3, r4
 800a2a6:	bf0c      	ite	eq
 800a2a8:	f8c8 2000 	streq.w	r2, [r8]
 800a2ac:	605a      	strne	r2, [r3, #4]
 800a2ae:	e7eb      	b.n	800a288 <_malloc_r+0xa8>
 800a2b0:	4623      	mov	r3, r4
 800a2b2:	6864      	ldr	r4, [r4, #4]
 800a2b4:	e7ae      	b.n	800a214 <_malloc_r+0x34>
 800a2b6:	463c      	mov	r4, r7
 800a2b8:	687f      	ldr	r7, [r7, #4]
 800a2ba:	e7b6      	b.n	800a22a <_malloc_r+0x4a>
 800a2bc:	461a      	mov	r2, r3
 800a2be:	685b      	ldr	r3, [r3, #4]
 800a2c0:	42a3      	cmp	r3, r4
 800a2c2:	d1fb      	bne.n	800a2bc <_malloc_r+0xdc>
 800a2c4:	2300      	movs	r3, #0
 800a2c6:	6053      	str	r3, [r2, #4]
 800a2c8:	e7de      	b.n	800a288 <_malloc_r+0xa8>
 800a2ca:	230c      	movs	r3, #12
 800a2cc:	6033      	str	r3, [r6, #0]
 800a2ce:	4630      	mov	r0, r6
 800a2d0:	f000 f80c 	bl	800a2ec <__malloc_unlock>
 800a2d4:	e794      	b.n	800a200 <_malloc_r+0x20>
 800a2d6:	6005      	str	r5, [r0, #0]
 800a2d8:	e7d6      	b.n	800a288 <_malloc_r+0xa8>
 800a2da:	bf00      	nop
 800a2dc:	200007b8 	.word	0x200007b8

0800a2e0 <__malloc_lock>:
 800a2e0:	4801      	ldr	r0, [pc, #4]	@ (800a2e8 <__malloc_lock+0x8>)
 800a2e2:	f7ff b8a6 	b.w	8009432 <__retarget_lock_acquire_recursive>
 800a2e6:	bf00      	nop
 800a2e8:	200007b0 	.word	0x200007b0

0800a2ec <__malloc_unlock>:
 800a2ec:	4801      	ldr	r0, [pc, #4]	@ (800a2f4 <__malloc_unlock+0x8>)
 800a2ee:	f7ff b8a1 	b.w	8009434 <__retarget_lock_release_recursive>
 800a2f2:	bf00      	nop
 800a2f4:	200007b0 	.word	0x200007b0

0800a2f8 <_Balloc>:
 800a2f8:	b570      	push	{r4, r5, r6, lr}
 800a2fa:	69c6      	ldr	r6, [r0, #28]
 800a2fc:	4604      	mov	r4, r0
 800a2fe:	460d      	mov	r5, r1
 800a300:	b976      	cbnz	r6, 800a320 <_Balloc+0x28>
 800a302:	2010      	movs	r0, #16
 800a304:	f7ff ff42 	bl	800a18c <malloc>
 800a308:	4602      	mov	r2, r0
 800a30a:	61e0      	str	r0, [r4, #28]
 800a30c:	b920      	cbnz	r0, 800a318 <_Balloc+0x20>
 800a30e:	4b18      	ldr	r3, [pc, #96]	@ (800a370 <_Balloc+0x78>)
 800a310:	4818      	ldr	r0, [pc, #96]	@ (800a374 <_Balloc+0x7c>)
 800a312:	216b      	movs	r1, #107	@ 0x6b
 800a314:	f001 fec0 	bl	800c098 <__assert_func>
 800a318:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a31c:	6006      	str	r6, [r0, #0]
 800a31e:	60c6      	str	r6, [r0, #12]
 800a320:	69e6      	ldr	r6, [r4, #28]
 800a322:	68f3      	ldr	r3, [r6, #12]
 800a324:	b183      	cbz	r3, 800a348 <_Balloc+0x50>
 800a326:	69e3      	ldr	r3, [r4, #28]
 800a328:	68db      	ldr	r3, [r3, #12]
 800a32a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a32e:	b9b8      	cbnz	r0, 800a360 <_Balloc+0x68>
 800a330:	2101      	movs	r1, #1
 800a332:	fa01 f605 	lsl.w	r6, r1, r5
 800a336:	1d72      	adds	r2, r6, #5
 800a338:	0092      	lsls	r2, r2, #2
 800a33a:	4620      	mov	r0, r4
 800a33c:	f001 feca 	bl	800c0d4 <_calloc_r>
 800a340:	b160      	cbz	r0, 800a35c <_Balloc+0x64>
 800a342:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a346:	e00e      	b.n	800a366 <_Balloc+0x6e>
 800a348:	2221      	movs	r2, #33	@ 0x21
 800a34a:	2104      	movs	r1, #4
 800a34c:	4620      	mov	r0, r4
 800a34e:	f001 fec1 	bl	800c0d4 <_calloc_r>
 800a352:	69e3      	ldr	r3, [r4, #28]
 800a354:	60f0      	str	r0, [r6, #12]
 800a356:	68db      	ldr	r3, [r3, #12]
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d1e4      	bne.n	800a326 <_Balloc+0x2e>
 800a35c:	2000      	movs	r0, #0
 800a35e:	bd70      	pop	{r4, r5, r6, pc}
 800a360:	6802      	ldr	r2, [r0, #0]
 800a362:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a366:	2300      	movs	r3, #0
 800a368:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a36c:	e7f7      	b.n	800a35e <_Balloc+0x66>
 800a36e:	bf00      	nop
 800a370:	0800cd3f 	.word	0x0800cd3f
 800a374:	0800cdbf 	.word	0x0800cdbf

0800a378 <_Bfree>:
 800a378:	b570      	push	{r4, r5, r6, lr}
 800a37a:	69c6      	ldr	r6, [r0, #28]
 800a37c:	4605      	mov	r5, r0
 800a37e:	460c      	mov	r4, r1
 800a380:	b976      	cbnz	r6, 800a3a0 <_Bfree+0x28>
 800a382:	2010      	movs	r0, #16
 800a384:	f7ff ff02 	bl	800a18c <malloc>
 800a388:	4602      	mov	r2, r0
 800a38a:	61e8      	str	r0, [r5, #28]
 800a38c:	b920      	cbnz	r0, 800a398 <_Bfree+0x20>
 800a38e:	4b09      	ldr	r3, [pc, #36]	@ (800a3b4 <_Bfree+0x3c>)
 800a390:	4809      	ldr	r0, [pc, #36]	@ (800a3b8 <_Bfree+0x40>)
 800a392:	218f      	movs	r1, #143	@ 0x8f
 800a394:	f001 fe80 	bl	800c098 <__assert_func>
 800a398:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a39c:	6006      	str	r6, [r0, #0]
 800a39e:	60c6      	str	r6, [r0, #12]
 800a3a0:	b13c      	cbz	r4, 800a3b2 <_Bfree+0x3a>
 800a3a2:	69eb      	ldr	r3, [r5, #28]
 800a3a4:	6862      	ldr	r2, [r4, #4]
 800a3a6:	68db      	ldr	r3, [r3, #12]
 800a3a8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a3ac:	6021      	str	r1, [r4, #0]
 800a3ae:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a3b2:	bd70      	pop	{r4, r5, r6, pc}
 800a3b4:	0800cd3f 	.word	0x0800cd3f
 800a3b8:	0800cdbf 	.word	0x0800cdbf

0800a3bc <__multadd>:
 800a3bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a3c0:	690d      	ldr	r5, [r1, #16]
 800a3c2:	4607      	mov	r7, r0
 800a3c4:	460c      	mov	r4, r1
 800a3c6:	461e      	mov	r6, r3
 800a3c8:	f101 0c14 	add.w	ip, r1, #20
 800a3cc:	2000      	movs	r0, #0
 800a3ce:	f8dc 3000 	ldr.w	r3, [ip]
 800a3d2:	b299      	uxth	r1, r3
 800a3d4:	fb02 6101 	mla	r1, r2, r1, r6
 800a3d8:	0c1e      	lsrs	r6, r3, #16
 800a3da:	0c0b      	lsrs	r3, r1, #16
 800a3dc:	fb02 3306 	mla	r3, r2, r6, r3
 800a3e0:	b289      	uxth	r1, r1
 800a3e2:	3001      	adds	r0, #1
 800a3e4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a3e8:	4285      	cmp	r5, r0
 800a3ea:	f84c 1b04 	str.w	r1, [ip], #4
 800a3ee:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a3f2:	dcec      	bgt.n	800a3ce <__multadd+0x12>
 800a3f4:	b30e      	cbz	r6, 800a43a <__multadd+0x7e>
 800a3f6:	68a3      	ldr	r3, [r4, #8]
 800a3f8:	42ab      	cmp	r3, r5
 800a3fa:	dc19      	bgt.n	800a430 <__multadd+0x74>
 800a3fc:	6861      	ldr	r1, [r4, #4]
 800a3fe:	4638      	mov	r0, r7
 800a400:	3101      	adds	r1, #1
 800a402:	f7ff ff79 	bl	800a2f8 <_Balloc>
 800a406:	4680      	mov	r8, r0
 800a408:	b928      	cbnz	r0, 800a416 <__multadd+0x5a>
 800a40a:	4602      	mov	r2, r0
 800a40c:	4b0c      	ldr	r3, [pc, #48]	@ (800a440 <__multadd+0x84>)
 800a40e:	480d      	ldr	r0, [pc, #52]	@ (800a444 <__multadd+0x88>)
 800a410:	21ba      	movs	r1, #186	@ 0xba
 800a412:	f001 fe41 	bl	800c098 <__assert_func>
 800a416:	6922      	ldr	r2, [r4, #16]
 800a418:	3202      	adds	r2, #2
 800a41a:	f104 010c 	add.w	r1, r4, #12
 800a41e:	0092      	lsls	r2, r2, #2
 800a420:	300c      	adds	r0, #12
 800a422:	f001 fe21 	bl	800c068 <memcpy>
 800a426:	4621      	mov	r1, r4
 800a428:	4638      	mov	r0, r7
 800a42a:	f7ff ffa5 	bl	800a378 <_Bfree>
 800a42e:	4644      	mov	r4, r8
 800a430:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a434:	3501      	adds	r5, #1
 800a436:	615e      	str	r6, [r3, #20]
 800a438:	6125      	str	r5, [r4, #16]
 800a43a:	4620      	mov	r0, r4
 800a43c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a440:	0800cdae 	.word	0x0800cdae
 800a444:	0800cdbf 	.word	0x0800cdbf

0800a448 <__s2b>:
 800a448:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a44c:	460c      	mov	r4, r1
 800a44e:	4615      	mov	r5, r2
 800a450:	461f      	mov	r7, r3
 800a452:	2209      	movs	r2, #9
 800a454:	3308      	adds	r3, #8
 800a456:	4606      	mov	r6, r0
 800a458:	fb93 f3f2 	sdiv	r3, r3, r2
 800a45c:	2100      	movs	r1, #0
 800a45e:	2201      	movs	r2, #1
 800a460:	429a      	cmp	r2, r3
 800a462:	db09      	blt.n	800a478 <__s2b+0x30>
 800a464:	4630      	mov	r0, r6
 800a466:	f7ff ff47 	bl	800a2f8 <_Balloc>
 800a46a:	b940      	cbnz	r0, 800a47e <__s2b+0x36>
 800a46c:	4602      	mov	r2, r0
 800a46e:	4b19      	ldr	r3, [pc, #100]	@ (800a4d4 <__s2b+0x8c>)
 800a470:	4819      	ldr	r0, [pc, #100]	@ (800a4d8 <__s2b+0x90>)
 800a472:	21d3      	movs	r1, #211	@ 0xd3
 800a474:	f001 fe10 	bl	800c098 <__assert_func>
 800a478:	0052      	lsls	r2, r2, #1
 800a47a:	3101      	adds	r1, #1
 800a47c:	e7f0      	b.n	800a460 <__s2b+0x18>
 800a47e:	9b08      	ldr	r3, [sp, #32]
 800a480:	6143      	str	r3, [r0, #20]
 800a482:	2d09      	cmp	r5, #9
 800a484:	f04f 0301 	mov.w	r3, #1
 800a488:	6103      	str	r3, [r0, #16]
 800a48a:	dd16      	ble.n	800a4ba <__s2b+0x72>
 800a48c:	f104 0909 	add.w	r9, r4, #9
 800a490:	46c8      	mov	r8, r9
 800a492:	442c      	add	r4, r5
 800a494:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a498:	4601      	mov	r1, r0
 800a49a:	3b30      	subs	r3, #48	@ 0x30
 800a49c:	220a      	movs	r2, #10
 800a49e:	4630      	mov	r0, r6
 800a4a0:	f7ff ff8c 	bl	800a3bc <__multadd>
 800a4a4:	45a0      	cmp	r8, r4
 800a4a6:	d1f5      	bne.n	800a494 <__s2b+0x4c>
 800a4a8:	f1a5 0408 	sub.w	r4, r5, #8
 800a4ac:	444c      	add	r4, r9
 800a4ae:	1b2d      	subs	r5, r5, r4
 800a4b0:	1963      	adds	r3, r4, r5
 800a4b2:	42bb      	cmp	r3, r7
 800a4b4:	db04      	blt.n	800a4c0 <__s2b+0x78>
 800a4b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a4ba:	340a      	adds	r4, #10
 800a4bc:	2509      	movs	r5, #9
 800a4be:	e7f6      	b.n	800a4ae <__s2b+0x66>
 800a4c0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a4c4:	4601      	mov	r1, r0
 800a4c6:	3b30      	subs	r3, #48	@ 0x30
 800a4c8:	220a      	movs	r2, #10
 800a4ca:	4630      	mov	r0, r6
 800a4cc:	f7ff ff76 	bl	800a3bc <__multadd>
 800a4d0:	e7ee      	b.n	800a4b0 <__s2b+0x68>
 800a4d2:	bf00      	nop
 800a4d4:	0800cdae 	.word	0x0800cdae
 800a4d8:	0800cdbf 	.word	0x0800cdbf

0800a4dc <__hi0bits>:
 800a4dc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a4e0:	4603      	mov	r3, r0
 800a4e2:	bf36      	itet	cc
 800a4e4:	0403      	lslcc	r3, r0, #16
 800a4e6:	2000      	movcs	r0, #0
 800a4e8:	2010      	movcc	r0, #16
 800a4ea:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a4ee:	bf3c      	itt	cc
 800a4f0:	021b      	lslcc	r3, r3, #8
 800a4f2:	3008      	addcc	r0, #8
 800a4f4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a4f8:	bf3c      	itt	cc
 800a4fa:	011b      	lslcc	r3, r3, #4
 800a4fc:	3004      	addcc	r0, #4
 800a4fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a502:	bf3c      	itt	cc
 800a504:	009b      	lslcc	r3, r3, #2
 800a506:	3002      	addcc	r0, #2
 800a508:	2b00      	cmp	r3, #0
 800a50a:	db05      	blt.n	800a518 <__hi0bits+0x3c>
 800a50c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a510:	f100 0001 	add.w	r0, r0, #1
 800a514:	bf08      	it	eq
 800a516:	2020      	moveq	r0, #32
 800a518:	4770      	bx	lr

0800a51a <__lo0bits>:
 800a51a:	6803      	ldr	r3, [r0, #0]
 800a51c:	4602      	mov	r2, r0
 800a51e:	f013 0007 	ands.w	r0, r3, #7
 800a522:	d00b      	beq.n	800a53c <__lo0bits+0x22>
 800a524:	07d9      	lsls	r1, r3, #31
 800a526:	d421      	bmi.n	800a56c <__lo0bits+0x52>
 800a528:	0798      	lsls	r0, r3, #30
 800a52a:	bf49      	itett	mi
 800a52c:	085b      	lsrmi	r3, r3, #1
 800a52e:	089b      	lsrpl	r3, r3, #2
 800a530:	2001      	movmi	r0, #1
 800a532:	6013      	strmi	r3, [r2, #0]
 800a534:	bf5c      	itt	pl
 800a536:	6013      	strpl	r3, [r2, #0]
 800a538:	2002      	movpl	r0, #2
 800a53a:	4770      	bx	lr
 800a53c:	b299      	uxth	r1, r3
 800a53e:	b909      	cbnz	r1, 800a544 <__lo0bits+0x2a>
 800a540:	0c1b      	lsrs	r3, r3, #16
 800a542:	2010      	movs	r0, #16
 800a544:	b2d9      	uxtb	r1, r3
 800a546:	b909      	cbnz	r1, 800a54c <__lo0bits+0x32>
 800a548:	3008      	adds	r0, #8
 800a54a:	0a1b      	lsrs	r3, r3, #8
 800a54c:	0719      	lsls	r1, r3, #28
 800a54e:	bf04      	itt	eq
 800a550:	091b      	lsreq	r3, r3, #4
 800a552:	3004      	addeq	r0, #4
 800a554:	0799      	lsls	r1, r3, #30
 800a556:	bf04      	itt	eq
 800a558:	089b      	lsreq	r3, r3, #2
 800a55a:	3002      	addeq	r0, #2
 800a55c:	07d9      	lsls	r1, r3, #31
 800a55e:	d403      	bmi.n	800a568 <__lo0bits+0x4e>
 800a560:	085b      	lsrs	r3, r3, #1
 800a562:	f100 0001 	add.w	r0, r0, #1
 800a566:	d003      	beq.n	800a570 <__lo0bits+0x56>
 800a568:	6013      	str	r3, [r2, #0]
 800a56a:	4770      	bx	lr
 800a56c:	2000      	movs	r0, #0
 800a56e:	4770      	bx	lr
 800a570:	2020      	movs	r0, #32
 800a572:	4770      	bx	lr

0800a574 <__i2b>:
 800a574:	b510      	push	{r4, lr}
 800a576:	460c      	mov	r4, r1
 800a578:	2101      	movs	r1, #1
 800a57a:	f7ff febd 	bl	800a2f8 <_Balloc>
 800a57e:	4602      	mov	r2, r0
 800a580:	b928      	cbnz	r0, 800a58e <__i2b+0x1a>
 800a582:	4b05      	ldr	r3, [pc, #20]	@ (800a598 <__i2b+0x24>)
 800a584:	4805      	ldr	r0, [pc, #20]	@ (800a59c <__i2b+0x28>)
 800a586:	f240 1145 	movw	r1, #325	@ 0x145
 800a58a:	f001 fd85 	bl	800c098 <__assert_func>
 800a58e:	2301      	movs	r3, #1
 800a590:	6144      	str	r4, [r0, #20]
 800a592:	6103      	str	r3, [r0, #16]
 800a594:	bd10      	pop	{r4, pc}
 800a596:	bf00      	nop
 800a598:	0800cdae 	.word	0x0800cdae
 800a59c:	0800cdbf 	.word	0x0800cdbf

0800a5a0 <__multiply>:
 800a5a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5a4:	4617      	mov	r7, r2
 800a5a6:	690a      	ldr	r2, [r1, #16]
 800a5a8:	693b      	ldr	r3, [r7, #16]
 800a5aa:	429a      	cmp	r2, r3
 800a5ac:	bfa8      	it	ge
 800a5ae:	463b      	movge	r3, r7
 800a5b0:	4689      	mov	r9, r1
 800a5b2:	bfa4      	itt	ge
 800a5b4:	460f      	movge	r7, r1
 800a5b6:	4699      	movge	r9, r3
 800a5b8:	693d      	ldr	r5, [r7, #16]
 800a5ba:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a5be:	68bb      	ldr	r3, [r7, #8]
 800a5c0:	6879      	ldr	r1, [r7, #4]
 800a5c2:	eb05 060a 	add.w	r6, r5, sl
 800a5c6:	42b3      	cmp	r3, r6
 800a5c8:	b085      	sub	sp, #20
 800a5ca:	bfb8      	it	lt
 800a5cc:	3101      	addlt	r1, #1
 800a5ce:	f7ff fe93 	bl	800a2f8 <_Balloc>
 800a5d2:	b930      	cbnz	r0, 800a5e2 <__multiply+0x42>
 800a5d4:	4602      	mov	r2, r0
 800a5d6:	4b41      	ldr	r3, [pc, #260]	@ (800a6dc <__multiply+0x13c>)
 800a5d8:	4841      	ldr	r0, [pc, #260]	@ (800a6e0 <__multiply+0x140>)
 800a5da:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a5de:	f001 fd5b 	bl	800c098 <__assert_func>
 800a5e2:	f100 0414 	add.w	r4, r0, #20
 800a5e6:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800a5ea:	4623      	mov	r3, r4
 800a5ec:	2200      	movs	r2, #0
 800a5ee:	4573      	cmp	r3, lr
 800a5f0:	d320      	bcc.n	800a634 <__multiply+0x94>
 800a5f2:	f107 0814 	add.w	r8, r7, #20
 800a5f6:	f109 0114 	add.w	r1, r9, #20
 800a5fa:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800a5fe:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800a602:	9302      	str	r3, [sp, #8]
 800a604:	1beb      	subs	r3, r5, r7
 800a606:	3b15      	subs	r3, #21
 800a608:	f023 0303 	bic.w	r3, r3, #3
 800a60c:	3304      	adds	r3, #4
 800a60e:	3715      	adds	r7, #21
 800a610:	42bd      	cmp	r5, r7
 800a612:	bf38      	it	cc
 800a614:	2304      	movcc	r3, #4
 800a616:	9301      	str	r3, [sp, #4]
 800a618:	9b02      	ldr	r3, [sp, #8]
 800a61a:	9103      	str	r1, [sp, #12]
 800a61c:	428b      	cmp	r3, r1
 800a61e:	d80c      	bhi.n	800a63a <__multiply+0x9a>
 800a620:	2e00      	cmp	r6, #0
 800a622:	dd03      	ble.n	800a62c <__multiply+0x8c>
 800a624:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d055      	beq.n	800a6d8 <__multiply+0x138>
 800a62c:	6106      	str	r6, [r0, #16]
 800a62e:	b005      	add	sp, #20
 800a630:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a634:	f843 2b04 	str.w	r2, [r3], #4
 800a638:	e7d9      	b.n	800a5ee <__multiply+0x4e>
 800a63a:	f8b1 a000 	ldrh.w	sl, [r1]
 800a63e:	f1ba 0f00 	cmp.w	sl, #0
 800a642:	d01f      	beq.n	800a684 <__multiply+0xe4>
 800a644:	46c4      	mov	ip, r8
 800a646:	46a1      	mov	r9, r4
 800a648:	2700      	movs	r7, #0
 800a64a:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a64e:	f8d9 3000 	ldr.w	r3, [r9]
 800a652:	fa1f fb82 	uxth.w	fp, r2
 800a656:	b29b      	uxth	r3, r3
 800a658:	fb0a 330b 	mla	r3, sl, fp, r3
 800a65c:	443b      	add	r3, r7
 800a65e:	f8d9 7000 	ldr.w	r7, [r9]
 800a662:	0c12      	lsrs	r2, r2, #16
 800a664:	0c3f      	lsrs	r7, r7, #16
 800a666:	fb0a 7202 	mla	r2, sl, r2, r7
 800a66a:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800a66e:	b29b      	uxth	r3, r3
 800a670:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a674:	4565      	cmp	r5, ip
 800a676:	f849 3b04 	str.w	r3, [r9], #4
 800a67a:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800a67e:	d8e4      	bhi.n	800a64a <__multiply+0xaa>
 800a680:	9b01      	ldr	r3, [sp, #4]
 800a682:	50e7      	str	r7, [r4, r3]
 800a684:	9b03      	ldr	r3, [sp, #12]
 800a686:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a68a:	3104      	adds	r1, #4
 800a68c:	f1b9 0f00 	cmp.w	r9, #0
 800a690:	d020      	beq.n	800a6d4 <__multiply+0x134>
 800a692:	6823      	ldr	r3, [r4, #0]
 800a694:	4647      	mov	r7, r8
 800a696:	46a4      	mov	ip, r4
 800a698:	f04f 0a00 	mov.w	sl, #0
 800a69c:	f8b7 b000 	ldrh.w	fp, [r7]
 800a6a0:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800a6a4:	fb09 220b 	mla	r2, r9, fp, r2
 800a6a8:	4452      	add	r2, sl
 800a6aa:	b29b      	uxth	r3, r3
 800a6ac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a6b0:	f84c 3b04 	str.w	r3, [ip], #4
 800a6b4:	f857 3b04 	ldr.w	r3, [r7], #4
 800a6b8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a6bc:	f8bc 3000 	ldrh.w	r3, [ip]
 800a6c0:	fb09 330a 	mla	r3, r9, sl, r3
 800a6c4:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800a6c8:	42bd      	cmp	r5, r7
 800a6ca:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a6ce:	d8e5      	bhi.n	800a69c <__multiply+0xfc>
 800a6d0:	9a01      	ldr	r2, [sp, #4]
 800a6d2:	50a3      	str	r3, [r4, r2]
 800a6d4:	3404      	adds	r4, #4
 800a6d6:	e79f      	b.n	800a618 <__multiply+0x78>
 800a6d8:	3e01      	subs	r6, #1
 800a6da:	e7a1      	b.n	800a620 <__multiply+0x80>
 800a6dc:	0800cdae 	.word	0x0800cdae
 800a6e0:	0800cdbf 	.word	0x0800cdbf

0800a6e4 <__pow5mult>:
 800a6e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a6e8:	4615      	mov	r5, r2
 800a6ea:	f012 0203 	ands.w	r2, r2, #3
 800a6ee:	4607      	mov	r7, r0
 800a6f0:	460e      	mov	r6, r1
 800a6f2:	d007      	beq.n	800a704 <__pow5mult+0x20>
 800a6f4:	4c25      	ldr	r4, [pc, #148]	@ (800a78c <__pow5mult+0xa8>)
 800a6f6:	3a01      	subs	r2, #1
 800a6f8:	2300      	movs	r3, #0
 800a6fa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a6fe:	f7ff fe5d 	bl	800a3bc <__multadd>
 800a702:	4606      	mov	r6, r0
 800a704:	10ad      	asrs	r5, r5, #2
 800a706:	d03d      	beq.n	800a784 <__pow5mult+0xa0>
 800a708:	69fc      	ldr	r4, [r7, #28]
 800a70a:	b97c      	cbnz	r4, 800a72c <__pow5mult+0x48>
 800a70c:	2010      	movs	r0, #16
 800a70e:	f7ff fd3d 	bl	800a18c <malloc>
 800a712:	4602      	mov	r2, r0
 800a714:	61f8      	str	r0, [r7, #28]
 800a716:	b928      	cbnz	r0, 800a724 <__pow5mult+0x40>
 800a718:	4b1d      	ldr	r3, [pc, #116]	@ (800a790 <__pow5mult+0xac>)
 800a71a:	481e      	ldr	r0, [pc, #120]	@ (800a794 <__pow5mult+0xb0>)
 800a71c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a720:	f001 fcba 	bl	800c098 <__assert_func>
 800a724:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a728:	6004      	str	r4, [r0, #0]
 800a72a:	60c4      	str	r4, [r0, #12]
 800a72c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a730:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a734:	b94c      	cbnz	r4, 800a74a <__pow5mult+0x66>
 800a736:	f240 2171 	movw	r1, #625	@ 0x271
 800a73a:	4638      	mov	r0, r7
 800a73c:	f7ff ff1a 	bl	800a574 <__i2b>
 800a740:	2300      	movs	r3, #0
 800a742:	f8c8 0008 	str.w	r0, [r8, #8]
 800a746:	4604      	mov	r4, r0
 800a748:	6003      	str	r3, [r0, #0]
 800a74a:	f04f 0900 	mov.w	r9, #0
 800a74e:	07eb      	lsls	r3, r5, #31
 800a750:	d50a      	bpl.n	800a768 <__pow5mult+0x84>
 800a752:	4631      	mov	r1, r6
 800a754:	4622      	mov	r2, r4
 800a756:	4638      	mov	r0, r7
 800a758:	f7ff ff22 	bl	800a5a0 <__multiply>
 800a75c:	4631      	mov	r1, r6
 800a75e:	4680      	mov	r8, r0
 800a760:	4638      	mov	r0, r7
 800a762:	f7ff fe09 	bl	800a378 <_Bfree>
 800a766:	4646      	mov	r6, r8
 800a768:	106d      	asrs	r5, r5, #1
 800a76a:	d00b      	beq.n	800a784 <__pow5mult+0xa0>
 800a76c:	6820      	ldr	r0, [r4, #0]
 800a76e:	b938      	cbnz	r0, 800a780 <__pow5mult+0x9c>
 800a770:	4622      	mov	r2, r4
 800a772:	4621      	mov	r1, r4
 800a774:	4638      	mov	r0, r7
 800a776:	f7ff ff13 	bl	800a5a0 <__multiply>
 800a77a:	6020      	str	r0, [r4, #0]
 800a77c:	f8c0 9000 	str.w	r9, [r0]
 800a780:	4604      	mov	r4, r0
 800a782:	e7e4      	b.n	800a74e <__pow5mult+0x6a>
 800a784:	4630      	mov	r0, r6
 800a786:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a78a:	bf00      	nop
 800a78c:	0800ced0 	.word	0x0800ced0
 800a790:	0800cd3f 	.word	0x0800cd3f
 800a794:	0800cdbf 	.word	0x0800cdbf

0800a798 <__lshift>:
 800a798:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a79c:	460c      	mov	r4, r1
 800a79e:	6849      	ldr	r1, [r1, #4]
 800a7a0:	6923      	ldr	r3, [r4, #16]
 800a7a2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a7a6:	68a3      	ldr	r3, [r4, #8]
 800a7a8:	4607      	mov	r7, r0
 800a7aa:	4691      	mov	r9, r2
 800a7ac:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a7b0:	f108 0601 	add.w	r6, r8, #1
 800a7b4:	42b3      	cmp	r3, r6
 800a7b6:	db0b      	blt.n	800a7d0 <__lshift+0x38>
 800a7b8:	4638      	mov	r0, r7
 800a7ba:	f7ff fd9d 	bl	800a2f8 <_Balloc>
 800a7be:	4605      	mov	r5, r0
 800a7c0:	b948      	cbnz	r0, 800a7d6 <__lshift+0x3e>
 800a7c2:	4602      	mov	r2, r0
 800a7c4:	4b28      	ldr	r3, [pc, #160]	@ (800a868 <__lshift+0xd0>)
 800a7c6:	4829      	ldr	r0, [pc, #164]	@ (800a86c <__lshift+0xd4>)
 800a7c8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a7cc:	f001 fc64 	bl	800c098 <__assert_func>
 800a7d0:	3101      	adds	r1, #1
 800a7d2:	005b      	lsls	r3, r3, #1
 800a7d4:	e7ee      	b.n	800a7b4 <__lshift+0x1c>
 800a7d6:	2300      	movs	r3, #0
 800a7d8:	f100 0114 	add.w	r1, r0, #20
 800a7dc:	f100 0210 	add.w	r2, r0, #16
 800a7e0:	4618      	mov	r0, r3
 800a7e2:	4553      	cmp	r3, sl
 800a7e4:	db33      	blt.n	800a84e <__lshift+0xb6>
 800a7e6:	6920      	ldr	r0, [r4, #16]
 800a7e8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a7ec:	f104 0314 	add.w	r3, r4, #20
 800a7f0:	f019 091f 	ands.w	r9, r9, #31
 800a7f4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a7f8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a7fc:	d02b      	beq.n	800a856 <__lshift+0xbe>
 800a7fe:	f1c9 0e20 	rsb	lr, r9, #32
 800a802:	468a      	mov	sl, r1
 800a804:	2200      	movs	r2, #0
 800a806:	6818      	ldr	r0, [r3, #0]
 800a808:	fa00 f009 	lsl.w	r0, r0, r9
 800a80c:	4310      	orrs	r0, r2
 800a80e:	f84a 0b04 	str.w	r0, [sl], #4
 800a812:	f853 2b04 	ldr.w	r2, [r3], #4
 800a816:	459c      	cmp	ip, r3
 800a818:	fa22 f20e 	lsr.w	r2, r2, lr
 800a81c:	d8f3      	bhi.n	800a806 <__lshift+0x6e>
 800a81e:	ebac 0304 	sub.w	r3, ip, r4
 800a822:	3b15      	subs	r3, #21
 800a824:	f023 0303 	bic.w	r3, r3, #3
 800a828:	3304      	adds	r3, #4
 800a82a:	f104 0015 	add.w	r0, r4, #21
 800a82e:	4560      	cmp	r0, ip
 800a830:	bf88      	it	hi
 800a832:	2304      	movhi	r3, #4
 800a834:	50ca      	str	r2, [r1, r3]
 800a836:	b10a      	cbz	r2, 800a83c <__lshift+0xa4>
 800a838:	f108 0602 	add.w	r6, r8, #2
 800a83c:	3e01      	subs	r6, #1
 800a83e:	4638      	mov	r0, r7
 800a840:	612e      	str	r6, [r5, #16]
 800a842:	4621      	mov	r1, r4
 800a844:	f7ff fd98 	bl	800a378 <_Bfree>
 800a848:	4628      	mov	r0, r5
 800a84a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a84e:	f842 0f04 	str.w	r0, [r2, #4]!
 800a852:	3301      	adds	r3, #1
 800a854:	e7c5      	b.n	800a7e2 <__lshift+0x4a>
 800a856:	3904      	subs	r1, #4
 800a858:	f853 2b04 	ldr.w	r2, [r3], #4
 800a85c:	f841 2f04 	str.w	r2, [r1, #4]!
 800a860:	459c      	cmp	ip, r3
 800a862:	d8f9      	bhi.n	800a858 <__lshift+0xc0>
 800a864:	e7ea      	b.n	800a83c <__lshift+0xa4>
 800a866:	bf00      	nop
 800a868:	0800cdae 	.word	0x0800cdae
 800a86c:	0800cdbf 	.word	0x0800cdbf

0800a870 <__mcmp>:
 800a870:	690a      	ldr	r2, [r1, #16]
 800a872:	4603      	mov	r3, r0
 800a874:	6900      	ldr	r0, [r0, #16]
 800a876:	1a80      	subs	r0, r0, r2
 800a878:	b530      	push	{r4, r5, lr}
 800a87a:	d10e      	bne.n	800a89a <__mcmp+0x2a>
 800a87c:	3314      	adds	r3, #20
 800a87e:	3114      	adds	r1, #20
 800a880:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a884:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a888:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a88c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a890:	4295      	cmp	r5, r2
 800a892:	d003      	beq.n	800a89c <__mcmp+0x2c>
 800a894:	d205      	bcs.n	800a8a2 <__mcmp+0x32>
 800a896:	f04f 30ff 	mov.w	r0, #4294967295
 800a89a:	bd30      	pop	{r4, r5, pc}
 800a89c:	42a3      	cmp	r3, r4
 800a89e:	d3f3      	bcc.n	800a888 <__mcmp+0x18>
 800a8a0:	e7fb      	b.n	800a89a <__mcmp+0x2a>
 800a8a2:	2001      	movs	r0, #1
 800a8a4:	e7f9      	b.n	800a89a <__mcmp+0x2a>
	...

0800a8a8 <__mdiff>:
 800a8a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8ac:	4689      	mov	r9, r1
 800a8ae:	4606      	mov	r6, r0
 800a8b0:	4611      	mov	r1, r2
 800a8b2:	4648      	mov	r0, r9
 800a8b4:	4614      	mov	r4, r2
 800a8b6:	f7ff ffdb 	bl	800a870 <__mcmp>
 800a8ba:	1e05      	subs	r5, r0, #0
 800a8bc:	d112      	bne.n	800a8e4 <__mdiff+0x3c>
 800a8be:	4629      	mov	r1, r5
 800a8c0:	4630      	mov	r0, r6
 800a8c2:	f7ff fd19 	bl	800a2f8 <_Balloc>
 800a8c6:	4602      	mov	r2, r0
 800a8c8:	b928      	cbnz	r0, 800a8d6 <__mdiff+0x2e>
 800a8ca:	4b3f      	ldr	r3, [pc, #252]	@ (800a9c8 <__mdiff+0x120>)
 800a8cc:	f240 2137 	movw	r1, #567	@ 0x237
 800a8d0:	483e      	ldr	r0, [pc, #248]	@ (800a9cc <__mdiff+0x124>)
 800a8d2:	f001 fbe1 	bl	800c098 <__assert_func>
 800a8d6:	2301      	movs	r3, #1
 800a8d8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a8dc:	4610      	mov	r0, r2
 800a8de:	b003      	add	sp, #12
 800a8e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8e4:	bfbc      	itt	lt
 800a8e6:	464b      	movlt	r3, r9
 800a8e8:	46a1      	movlt	r9, r4
 800a8ea:	4630      	mov	r0, r6
 800a8ec:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a8f0:	bfba      	itte	lt
 800a8f2:	461c      	movlt	r4, r3
 800a8f4:	2501      	movlt	r5, #1
 800a8f6:	2500      	movge	r5, #0
 800a8f8:	f7ff fcfe 	bl	800a2f8 <_Balloc>
 800a8fc:	4602      	mov	r2, r0
 800a8fe:	b918      	cbnz	r0, 800a908 <__mdiff+0x60>
 800a900:	4b31      	ldr	r3, [pc, #196]	@ (800a9c8 <__mdiff+0x120>)
 800a902:	f240 2145 	movw	r1, #581	@ 0x245
 800a906:	e7e3      	b.n	800a8d0 <__mdiff+0x28>
 800a908:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a90c:	6926      	ldr	r6, [r4, #16]
 800a90e:	60c5      	str	r5, [r0, #12]
 800a910:	f109 0310 	add.w	r3, r9, #16
 800a914:	f109 0514 	add.w	r5, r9, #20
 800a918:	f104 0e14 	add.w	lr, r4, #20
 800a91c:	f100 0b14 	add.w	fp, r0, #20
 800a920:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a924:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a928:	9301      	str	r3, [sp, #4]
 800a92a:	46d9      	mov	r9, fp
 800a92c:	f04f 0c00 	mov.w	ip, #0
 800a930:	9b01      	ldr	r3, [sp, #4]
 800a932:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a936:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a93a:	9301      	str	r3, [sp, #4]
 800a93c:	fa1f f38a 	uxth.w	r3, sl
 800a940:	4619      	mov	r1, r3
 800a942:	b283      	uxth	r3, r0
 800a944:	1acb      	subs	r3, r1, r3
 800a946:	0c00      	lsrs	r0, r0, #16
 800a948:	4463      	add	r3, ip
 800a94a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a94e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a952:	b29b      	uxth	r3, r3
 800a954:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a958:	4576      	cmp	r6, lr
 800a95a:	f849 3b04 	str.w	r3, [r9], #4
 800a95e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a962:	d8e5      	bhi.n	800a930 <__mdiff+0x88>
 800a964:	1b33      	subs	r3, r6, r4
 800a966:	3b15      	subs	r3, #21
 800a968:	f023 0303 	bic.w	r3, r3, #3
 800a96c:	3415      	adds	r4, #21
 800a96e:	3304      	adds	r3, #4
 800a970:	42a6      	cmp	r6, r4
 800a972:	bf38      	it	cc
 800a974:	2304      	movcc	r3, #4
 800a976:	441d      	add	r5, r3
 800a978:	445b      	add	r3, fp
 800a97a:	461e      	mov	r6, r3
 800a97c:	462c      	mov	r4, r5
 800a97e:	4544      	cmp	r4, r8
 800a980:	d30e      	bcc.n	800a9a0 <__mdiff+0xf8>
 800a982:	f108 0103 	add.w	r1, r8, #3
 800a986:	1b49      	subs	r1, r1, r5
 800a988:	f021 0103 	bic.w	r1, r1, #3
 800a98c:	3d03      	subs	r5, #3
 800a98e:	45a8      	cmp	r8, r5
 800a990:	bf38      	it	cc
 800a992:	2100      	movcc	r1, #0
 800a994:	440b      	add	r3, r1
 800a996:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a99a:	b191      	cbz	r1, 800a9c2 <__mdiff+0x11a>
 800a99c:	6117      	str	r7, [r2, #16]
 800a99e:	e79d      	b.n	800a8dc <__mdiff+0x34>
 800a9a0:	f854 1b04 	ldr.w	r1, [r4], #4
 800a9a4:	46e6      	mov	lr, ip
 800a9a6:	0c08      	lsrs	r0, r1, #16
 800a9a8:	fa1c fc81 	uxtah	ip, ip, r1
 800a9ac:	4471      	add	r1, lr
 800a9ae:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a9b2:	b289      	uxth	r1, r1
 800a9b4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a9b8:	f846 1b04 	str.w	r1, [r6], #4
 800a9bc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a9c0:	e7dd      	b.n	800a97e <__mdiff+0xd6>
 800a9c2:	3f01      	subs	r7, #1
 800a9c4:	e7e7      	b.n	800a996 <__mdiff+0xee>
 800a9c6:	bf00      	nop
 800a9c8:	0800cdae 	.word	0x0800cdae
 800a9cc:	0800cdbf 	.word	0x0800cdbf

0800a9d0 <__ulp>:
 800a9d0:	b082      	sub	sp, #8
 800a9d2:	ed8d 0b00 	vstr	d0, [sp]
 800a9d6:	9a01      	ldr	r2, [sp, #4]
 800a9d8:	4b0f      	ldr	r3, [pc, #60]	@ (800aa18 <__ulp+0x48>)
 800a9da:	4013      	ands	r3, r2
 800a9dc:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	dc08      	bgt.n	800a9f6 <__ulp+0x26>
 800a9e4:	425b      	negs	r3, r3
 800a9e6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800a9ea:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a9ee:	da04      	bge.n	800a9fa <__ulp+0x2a>
 800a9f0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800a9f4:	4113      	asrs	r3, r2
 800a9f6:	2200      	movs	r2, #0
 800a9f8:	e008      	b.n	800aa0c <__ulp+0x3c>
 800a9fa:	f1a2 0314 	sub.w	r3, r2, #20
 800a9fe:	2b1e      	cmp	r3, #30
 800aa00:	bfda      	itte	le
 800aa02:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800aa06:	40da      	lsrle	r2, r3
 800aa08:	2201      	movgt	r2, #1
 800aa0a:	2300      	movs	r3, #0
 800aa0c:	4619      	mov	r1, r3
 800aa0e:	4610      	mov	r0, r2
 800aa10:	ec41 0b10 	vmov	d0, r0, r1
 800aa14:	b002      	add	sp, #8
 800aa16:	4770      	bx	lr
 800aa18:	7ff00000 	.word	0x7ff00000

0800aa1c <__b2d>:
 800aa1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa20:	6906      	ldr	r6, [r0, #16]
 800aa22:	f100 0814 	add.w	r8, r0, #20
 800aa26:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800aa2a:	1f37      	subs	r7, r6, #4
 800aa2c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800aa30:	4610      	mov	r0, r2
 800aa32:	f7ff fd53 	bl	800a4dc <__hi0bits>
 800aa36:	f1c0 0320 	rsb	r3, r0, #32
 800aa3a:	280a      	cmp	r0, #10
 800aa3c:	600b      	str	r3, [r1, #0]
 800aa3e:	491b      	ldr	r1, [pc, #108]	@ (800aaac <__b2d+0x90>)
 800aa40:	dc15      	bgt.n	800aa6e <__b2d+0x52>
 800aa42:	f1c0 0c0b 	rsb	ip, r0, #11
 800aa46:	fa22 f30c 	lsr.w	r3, r2, ip
 800aa4a:	45b8      	cmp	r8, r7
 800aa4c:	ea43 0501 	orr.w	r5, r3, r1
 800aa50:	bf34      	ite	cc
 800aa52:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800aa56:	2300      	movcs	r3, #0
 800aa58:	3015      	adds	r0, #21
 800aa5a:	fa02 f000 	lsl.w	r0, r2, r0
 800aa5e:	fa23 f30c 	lsr.w	r3, r3, ip
 800aa62:	4303      	orrs	r3, r0
 800aa64:	461c      	mov	r4, r3
 800aa66:	ec45 4b10 	vmov	d0, r4, r5
 800aa6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa6e:	45b8      	cmp	r8, r7
 800aa70:	bf3a      	itte	cc
 800aa72:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800aa76:	f1a6 0708 	subcc.w	r7, r6, #8
 800aa7a:	2300      	movcs	r3, #0
 800aa7c:	380b      	subs	r0, #11
 800aa7e:	d012      	beq.n	800aaa6 <__b2d+0x8a>
 800aa80:	f1c0 0120 	rsb	r1, r0, #32
 800aa84:	fa23 f401 	lsr.w	r4, r3, r1
 800aa88:	4082      	lsls	r2, r0
 800aa8a:	4322      	orrs	r2, r4
 800aa8c:	4547      	cmp	r7, r8
 800aa8e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800aa92:	bf8c      	ite	hi
 800aa94:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800aa98:	2200      	movls	r2, #0
 800aa9a:	4083      	lsls	r3, r0
 800aa9c:	40ca      	lsrs	r2, r1
 800aa9e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800aaa2:	4313      	orrs	r3, r2
 800aaa4:	e7de      	b.n	800aa64 <__b2d+0x48>
 800aaa6:	ea42 0501 	orr.w	r5, r2, r1
 800aaaa:	e7db      	b.n	800aa64 <__b2d+0x48>
 800aaac:	3ff00000 	.word	0x3ff00000

0800aab0 <__d2b>:
 800aab0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800aab4:	460f      	mov	r7, r1
 800aab6:	2101      	movs	r1, #1
 800aab8:	ec59 8b10 	vmov	r8, r9, d0
 800aabc:	4616      	mov	r6, r2
 800aabe:	f7ff fc1b 	bl	800a2f8 <_Balloc>
 800aac2:	4604      	mov	r4, r0
 800aac4:	b930      	cbnz	r0, 800aad4 <__d2b+0x24>
 800aac6:	4602      	mov	r2, r0
 800aac8:	4b23      	ldr	r3, [pc, #140]	@ (800ab58 <__d2b+0xa8>)
 800aaca:	4824      	ldr	r0, [pc, #144]	@ (800ab5c <__d2b+0xac>)
 800aacc:	f240 310f 	movw	r1, #783	@ 0x30f
 800aad0:	f001 fae2 	bl	800c098 <__assert_func>
 800aad4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800aad8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800aadc:	b10d      	cbz	r5, 800aae2 <__d2b+0x32>
 800aade:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800aae2:	9301      	str	r3, [sp, #4]
 800aae4:	f1b8 0300 	subs.w	r3, r8, #0
 800aae8:	d023      	beq.n	800ab32 <__d2b+0x82>
 800aaea:	4668      	mov	r0, sp
 800aaec:	9300      	str	r3, [sp, #0]
 800aaee:	f7ff fd14 	bl	800a51a <__lo0bits>
 800aaf2:	e9dd 1200 	ldrd	r1, r2, [sp]
 800aaf6:	b1d0      	cbz	r0, 800ab2e <__d2b+0x7e>
 800aaf8:	f1c0 0320 	rsb	r3, r0, #32
 800aafc:	fa02 f303 	lsl.w	r3, r2, r3
 800ab00:	430b      	orrs	r3, r1
 800ab02:	40c2      	lsrs	r2, r0
 800ab04:	6163      	str	r3, [r4, #20]
 800ab06:	9201      	str	r2, [sp, #4]
 800ab08:	9b01      	ldr	r3, [sp, #4]
 800ab0a:	61a3      	str	r3, [r4, #24]
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	bf0c      	ite	eq
 800ab10:	2201      	moveq	r2, #1
 800ab12:	2202      	movne	r2, #2
 800ab14:	6122      	str	r2, [r4, #16]
 800ab16:	b1a5      	cbz	r5, 800ab42 <__d2b+0x92>
 800ab18:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800ab1c:	4405      	add	r5, r0
 800ab1e:	603d      	str	r5, [r7, #0]
 800ab20:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800ab24:	6030      	str	r0, [r6, #0]
 800ab26:	4620      	mov	r0, r4
 800ab28:	b003      	add	sp, #12
 800ab2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ab2e:	6161      	str	r1, [r4, #20]
 800ab30:	e7ea      	b.n	800ab08 <__d2b+0x58>
 800ab32:	a801      	add	r0, sp, #4
 800ab34:	f7ff fcf1 	bl	800a51a <__lo0bits>
 800ab38:	9b01      	ldr	r3, [sp, #4]
 800ab3a:	6163      	str	r3, [r4, #20]
 800ab3c:	3020      	adds	r0, #32
 800ab3e:	2201      	movs	r2, #1
 800ab40:	e7e8      	b.n	800ab14 <__d2b+0x64>
 800ab42:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ab46:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800ab4a:	6038      	str	r0, [r7, #0]
 800ab4c:	6918      	ldr	r0, [r3, #16]
 800ab4e:	f7ff fcc5 	bl	800a4dc <__hi0bits>
 800ab52:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ab56:	e7e5      	b.n	800ab24 <__d2b+0x74>
 800ab58:	0800cdae 	.word	0x0800cdae
 800ab5c:	0800cdbf 	.word	0x0800cdbf

0800ab60 <__ratio>:
 800ab60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab64:	b085      	sub	sp, #20
 800ab66:	e9cd 1000 	strd	r1, r0, [sp]
 800ab6a:	a902      	add	r1, sp, #8
 800ab6c:	f7ff ff56 	bl	800aa1c <__b2d>
 800ab70:	9800      	ldr	r0, [sp, #0]
 800ab72:	a903      	add	r1, sp, #12
 800ab74:	ec55 4b10 	vmov	r4, r5, d0
 800ab78:	f7ff ff50 	bl	800aa1c <__b2d>
 800ab7c:	9b01      	ldr	r3, [sp, #4]
 800ab7e:	6919      	ldr	r1, [r3, #16]
 800ab80:	9b00      	ldr	r3, [sp, #0]
 800ab82:	691b      	ldr	r3, [r3, #16]
 800ab84:	1ac9      	subs	r1, r1, r3
 800ab86:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800ab8a:	1a9b      	subs	r3, r3, r2
 800ab8c:	ec5b ab10 	vmov	sl, fp, d0
 800ab90:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	bfce      	itee	gt
 800ab98:	462a      	movgt	r2, r5
 800ab9a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800ab9e:	465a      	movle	r2, fp
 800aba0:	462f      	mov	r7, r5
 800aba2:	46d9      	mov	r9, fp
 800aba4:	bfcc      	ite	gt
 800aba6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800abaa:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800abae:	464b      	mov	r3, r9
 800abb0:	4652      	mov	r2, sl
 800abb2:	4620      	mov	r0, r4
 800abb4:	4639      	mov	r1, r7
 800abb6:	f7f5 fe79 	bl	80008ac <__aeabi_ddiv>
 800abba:	ec41 0b10 	vmov	d0, r0, r1
 800abbe:	b005      	add	sp, #20
 800abc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800abc4 <__copybits>:
 800abc4:	3901      	subs	r1, #1
 800abc6:	b570      	push	{r4, r5, r6, lr}
 800abc8:	1149      	asrs	r1, r1, #5
 800abca:	6914      	ldr	r4, [r2, #16]
 800abcc:	3101      	adds	r1, #1
 800abce:	f102 0314 	add.w	r3, r2, #20
 800abd2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800abd6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800abda:	1f05      	subs	r5, r0, #4
 800abdc:	42a3      	cmp	r3, r4
 800abde:	d30c      	bcc.n	800abfa <__copybits+0x36>
 800abe0:	1aa3      	subs	r3, r4, r2
 800abe2:	3b11      	subs	r3, #17
 800abe4:	f023 0303 	bic.w	r3, r3, #3
 800abe8:	3211      	adds	r2, #17
 800abea:	42a2      	cmp	r2, r4
 800abec:	bf88      	it	hi
 800abee:	2300      	movhi	r3, #0
 800abf0:	4418      	add	r0, r3
 800abf2:	2300      	movs	r3, #0
 800abf4:	4288      	cmp	r0, r1
 800abf6:	d305      	bcc.n	800ac04 <__copybits+0x40>
 800abf8:	bd70      	pop	{r4, r5, r6, pc}
 800abfa:	f853 6b04 	ldr.w	r6, [r3], #4
 800abfe:	f845 6f04 	str.w	r6, [r5, #4]!
 800ac02:	e7eb      	b.n	800abdc <__copybits+0x18>
 800ac04:	f840 3b04 	str.w	r3, [r0], #4
 800ac08:	e7f4      	b.n	800abf4 <__copybits+0x30>

0800ac0a <__any_on>:
 800ac0a:	f100 0214 	add.w	r2, r0, #20
 800ac0e:	6900      	ldr	r0, [r0, #16]
 800ac10:	114b      	asrs	r3, r1, #5
 800ac12:	4298      	cmp	r0, r3
 800ac14:	b510      	push	{r4, lr}
 800ac16:	db11      	blt.n	800ac3c <__any_on+0x32>
 800ac18:	dd0a      	ble.n	800ac30 <__any_on+0x26>
 800ac1a:	f011 011f 	ands.w	r1, r1, #31
 800ac1e:	d007      	beq.n	800ac30 <__any_on+0x26>
 800ac20:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ac24:	fa24 f001 	lsr.w	r0, r4, r1
 800ac28:	fa00 f101 	lsl.w	r1, r0, r1
 800ac2c:	428c      	cmp	r4, r1
 800ac2e:	d10b      	bne.n	800ac48 <__any_on+0x3e>
 800ac30:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ac34:	4293      	cmp	r3, r2
 800ac36:	d803      	bhi.n	800ac40 <__any_on+0x36>
 800ac38:	2000      	movs	r0, #0
 800ac3a:	bd10      	pop	{r4, pc}
 800ac3c:	4603      	mov	r3, r0
 800ac3e:	e7f7      	b.n	800ac30 <__any_on+0x26>
 800ac40:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ac44:	2900      	cmp	r1, #0
 800ac46:	d0f5      	beq.n	800ac34 <__any_on+0x2a>
 800ac48:	2001      	movs	r0, #1
 800ac4a:	e7f6      	b.n	800ac3a <__any_on+0x30>

0800ac4c <sulp>:
 800ac4c:	b570      	push	{r4, r5, r6, lr}
 800ac4e:	4604      	mov	r4, r0
 800ac50:	460d      	mov	r5, r1
 800ac52:	ec45 4b10 	vmov	d0, r4, r5
 800ac56:	4616      	mov	r6, r2
 800ac58:	f7ff feba 	bl	800a9d0 <__ulp>
 800ac5c:	ec51 0b10 	vmov	r0, r1, d0
 800ac60:	b17e      	cbz	r6, 800ac82 <sulp+0x36>
 800ac62:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800ac66:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	dd09      	ble.n	800ac82 <sulp+0x36>
 800ac6e:	051b      	lsls	r3, r3, #20
 800ac70:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800ac74:	2400      	movs	r4, #0
 800ac76:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800ac7a:	4622      	mov	r2, r4
 800ac7c:	462b      	mov	r3, r5
 800ac7e:	f7f5 fceb 	bl	8000658 <__aeabi_dmul>
 800ac82:	ec41 0b10 	vmov	d0, r0, r1
 800ac86:	bd70      	pop	{r4, r5, r6, pc}

0800ac88 <_strtod_l>:
 800ac88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac8c:	b09f      	sub	sp, #124	@ 0x7c
 800ac8e:	460c      	mov	r4, r1
 800ac90:	9217      	str	r2, [sp, #92]	@ 0x5c
 800ac92:	2200      	movs	r2, #0
 800ac94:	921a      	str	r2, [sp, #104]	@ 0x68
 800ac96:	9005      	str	r0, [sp, #20]
 800ac98:	f04f 0a00 	mov.w	sl, #0
 800ac9c:	f04f 0b00 	mov.w	fp, #0
 800aca0:	460a      	mov	r2, r1
 800aca2:	9219      	str	r2, [sp, #100]	@ 0x64
 800aca4:	7811      	ldrb	r1, [r2, #0]
 800aca6:	292b      	cmp	r1, #43	@ 0x2b
 800aca8:	d04a      	beq.n	800ad40 <_strtod_l+0xb8>
 800acaa:	d838      	bhi.n	800ad1e <_strtod_l+0x96>
 800acac:	290d      	cmp	r1, #13
 800acae:	d832      	bhi.n	800ad16 <_strtod_l+0x8e>
 800acb0:	2908      	cmp	r1, #8
 800acb2:	d832      	bhi.n	800ad1a <_strtod_l+0x92>
 800acb4:	2900      	cmp	r1, #0
 800acb6:	d03b      	beq.n	800ad30 <_strtod_l+0xa8>
 800acb8:	2200      	movs	r2, #0
 800acba:	920e      	str	r2, [sp, #56]	@ 0x38
 800acbc:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800acbe:	782a      	ldrb	r2, [r5, #0]
 800acc0:	2a30      	cmp	r2, #48	@ 0x30
 800acc2:	f040 80b2 	bne.w	800ae2a <_strtod_l+0x1a2>
 800acc6:	786a      	ldrb	r2, [r5, #1]
 800acc8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800accc:	2a58      	cmp	r2, #88	@ 0x58
 800acce:	d16e      	bne.n	800adae <_strtod_l+0x126>
 800acd0:	9302      	str	r3, [sp, #8]
 800acd2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800acd4:	9301      	str	r3, [sp, #4]
 800acd6:	ab1a      	add	r3, sp, #104	@ 0x68
 800acd8:	9300      	str	r3, [sp, #0]
 800acda:	4a8f      	ldr	r2, [pc, #572]	@ (800af18 <_strtod_l+0x290>)
 800acdc:	9805      	ldr	r0, [sp, #20]
 800acde:	ab1b      	add	r3, sp, #108	@ 0x6c
 800ace0:	a919      	add	r1, sp, #100	@ 0x64
 800ace2:	f001 fa73 	bl	800c1cc <__gethex>
 800ace6:	f010 060f 	ands.w	r6, r0, #15
 800acea:	4604      	mov	r4, r0
 800acec:	d005      	beq.n	800acfa <_strtod_l+0x72>
 800acee:	2e06      	cmp	r6, #6
 800acf0:	d128      	bne.n	800ad44 <_strtod_l+0xbc>
 800acf2:	3501      	adds	r5, #1
 800acf4:	2300      	movs	r3, #0
 800acf6:	9519      	str	r5, [sp, #100]	@ 0x64
 800acf8:	930e      	str	r3, [sp, #56]	@ 0x38
 800acfa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	f040 858e 	bne.w	800b81e <_strtod_l+0xb96>
 800ad02:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ad04:	b1cb      	cbz	r3, 800ad3a <_strtod_l+0xb2>
 800ad06:	4652      	mov	r2, sl
 800ad08:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800ad0c:	ec43 2b10 	vmov	d0, r2, r3
 800ad10:	b01f      	add	sp, #124	@ 0x7c
 800ad12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad16:	2920      	cmp	r1, #32
 800ad18:	d1ce      	bne.n	800acb8 <_strtod_l+0x30>
 800ad1a:	3201      	adds	r2, #1
 800ad1c:	e7c1      	b.n	800aca2 <_strtod_l+0x1a>
 800ad1e:	292d      	cmp	r1, #45	@ 0x2d
 800ad20:	d1ca      	bne.n	800acb8 <_strtod_l+0x30>
 800ad22:	2101      	movs	r1, #1
 800ad24:	910e      	str	r1, [sp, #56]	@ 0x38
 800ad26:	1c51      	adds	r1, r2, #1
 800ad28:	9119      	str	r1, [sp, #100]	@ 0x64
 800ad2a:	7852      	ldrb	r2, [r2, #1]
 800ad2c:	2a00      	cmp	r2, #0
 800ad2e:	d1c5      	bne.n	800acbc <_strtod_l+0x34>
 800ad30:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800ad32:	9419      	str	r4, [sp, #100]	@ 0x64
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	f040 8570 	bne.w	800b81a <_strtod_l+0xb92>
 800ad3a:	4652      	mov	r2, sl
 800ad3c:	465b      	mov	r3, fp
 800ad3e:	e7e5      	b.n	800ad0c <_strtod_l+0x84>
 800ad40:	2100      	movs	r1, #0
 800ad42:	e7ef      	b.n	800ad24 <_strtod_l+0x9c>
 800ad44:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800ad46:	b13a      	cbz	r2, 800ad58 <_strtod_l+0xd0>
 800ad48:	2135      	movs	r1, #53	@ 0x35
 800ad4a:	a81c      	add	r0, sp, #112	@ 0x70
 800ad4c:	f7ff ff3a 	bl	800abc4 <__copybits>
 800ad50:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ad52:	9805      	ldr	r0, [sp, #20]
 800ad54:	f7ff fb10 	bl	800a378 <_Bfree>
 800ad58:	3e01      	subs	r6, #1
 800ad5a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800ad5c:	2e04      	cmp	r6, #4
 800ad5e:	d806      	bhi.n	800ad6e <_strtod_l+0xe6>
 800ad60:	e8df f006 	tbb	[pc, r6]
 800ad64:	201d0314 	.word	0x201d0314
 800ad68:	14          	.byte	0x14
 800ad69:	00          	.byte	0x00
 800ad6a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800ad6e:	05e1      	lsls	r1, r4, #23
 800ad70:	bf48      	it	mi
 800ad72:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800ad76:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ad7a:	0d1b      	lsrs	r3, r3, #20
 800ad7c:	051b      	lsls	r3, r3, #20
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d1bb      	bne.n	800acfa <_strtod_l+0x72>
 800ad82:	f7fe fb2b 	bl	80093dc <__errno>
 800ad86:	2322      	movs	r3, #34	@ 0x22
 800ad88:	6003      	str	r3, [r0, #0]
 800ad8a:	e7b6      	b.n	800acfa <_strtod_l+0x72>
 800ad8c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800ad90:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800ad94:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800ad98:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800ad9c:	e7e7      	b.n	800ad6e <_strtod_l+0xe6>
 800ad9e:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800af20 <_strtod_l+0x298>
 800ada2:	e7e4      	b.n	800ad6e <_strtod_l+0xe6>
 800ada4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800ada8:	f04f 3aff 	mov.w	sl, #4294967295
 800adac:	e7df      	b.n	800ad6e <_strtod_l+0xe6>
 800adae:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800adb0:	1c5a      	adds	r2, r3, #1
 800adb2:	9219      	str	r2, [sp, #100]	@ 0x64
 800adb4:	785b      	ldrb	r3, [r3, #1]
 800adb6:	2b30      	cmp	r3, #48	@ 0x30
 800adb8:	d0f9      	beq.n	800adae <_strtod_l+0x126>
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d09d      	beq.n	800acfa <_strtod_l+0x72>
 800adbe:	2301      	movs	r3, #1
 800adc0:	2700      	movs	r7, #0
 800adc2:	9308      	str	r3, [sp, #32]
 800adc4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800adc6:	930c      	str	r3, [sp, #48]	@ 0x30
 800adc8:	970b      	str	r7, [sp, #44]	@ 0x2c
 800adca:	46b9      	mov	r9, r7
 800adcc:	220a      	movs	r2, #10
 800adce:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800add0:	7805      	ldrb	r5, [r0, #0]
 800add2:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800add6:	b2d9      	uxtb	r1, r3
 800add8:	2909      	cmp	r1, #9
 800adda:	d928      	bls.n	800ae2e <_strtod_l+0x1a6>
 800addc:	494f      	ldr	r1, [pc, #316]	@ (800af1c <_strtod_l+0x294>)
 800adde:	2201      	movs	r2, #1
 800ade0:	f001 f8fe 	bl	800bfe0 <strncmp>
 800ade4:	2800      	cmp	r0, #0
 800ade6:	d032      	beq.n	800ae4e <_strtod_l+0x1c6>
 800ade8:	2000      	movs	r0, #0
 800adea:	462a      	mov	r2, r5
 800adec:	900a      	str	r0, [sp, #40]	@ 0x28
 800adee:	464d      	mov	r5, r9
 800adf0:	4603      	mov	r3, r0
 800adf2:	2a65      	cmp	r2, #101	@ 0x65
 800adf4:	d001      	beq.n	800adfa <_strtod_l+0x172>
 800adf6:	2a45      	cmp	r2, #69	@ 0x45
 800adf8:	d114      	bne.n	800ae24 <_strtod_l+0x19c>
 800adfa:	b91d      	cbnz	r5, 800ae04 <_strtod_l+0x17c>
 800adfc:	9a08      	ldr	r2, [sp, #32]
 800adfe:	4302      	orrs	r2, r0
 800ae00:	d096      	beq.n	800ad30 <_strtod_l+0xa8>
 800ae02:	2500      	movs	r5, #0
 800ae04:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800ae06:	1c62      	adds	r2, r4, #1
 800ae08:	9219      	str	r2, [sp, #100]	@ 0x64
 800ae0a:	7862      	ldrb	r2, [r4, #1]
 800ae0c:	2a2b      	cmp	r2, #43	@ 0x2b
 800ae0e:	d07a      	beq.n	800af06 <_strtod_l+0x27e>
 800ae10:	2a2d      	cmp	r2, #45	@ 0x2d
 800ae12:	d07e      	beq.n	800af12 <_strtod_l+0x28a>
 800ae14:	f04f 0c00 	mov.w	ip, #0
 800ae18:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800ae1c:	2909      	cmp	r1, #9
 800ae1e:	f240 8085 	bls.w	800af2c <_strtod_l+0x2a4>
 800ae22:	9419      	str	r4, [sp, #100]	@ 0x64
 800ae24:	f04f 0800 	mov.w	r8, #0
 800ae28:	e0a5      	b.n	800af76 <_strtod_l+0x2ee>
 800ae2a:	2300      	movs	r3, #0
 800ae2c:	e7c8      	b.n	800adc0 <_strtod_l+0x138>
 800ae2e:	f1b9 0f08 	cmp.w	r9, #8
 800ae32:	bfd8      	it	le
 800ae34:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800ae36:	f100 0001 	add.w	r0, r0, #1
 800ae3a:	bfda      	itte	le
 800ae3c:	fb02 3301 	mlale	r3, r2, r1, r3
 800ae40:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800ae42:	fb02 3707 	mlagt	r7, r2, r7, r3
 800ae46:	f109 0901 	add.w	r9, r9, #1
 800ae4a:	9019      	str	r0, [sp, #100]	@ 0x64
 800ae4c:	e7bf      	b.n	800adce <_strtod_l+0x146>
 800ae4e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ae50:	1c5a      	adds	r2, r3, #1
 800ae52:	9219      	str	r2, [sp, #100]	@ 0x64
 800ae54:	785a      	ldrb	r2, [r3, #1]
 800ae56:	f1b9 0f00 	cmp.w	r9, #0
 800ae5a:	d03b      	beq.n	800aed4 <_strtod_l+0x24c>
 800ae5c:	900a      	str	r0, [sp, #40]	@ 0x28
 800ae5e:	464d      	mov	r5, r9
 800ae60:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800ae64:	2b09      	cmp	r3, #9
 800ae66:	d912      	bls.n	800ae8e <_strtod_l+0x206>
 800ae68:	2301      	movs	r3, #1
 800ae6a:	e7c2      	b.n	800adf2 <_strtod_l+0x16a>
 800ae6c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ae6e:	1c5a      	adds	r2, r3, #1
 800ae70:	9219      	str	r2, [sp, #100]	@ 0x64
 800ae72:	785a      	ldrb	r2, [r3, #1]
 800ae74:	3001      	adds	r0, #1
 800ae76:	2a30      	cmp	r2, #48	@ 0x30
 800ae78:	d0f8      	beq.n	800ae6c <_strtod_l+0x1e4>
 800ae7a:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800ae7e:	2b08      	cmp	r3, #8
 800ae80:	f200 84d2 	bhi.w	800b828 <_strtod_l+0xba0>
 800ae84:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ae86:	900a      	str	r0, [sp, #40]	@ 0x28
 800ae88:	2000      	movs	r0, #0
 800ae8a:	930c      	str	r3, [sp, #48]	@ 0x30
 800ae8c:	4605      	mov	r5, r0
 800ae8e:	3a30      	subs	r2, #48	@ 0x30
 800ae90:	f100 0301 	add.w	r3, r0, #1
 800ae94:	d018      	beq.n	800aec8 <_strtod_l+0x240>
 800ae96:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ae98:	4419      	add	r1, r3
 800ae9a:	910a      	str	r1, [sp, #40]	@ 0x28
 800ae9c:	462e      	mov	r6, r5
 800ae9e:	f04f 0e0a 	mov.w	lr, #10
 800aea2:	1c71      	adds	r1, r6, #1
 800aea4:	eba1 0c05 	sub.w	ip, r1, r5
 800aea8:	4563      	cmp	r3, ip
 800aeaa:	dc15      	bgt.n	800aed8 <_strtod_l+0x250>
 800aeac:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800aeb0:	182b      	adds	r3, r5, r0
 800aeb2:	2b08      	cmp	r3, #8
 800aeb4:	f105 0501 	add.w	r5, r5, #1
 800aeb8:	4405      	add	r5, r0
 800aeba:	dc1a      	bgt.n	800aef2 <_strtod_l+0x26a>
 800aebc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800aebe:	230a      	movs	r3, #10
 800aec0:	fb03 2301 	mla	r3, r3, r1, r2
 800aec4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800aec6:	2300      	movs	r3, #0
 800aec8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800aeca:	1c51      	adds	r1, r2, #1
 800aecc:	9119      	str	r1, [sp, #100]	@ 0x64
 800aece:	7852      	ldrb	r2, [r2, #1]
 800aed0:	4618      	mov	r0, r3
 800aed2:	e7c5      	b.n	800ae60 <_strtod_l+0x1d8>
 800aed4:	4648      	mov	r0, r9
 800aed6:	e7ce      	b.n	800ae76 <_strtod_l+0x1ee>
 800aed8:	2e08      	cmp	r6, #8
 800aeda:	dc05      	bgt.n	800aee8 <_strtod_l+0x260>
 800aedc:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800aede:	fb0e f606 	mul.w	r6, lr, r6
 800aee2:	960b      	str	r6, [sp, #44]	@ 0x2c
 800aee4:	460e      	mov	r6, r1
 800aee6:	e7dc      	b.n	800aea2 <_strtod_l+0x21a>
 800aee8:	2910      	cmp	r1, #16
 800aeea:	bfd8      	it	le
 800aeec:	fb0e f707 	mulle.w	r7, lr, r7
 800aef0:	e7f8      	b.n	800aee4 <_strtod_l+0x25c>
 800aef2:	2b0f      	cmp	r3, #15
 800aef4:	bfdc      	itt	le
 800aef6:	230a      	movle	r3, #10
 800aef8:	fb03 2707 	mlale	r7, r3, r7, r2
 800aefc:	e7e3      	b.n	800aec6 <_strtod_l+0x23e>
 800aefe:	2300      	movs	r3, #0
 800af00:	930a      	str	r3, [sp, #40]	@ 0x28
 800af02:	2301      	movs	r3, #1
 800af04:	e77a      	b.n	800adfc <_strtod_l+0x174>
 800af06:	f04f 0c00 	mov.w	ip, #0
 800af0a:	1ca2      	adds	r2, r4, #2
 800af0c:	9219      	str	r2, [sp, #100]	@ 0x64
 800af0e:	78a2      	ldrb	r2, [r4, #2]
 800af10:	e782      	b.n	800ae18 <_strtod_l+0x190>
 800af12:	f04f 0c01 	mov.w	ip, #1
 800af16:	e7f8      	b.n	800af0a <_strtod_l+0x282>
 800af18:	0800cfe4 	.word	0x0800cfe4
 800af1c:	0800ce18 	.word	0x0800ce18
 800af20:	7ff00000 	.word	0x7ff00000
 800af24:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800af26:	1c51      	adds	r1, r2, #1
 800af28:	9119      	str	r1, [sp, #100]	@ 0x64
 800af2a:	7852      	ldrb	r2, [r2, #1]
 800af2c:	2a30      	cmp	r2, #48	@ 0x30
 800af2e:	d0f9      	beq.n	800af24 <_strtod_l+0x29c>
 800af30:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800af34:	2908      	cmp	r1, #8
 800af36:	f63f af75 	bhi.w	800ae24 <_strtod_l+0x19c>
 800af3a:	3a30      	subs	r2, #48	@ 0x30
 800af3c:	9209      	str	r2, [sp, #36]	@ 0x24
 800af3e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800af40:	920f      	str	r2, [sp, #60]	@ 0x3c
 800af42:	f04f 080a 	mov.w	r8, #10
 800af46:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800af48:	1c56      	adds	r6, r2, #1
 800af4a:	9619      	str	r6, [sp, #100]	@ 0x64
 800af4c:	7852      	ldrb	r2, [r2, #1]
 800af4e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800af52:	f1be 0f09 	cmp.w	lr, #9
 800af56:	d939      	bls.n	800afcc <_strtod_l+0x344>
 800af58:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800af5a:	1a76      	subs	r6, r6, r1
 800af5c:	2e08      	cmp	r6, #8
 800af5e:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800af62:	dc03      	bgt.n	800af6c <_strtod_l+0x2e4>
 800af64:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800af66:	4588      	cmp	r8, r1
 800af68:	bfa8      	it	ge
 800af6a:	4688      	movge	r8, r1
 800af6c:	f1bc 0f00 	cmp.w	ip, #0
 800af70:	d001      	beq.n	800af76 <_strtod_l+0x2ee>
 800af72:	f1c8 0800 	rsb	r8, r8, #0
 800af76:	2d00      	cmp	r5, #0
 800af78:	d14e      	bne.n	800b018 <_strtod_l+0x390>
 800af7a:	9908      	ldr	r1, [sp, #32]
 800af7c:	4308      	orrs	r0, r1
 800af7e:	f47f aebc 	bne.w	800acfa <_strtod_l+0x72>
 800af82:	2b00      	cmp	r3, #0
 800af84:	f47f aed4 	bne.w	800ad30 <_strtod_l+0xa8>
 800af88:	2a69      	cmp	r2, #105	@ 0x69
 800af8a:	d028      	beq.n	800afde <_strtod_l+0x356>
 800af8c:	dc25      	bgt.n	800afda <_strtod_l+0x352>
 800af8e:	2a49      	cmp	r2, #73	@ 0x49
 800af90:	d025      	beq.n	800afde <_strtod_l+0x356>
 800af92:	2a4e      	cmp	r2, #78	@ 0x4e
 800af94:	f47f aecc 	bne.w	800ad30 <_strtod_l+0xa8>
 800af98:	499a      	ldr	r1, [pc, #616]	@ (800b204 <_strtod_l+0x57c>)
 800af9a:	a819      	add	r0, sp, #100	@ 0x64
 800af9c:	f001 fb38 	bl	800c610 <__match>
 800afa0:	2800      	cmp	r0, #0
 800afa2:	f43f aec5 	beq.w	800ad30 <_strtod_l+0xa8>
 800afa6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800afa8:	781b      	ldrb	r3, [r3, #0]
 800afaa:	2b28      	cmp	r3, #40	@ 0x28
 800afac:	d12e      	bne.n	800b00c <_strtod_l+0x384>
 800afae:	4996      	ldr	r1, [pc, #600]	@ (800b208 <_strtod_l+0x580>)
 800afb0:	aa1c      	add	r2, sp, #112	@ 0x70
 800afb2:	a819      	add	r0, sp, #100	@ 0x64
 800afb4:	f001 fb40 	bl	800c638 <__hexnan>
 800afb8:	2805      	cmp	r0, #5
 800afba:	d127      	bne.n	800b00c <_strtod_l+0x384>
 800afbc:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800afbe:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800afc2:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800afc6:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800afca:	e696      	b.n	800acfa <_strtod_l+0x72>
 800afcc:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800afce:	fb08 2101 	mla	r1, r8, r1, r2
 800afd2:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800afd6:	9209      	str	r2, [sp, #36]	@ 0x24
 800afd8:	e7b5      	b.n	800af46 <_strtod_l+0x2be>
 800afda:	2a6e      	cmp	r2, #110	@ 0x6e
 800afdc:	e7da      	b.n	800af94 <_strtod_l+0x30c>
 800afde:	498b      	ldr	r1, [pc, #556]	@ (800b20c <_strtod_l+0x584>)
 800afe0:	a819      	add	r0, sp, #100	@ 0x64
 800afe2:	f001 fb15 	bl	800c610 <__match>
 800afe6:	2800      	cmp	r0, #0
 800afe8:	f43f aea2 	beq.w	800ad30 <_strtod_l+0xa8>
 800afec:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800afee:	4988      	ldr	r1, [pc, #544]	@ (800b210 <_strtod_l+0x588>)
 800aff0:	3b01      	subs	r3, #1
 800aff2:	a819      	add	r0, sp, #100	@ 0x64
 800aff4:	9319      	str	r3, [sp, #100]	@ 0x64
 800aff6:	f001 fb0b 	bl	800c610 <__match>
 800affa:	b910      	cbnz	r0, 800b002 <_strtod_l+0x37a>
 800affc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800affe:	3301      	adds	r3, #1
 800b000:	9319      	str	r3, [sp, #100]	@ 0x64
 800b002:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 800b220 <_strtod_l+0x598>
 800b006:	f04f 0a00 	mov.w	sl, #0
 800b00a:	e676      	b.n	800acfa <_strtod_l+0x72>
 800b00c:	4881      	ldr	r0, [pc, #516]	@ (800b214 <_strtod_l+0x58c>)
 800b00e:	f001 f83b 	bl	800c088 <nan>
 800b012:	ec5b ab10 	vmov	sl, fp, d0
 800b016:	e670      	b.n	800acfa <_strtod_l+0x72>
 800b018:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b01a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800b01c:	eba8 0303 	sub.w	r3, r8, r3
 800b020:	f1b9 0f00 	cmp.w	r9, #0
 800b024:	bf08      	it	eq
 800b026:	46a9      	moveq	r9, r5
 800b028:	2d10      	cmp	r5, #16
 800b02a:	9309      	str	r3, [sp, #36]	@ 0x24
 800b02c:	462c      	mov	r4, r5
 800b02e:	bfa8      	it	ge
 800b030:	2410      	movge	r4, #16
 800b032:	f7f5 fa97 	bl	8000564 <__aeabi_ui2d>
 800b036:	2d09      	cmp	r5, #9
 800b038:	4682      	mov	sl, r0
 800b03a:	468b      	mov	fp, r1
 800b03c:	dc13      	bgt.n	800b066 <_strtod_l+0x3de>
 800b03e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b040:	2b00      	cmp	r3, #0
 800b042:	f43f ae5a 	beq.w	800acfa <_strtod_l+0x72>
 800b046:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b048:	dd78      	ble.n	800b13c <_strtod_l+0x4b4>
 800b04a:	2b16      	cmp	r3, #22
 800b04c:	dc5f      	bgt.n	800b10e <_strtod_l+0x486>
 800b04e:	4972      	ldr	r1, [pc, #456]	@ (800b218 <_strtod_l+0x590>)
 800b050:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b054:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b058:	4652      	mov	r2, sl
 800b05a:	465b      	mov	r3, fp
 800b05c:	f7f5 fafc 	bl	8000658 <__aeabi_dmul>
 800b060:	4682      	mov	sl, r0
 800b062:	468b      	mov	fp, r1
 800b064:	e649      	b.n	800acfa <_strtod_l+0x72>
 800b066:	4b6c      	ldr	r3, [pc, #432]	@ (800b218 <_strtod_l+0x590>)
 800b068:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b06c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800b070:	f7f5 faf2 	bl	8000658 <__aeabi_dmul>
 800b074:	4682      	mov	sl, r0
 800b076:	4638      	mov	r0, r7
 800b078:	468b      	mov	fp, r1
 800b07a:	f7f5 fa73 	bl	8000564 <__aeabi_ui2d>
 800b07e:	4602      	mov	r2, r0
 800b080:	460b      	mov	r3, r1
 800b082:	4650      	mov	r0, sl
 800b084:	4659      	mov	r1, fp
 800b086:	f7f5 f931 	bl	80002ec <__adddf3>
 800b08a:	2d0f      	cmp	r5, #15
 800b08c:	4682      	mov	sl, r0
 800b08e:	468b      	mov	fp, r1
 800b090:	ddd5      	ble.n	800b03e <_strtod_l+0x3b6>
 800b092:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b094:	1b2c      	subs	r4, r5, r4
 800b096:	441c      	add	r4, r3
 800b098:	2c00      	cmp	r4, #0
 800b09a:	f340 8093 	ble.w	800b1c4 <_strtod_l+0x53c>
 800b09e:	f014 030f 	ands.w	r3, r4, #15
 800b0a2:	d00a      	beq.n	800b0ba <_strtod_l+0x432>
 800b0a4:	495c      	ldr	r1, [pc, #368]	@ (800b218 <_strtod_l+0x590>)
 800b0a6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b0aa:	4652      	mov	r2, sl
 800b0ac:	465b      	mov	r3, fp
 800b0ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b0b2:	f7f5 fad1 	bl	8000658 <__aeabi_dmul>
 800b0b6:	4682      	mov	sl, r0
 800b0b8:	468b      	mov	fp, r1
 800b0ba:	f034 040f 	bics.w	r4, r4, #15
 800b0be:	d073      	beq.n	800b1a8 <_strtod_l+0x520>
 800b0c0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800b0c4:	dd49      	ble.n	800b15a <_strtod_l+0x4d2>
 800b0c6:	2400      	movs	r4, #0
 800b0c8:	46a0      	mov	r8, r4
 800b0ca:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b0cc:	46a1      	mov	r9, r4
 800b0ce:	9a05      	ldr	r2, [sp, #20]
 800b0d0:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 800b220 <_strtod_l+0x598>
 800b0d4:	2322      	movs	r3, #34	@ 0x22
 800b0d6:	6013      	str	r3, [r2, #0]
 800b0d8:	f04f 0a00 	mov.w	sl, #0
 800b0dc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	f43f ae0b 	beq.w	800acfa <_strtod_l+0x72>
 800b0e4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b0e6:	9805      	ldr	r0, [sp, #20]
 800b0e8:	f7ff f946 	bl	800a378 <_Bfree>
 800b0ec:	9805      	ldr	r0, [sp, #20]
 800b0ee:	4649      	mov	r1, r9
 800b0f0:	f7ff f942 	bl	800a378 <_Bfree>
 800b0f4:	9805      	ldr	r0, [sp, #20]
 800b0f6:	4641      	mov	r1, r8
 800b0f8:	f7ff f93e 	bl	800a378 <_Bfree>
 800b0fc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b0fe:	9805      	ldr	r0, [sp, #20]
 800b100:	f7ff f93a 	bl	800a378 <_Bfree>
 800b104:	9805      	ldr	r0, [sp, #20]
 800b106:	4621      	mov	r1, r4
 800b108:	f7ff f936 	bl	800a378 <_Bfree>
 800b10c:	e5f5      	b.n	800acfa <_strtod_l+0x72>
 800b10e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b110:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800b114:	4293      	cmp	r3, r2
 800b116:	dbbc      	blt.n	800b092 <_strtod_l+0x40a>
 800b118:	4c3f      	ldr	r4, [pc, #252]	@ (800b218 <_strtod_l+0x590>)
 800b11a:	f1c5 050f 	rsb	r5, r5, #15
 800b11e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800b122:	4652      	mov	r2, sl
 800b124:	465b      	mov	r3, fp
 800b126:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b12a:	f7f5 fa95 	bl	8000658 <__aeabi_dmul>
 800b12e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b130:	1b5d      	subs	r5, r3, r5
 800b132:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800b136:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b13a:	e78f      	b.n	800b05c <_strtod_l+0x3d4>
 800b13c:	3316      	adds	r3, #22
 800b13e:	dba8      	blt.n	800b092 <_strtod_l+0x40a>
 800b140:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b142:	eba3 0808 	sub.w	r8, r3, r8
 800b146:	4b34      	ldr	r3, [pc, #208]	@ (800b218 <_strtod_l+0x590>)
 800b148:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800b14c:	e9d8 2300 	ldrd	r2, r3, [r8]
 800b150:	4650      	mov	r0, sl
 800b152:	4659      	mov	r1, fp
 800b154:	f7f5 fbaa 	bl	80008ac <__aeabi_ddiv>
 800b158:	e782      	b.n	800b060 <_strtod_l+0x3d8>
 800b15a:	2300      	movs	r3, #0
 800b15c:	4f2f      	ldr	r7, [pc, #188]	@ (800b21c <_strtod_l+0x594>)
 800b15e:	1124      	asrs	r4, r4, #4
 800b160:	4650      	mov	r0, sl
 800b162:	4659      	mov	r1, fp
 800b164:	461e      	mov	r6, r3
 800b166:	2c01      	cmp	r4, #1
 800b168:	dc21      	bgt.n	800b1ae <_strtod_l+0x526>
 800b16a:	b10b      	cbz	r3, 800b170 <_strtod_l+0x4e8>
 800b16c:	4682      	mov	sl, r0
 800b16e:	468b      	mov	fp, r1
 800b170:	492a      	ldr	r1, [pc, #168]	@ (800b21c <_strtod_l+0x594>)
 800b172:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800b176:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800b17a:	4652      	mov	r2, sl
 800b17c:	465b      	mov	r3, fp
 800b17e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b182:	f7f5 fa69 	bl	8000658 <__aeabi_dmul>
 800b186:	4b26      	ldr	r3, [pc, #152]	@ (800b220 <_strtod_l+0x598>)
 800b188:	460a      	mov	r2, r1
 800b18a:	400b      	ands	r3, r1
 800b18c:	4925      	ldr	r1, [pc, #148]	@ (800b224 <_strtod_l+0x59c>)
 800b18e:	428b      	cmp	r3, r1
 800b190:	4682      	mov	sl, r0
 800b192:	d898      	bhi.n	800b0c6 <_strtod_l+0x43e>
 800b194:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800b198:	428b      	cmp	r3, r1
 800b19a:	bf86      	itte	hi
 800b19c:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 800b228 <_strtod_l+0x5a0>
 800b1a0:	f04f 3aff 	movhi.w	sl, #4294967295
 800b1a4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800b1a8:	2300      	movs	r3, #0
 800b1aa:	9308      	str	r3, [sp, #32]
 800b1ac:	e076      	b.n	800b29c <_strtod_l+0x614>
 800b1ae:	07e2      	lsls	r2, r4, #31
 800b1b0:	d504      	bpl.n	800b1bc <_strtod_l+0x534>
 800b1b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b1b6:	f7f5 fa4f 	bl	8000658 <__aeabi_dmul>
 800b1ba:	2301      	movs	r3, #1
 800b1bc:	3601      	adds	r6, #1
 800b1be:	1064      	asrs	r4, r4, #1
 800b1c0:	3708      	adds	r7, #8
 800b1c2:	e7d0      	b.n	800b166 <_strtod_l+0x4de>
 800b1c4:	d0f0      	beq.n	800b1a8 <_strtod_l+0x520>
 800b1c6:	4264      	negs	r4, r4
 800b1c8:	f014 020f 	ands.w	r2, r4, #15
 800b1cc:	d00a      	beq.n	800b1e4 <_strtod_l+0x55c>
 800b1ce:	4b12      	ldr	r3, [pc, #72]	@ (800b218 <_strtod_l+0x590>)
 800b1d0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b1d4:	4650      	mov	r0, sl
 800b1d6:	4659      	mov	r1, fp
 800b1d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1dc:	f7f5 fb66 	bl	80008ac <__aeabi_ddiv>
 800b1e0:	4682      	mov	sl, r0
 800b1e2:	468b      	mov	fp, r1
 800b1e4:	1124      	asrs	r4, r4, #4
 800b1e6:	d0df      	beq.n	800b1a8 <_strtod_l+0x520>
 800b1e8:	2c1f      	cmp	r4, #31
 800b1ea:	dd1f      	ble.n	800b22c <_strtod_l+0x5a4>
 800b1ec:	2400      	movs	r4, #0
 800b1ee:	46a0      	mov	r8, r4
 800b1f0:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b1f2:	46a1      	mov	r9, r4
 800b1f4:	9a05      	ldr	r2, [sp, #20]
 800b1f6:	2322      	movs	r3, #34	@ 0x22
 800b1f8:	f04f 0a00 	mov.w	sl, #0
 800b1fc:	f04f 0b00 	mov.w	fp, #0
 800b200:	6013      	str	r3, [r2, #0]
 800b202:	e76b      	b.n	800b0dc <_strtod_l+0x454>
 800b204:	0800cd06 	.word	0x0800cd06
 800b208:	0800cfd0 	.word	0x0800cfd0
 800b20c:	0800ccfe 	.word	0x0800ccfe
 800b210:	0800cd35 	.word	0x0800cd35
 800b214:	0800ce6e 	.word	0x0800ce6e
 800b218:	0800cf08 	.word	0x0800cf08
 800b21c:	0800cee0 	.word	0x0800cee0
 800b220:	7ff00000 	.word	0x7ff00000
 800b224:	7ca00000 	.word	0x7ca00000
 800b228:	7fefffff 	.word	0x7fefffff
 800b22c:	f014 0310 	ands.w	r3, r4, #16
 800b230:	bf18      	it	ne
 800b232:	236a      	movne	r3, #106	@ 0x6a
 800b234:	4ea9      	ldr	r6, [pc, #676]	@ (800b4dc <_strtod_l+0x854>)
 800b236:	9308      	str	r3, [sp, #32]
 800b238:	4650      	mov	r0, sl
 800b23a:	4659      	mov	r1, fp
 800b23c:	2300      	movs	r3, #0
 800b23e:	07e7      	lsls	r7, r4, #31
 800b240:	d504      	bpl.n	800b24c <_strtod_l+0x5c4>
 800b242:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b246:	f7f5 fa07 	bl	8000658 <__aeabi_dmul>
 800b24a:	2301      	movs	r3, #1
 800b24c:	1064      	asrs	r4, r4, #1
 800b24e:	f106 0608 	add.w	r6, r6, #8
 800b252:	d1f4      	bne.n	800b23e <_strtod_l+0x5b6>
 800b254:	b10b      	cbz	r3, 800b25a <_strtod_l+0x5d2>
 800b256:	4682      	mov	sl, r0
 800b258:	468b      	mov	fp, r1
 800b25a:	9b08      	ldr	r3, [sp, #32]
 800b25c:	b1b3      	cbz	r3, 800b28c <_strtod_l+0x604>
 800b25e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800b262:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800b266:	2b00      	cmp	r3, #0
 800b268:	4659      	mov	r1, fp
 800b26a:	dd0f      	ble.n	800b28c <_strtod_l+0x604>
 800b26c:	2b1f      	cmp	r3, #31
 800b26e:	dd56      	ble.n	800b31e <_strtod_l+0x696>
 800b270:	2b34      	cmp	r3, #52	@ 0x34
 800b272:	bfde      	ittt	le
 800b274:	f04f 33ff 	movle.w	r3, #4294967295
 800b278:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800b27c:	4093      	lslle	r3, r2
 800b27e:	f04f 0a00 	mov.w	sl, #0
 800b282:	bfcc      	ite	gt
 800b284:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800b288:	ea03 0b01 	andle.w	fp, r3, r1
 800b28c:	2200      	movs	r2, #0
 800b28e:	2300      	movs	r3, #0
 800b290:	4650      	mov	r0, sl
 800b292:	4659      	mov	r1, fp
 800b294:	f7f5 fc48 	bl	8000b28 <__aeabi_dcmpeq>
 800b298:	2800      	cmp	r0, #0
 800b29a:	d1a7      	bne.n	800b1ec <_strtod_l+0x564>
 800b29c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b29e:	9300      	str	r3, [sp, #0]
 800b2a0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800b2a2:	9805      	ldr	r0, [sp, #20]
 800b2a4:	462b      	mov	r3, r5
 800b2a6:	464a      	mov	r2, r9
 800b2a8:	f7ff f8ce 	bl	800a448 <__s2b>
 800b2ac:	900b      	str	r0, [sp, #44]	@ 0x2c
 800b2ae:	2800      	cmp	r0, #0
 800b2b0:	f43f af09 	beq.w	800b0c6 <_strtod_l+0x43e>
 800b2b4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b2b6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b2b8:	2a00      	cmp	r2, #0
 800b2ba:	eba3 0308 	sub.w	r3, r3, r8
 800b2be:	bfa8      	it	ge
 800b2c0:	2300      	movge	r3, #0
 800b2c2:	9312      	str	r3, [sp, #72]	@ 0x48
 800b2c4:	2400      	movs	r4, #0
 800b2c6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800b2ca:	9316      	str	r3, [sp, #88]	@ 0x58
 800b2cc:	46a0      	mov	r8, r4
 800b2ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b2d0:	9805      	ldr	r0, [sp, #20]
 800b2d2:	6859      	ldr	r1, [r3, #4]
 800b2d4:	f7ff f810 	bl	800a2f8 <_Balloc>
 800b2d8:	4681      	mov	r9, r0
 800b2da:	2800      	cmp	r0, #0
 800b2dc:	f43f aef7 	beq.w	800b0ce <_strtod_l+0x446>
 800b2e0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b2e2:	691a      	ldr	r2, [r3, #16]
 800b2e4:	3202      	adds	r2, #2
 800b2e6:	f103 010c 	add.w	r1, r3, #12
 800b2ea:	0092      	lsls	r2, r2, #2
 800b2ec:	300c      	adds	r0, #12
 800b2ee:	f000 febb 	bl	800c068 <memcpy>
 800b2f2:	ec4b ab10 	vmov	d0, sl, fp
 800b2f6:	9805      	ldr	r0, [sp, #20]
 800b2f8:	aa1c      	add	r2, sp, #112	@ 0x70
 800b2fa:	a91b      	add	r1, sp, #108	@ 0x6c
 800b2fc:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800b300:	f7ff fbd6 	bl	800aab0 <__d2b>
 800b304:	901a      	str	r0, [sp, #104]	@ 0x68
 800b306:	2800      	cmp	r0, #0
 800b308:	f43f aee1 	beq.w	800b0ce <_strtod_l+0x446>
 800b30c:	9805      	ldr	r0, [sp, #20]
 800b30e:	2101      	movs	r1, #1
 800b310:	f7ff f930 	bl	800a574 <__i2b>
 800b314:	4680      	mov	r8, r0
 800b316:	b948      	cbnz	r0, 800b32c <_strtod_l+0x6a4>
 800b318:	f04f 0800 	mov.w	r8, #0
 800b31c:	e6d7      	b.n	800b0ce <_strtod_l+0x446>
 800b31e:	f04f 32ff 	mov.w	r2, #4294967295
 800b322:	fa02 f303 	lsl.w	r3, r2, r3
 800b326:	ea03 0a0a 	and.w	sl, r3, sl
 800b32a:	e7af      	b.n	800b28c <_strtod_l+0x604>
 800b32c:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800b32e:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800b330:	2d00      	cmp	r5, #0
 800b332:	bfab      	itete	ge
 800b334:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800b336:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800b338:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800b33a:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800b33c:	bfac      	ite	ge
 800b33e:	18ef      	addge	r7, r5, r3
 800b340:	1b5e      	sublt	r6, r3, r5
 800b342:	9b08      	ldr	r3, [sp, #32]
 800b344:	1aed      	subs	r5, r5, r3
 800b346:	4415      	add	r5, r2
 800b348:	4b65      	ldr	r3, [pc, #404]	@ (800b4e0 <_strtod_l+0x858>)
 800b34a:	3d01      	subs	r5, #1
 800b34c:	429d      	cmp	r5, r3
 800b34e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800b352:	da50      	bge.n	800b3f6 <_strtod_l+0x76e>
 800b354:	1b5b      	subs	r3, r3, r5
 800b356:	2b1f      	cmp	r3, #31
 800b358:	eba2 0203 	sub.w	r2, r2, r3
 800b35c:	f04f 0101 	mov.w	r1, #1
 800b360:	dc3d      	bgt.n	800b3de <_strtod_l+0x756>
 800b362:	fa01 f303 	lsl.w	r3, r1, r3
 800b366:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b368:	2300      	movs	r3, #0
 800b36a:	9310      	str	r3, [sp, #64]	@ 0x40
 800b36c:	18bd      	adds	r5, r7, r2
 800b36e:	9b08      	ldr	r3, [sp, #32]
 800b370:	42af      	cmp	r7, r5
 800b372:	4416      	add	r6, r2
 800b374:	441e      	add	r6, r3
 800b376:	463b      	mov	r3, r7
 800b378:	bfa8      	it	ge
 800b37a:	462b      	movge	r3, r5
 800b37c:	42b3      	cmp	r3, r6
 800b37e:	bfa8      	it	ge
 800b380:	4633      	movge	r3, r6
 800b382:	2b00      	cmp	r3, #0
 800b384:	bfc2      	ittt	gt
 800b386:	1aed      	subgt	r5, r5, r3
 800b388:	1af6      	subgt	r6, r6, r3
 800b38a:	1aff      	subgt	r7, r7, r3
 800b38c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b38e:	2b00      	cmp	r3, #0
 800b390:	dd16      	ble.n	800b3c0 <_strtod_l+0x738>
 800b392:	4641      	mov	r1, r8
 800b394:	9805      	ldr	r0, [sp, #20]
 800b396:	461a      	mov	r2, r3
 800b398:	f7ff f9a4 	bl	800a6e4 <__pow5mult>
 800b39c:	4680      	mov	r8, r0
 800b39e:	2800      	cmp	r0, #0
 800b3a0:	d0ba      	beq.n	800b318 <_strtod_l+0x690>
 800b3a2:	4601      	mov	r1, r0
 800b3a4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800b3a6:	9805      	ldr	r0, [sp, #20]
 800b3a8:	f7ff f8fa 	bl	800a5a0 <__multiply>
 800b3ac:	900a      	str	r0, [sp, #40]	@ 0x28
 800b3ae:	2800      	cmp	r0, #0
 800b3b0:	f43f ae8d 	beq.w	800b0ce <_strtod_l+0x446>
 800b3b4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b3b6:	9805      	ldr	r0, [sp, #20]
 800b3b8:	f7fe ffde 	bl	800a378 <_Bfree>
 800b3bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b3be:	931a      	str	r3, [sp, #104]	@ 0x68
 800b3c0:	2d00      	cmp	r5, #0
 800b3c2:	dc1d      	bgt.n	800b400 <_strtod_l+0x778>
 800b3c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	dd23      	ble.n	800b412 <_strtod_l+0x78a>
 800b3ca:	4649      	mov	r1, r9
 800b3cc:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800b3ce:	9805      	ldr	r0, [sp, #20]
 800b3d0:	f7ff f988 	bl	800a6e4 <__pow5mult>
 800b3d4:	4681      	mov	r9, r0
 800b3d6:	b9e0      	cbnz	r0, 800b412 <_strtod_l+0x78a>
 800b3d8:	f04f 0900 	mov.w	r9, #0
 800b3dc:	e677      	b.n	800b0ce <_strtod_l+0x446>
 800b3de:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800b3e2:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800b3e6:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800b3ea:	35e2      	adds	r5, #226	@ 0xe2
 800b3ec:	fa01 f305 	lsl.w	r3, r1, r5
 800b3f0:	9310      	str	r3, [sp, #64]	@ 0x40
 800b3f2:	9113      	str	r1, [sp, #76]	@ 0x4c
 800b3f4:	e7ba      	b.n	800b36c <_strtod_l+0x6e4>
 800b3f6:	2300      	movs	r3, #0
 800b3f8:	9310      	str	r3, [sp, #64]	@ 0x40
 800b3fa:	2301      	movs	r3, #1
 800b3fc:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b3fe:	e7b5      	b.n	800b36c <_strtod_l+0x6e4>
 800b400:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b402:	9805      	ldr	r0, [sp, #20]
 800b404:	462a      	mov	r2, r5
 800b406:	f7ff f9c7 	bl	800a798 <__lshift>
 800b40a:	901a      	str	r0, [sp, #104]	@ 0x68
 800b40c:	2800      	cmp	r0, #0
 800b40e:	d1d9      	bne.n	800b3c4 <_strtod_l+0x73c>
 800b410:	e65d      	b.n	800b0ce <_strtod_l+0x446>
 800b412:	2e00      	cmp	r6, #0
 800b414:	dd07      	ble.n	800b426 <_strtod_l+0x79e>
 800b416:	4649      	mov	r1, r9
 800b418:	9805      	ldr	r0, [sp, #20]
 800b41a:	4632      	mov	r2, r6
 800b41c:	f7ff f9bc 	bl	800a798 <__lshift>
 800b420:	4681      	mov	r9, r0
 800b422:	2800      	cmp	r0, #0
 800b424:	d0d8      	beq.n	800b3d8 <_strtod_l+0x750>
 800b426:	2f00      	cmp	r7, #0
 800b428:	dd08      	ble.n	800b43c <_strtod_l+0x7b4>
 800b42a:	4641      	mov	r1, r8
 800b42c:	9805      	ldr	r0, [sp, #20]
 800b42e:	463a      	mov	r2, r7
 800b430:	f7ff f9b2 	bl	800a798 <__lshift>
 800b434:	4680      	mov	r8, r0
 800b436:	2800      	cmp	r0, #0
 800b438:	f43f ae49 	beq.w	800b0ce <_strtod_l+0x446>
 800b43c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b43e:	9805      	ldr	r0, [sp, #20]
 800b440:	464a      	mov	r2, r9
 800b442:	f7ff fa31 	bl	800a8a8 <__mdiff>
 800b446:	4604      	mov	r4, r0
 800b448:	2800      	cmp	r0, #0
 800b44a:	f43f ae40 	beq.w	800b0ce <_strtod_l+0x446>
 800b44e:	68c3      	ldr	r3, [r0, #12]
 800b450:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b452:	2300      	movs	r3, #0
 800b454:	60c3      	str	r3, [r0, #12]
 800b456:	4641      	mov	r1, r8
 800b458:	f7ff fa0a 	bl	800a870 <__mcmp>
 800b45c:	2800      	cmp	r0, #0
 800b45e:	da45      	bge.n	800b4ec <_strtod_l+0x864>
 800b460:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b462:	ea53 030a 	orrs.w	r3, r3, sl
 800b466:	d16b      	bne.n	800b540 <_strtod_l+0x8b8>
 800b468:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d167      	bne.n	800b540 <_strtod_l+0x8b8>
 800b470:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b474:	0d1b      	lsrs	r3, r3, #20
 800b476:	051b      	lsls	r3, r3, #20
 800b478:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800b47c:	d960      	bls.n	800b540 <_strtod_l+0x8b8>
 800b47e:	6963      	ldr	r3, [r4, #20]
 800b480:	b913      	cbnz	r3, 800b488 <_strtod_l+0x800>
 800b482:	6923      	ldr	r3, [r4, #16]
 800b484:	2b01      	cmp	r3, #1
 800b486:	dd5b      	ble.n	800b540 <_strtod_l+0x8b8>
 800b488:	4621      	mov	r1, r4
 800b48a:	2201      	movs	r2, #1
 800b48c:	9805      	ldr	r0, [sp, #20]
 800b48e:	f7ff f983 	bl	800a798 <__lshift>
 800b492:	4641      	mov	r1, r8
 800b494:	4604      	mov	r4, r0
 800b496:	f7ff f9eb 	bl	800a870 <__mcmp>
 800b49a:	2800      	cmp	r0, #0
 800b49c:	dd50      	ble.n	800b540 <_strtod_l+0x8b8>
 800b49e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b4a2:	9a08      	ldr	r2, [sp, #32]
 800b4a4:	0d1b      	lsrs	r3, r3, #20
 800b4a6:	051b      	lsls	r3, r3, #20
 800b4a8:	2a00      	cmp	r2, #0
 800b4aa:	d06a      	beq.n	800b582 <_strtod_l+0x8fa>
 800b4ac:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800b4b0:	d867      	bhi.n	800b582 <_strtod_l+0x8fa>
 800b4b2:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800b4b6:	f67f ae9d 	bls.w	800b1f4 <_strtod_l+0x56c>
 800b4ba:	4b0a      	ldr	r3, [pc, #40]	@ (800b4e4 <_strtod_l+0x85c>)
 800b4bc:	4650      	mov	r0, sl
 800b4be:	4659      	mov	r1, fp
 800b4c0:	2200      	movs	r2, #0
 800b4c2:	f7f5 f8c9 	bl	8000658 <__aeabi_dmul>
 800b4c6:	4b08      	ldr	r3, [pc, #32]	@ (800b4e8 <_strtod_l+0x860>)
 800b4c8:	400b      	ands	r3, r1
 800b4ca:	4682      	mov	sl, r0
 800b4cc:	468b      	mov	fp, r1
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	f47f ae08 	bne.w	800b0e4 <_strtod_l+0x45c>
 800b4d4:	9a05      	ldr	r2, [sp, #20]
 800b4d6:	2322      	movs	r3, #34	@ 0x22
 800b4d8:	6013      	str	r3, [r2, #0]
 800b4da:	e603      	b.n	800b0e4 <_strtod_l+0x45c>
 800b4dc:	0800cff8 	.word	0x0800cff8
 800b4e0:	fffffc02 	.word	0xfffffc02
 800b4e4:	39500000 	.word	0x39500000
 800b4e8:	7ff00000 	.word	0x7ff00000
 800b4ec:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800b4f0:	d165      	bne.n	800b5be <_strtod_l+0x936>
 800b4f2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800b4f4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b4f8:	b35a      	cbz	r2, 800b552 <_strtod_l+0x8ca>
 800b4fa:	4a9f      	ldr	r2, [pc, #636]	@ (800b778 <_strtod_l+0xaf0>)
 800b4fc:	4293      	cmp	r3, r2
 800b4fe:	d12b      	bne.n	800b558 <_strtod_l+0x8d0>
 800b500:	9b08      	ldr	r3, [sp, #32]
 800b502:	4651      	mov	r1, sl
 800b504:	b303      	cbz	r3, 800b548 <_strtod_l+0x8c0>
 800b506:	4b9d      	ldr	r3, [pc, #628]	@ (800b77c <_strtod_l+0xaf4>)
 800b508:	465a      	mov	r2, fp
 800b50a:	4013      	ands	r3, r2
 800b50c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800b510:	f04f 32ff 	mov.w	r2, #4294967295
 800b514:	d81b      	bhi.n	800b54e <_strtod_l+0x8c6>
 800b516:	0d1b      	lsrs	r3, r3, #20
 800b518:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800b51c:	fa02 f303 	lsl.w	r3, r2, r3
 800b520:	4299      	cmp	r1, r3
 800b522:	d119      	bne.n	800b558 <_strtod_l+0x8d0>
 800b524:	4b96      	ldr	r3, [pc, #600]	@ (800b780 <_strtod_l+0xaf8>)
 800b526:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b528:	429a      	cmp	r2, r3
 800b52a:	d102      	bne.n	800b532 <_strtod_l+0x8aa>
 800b52c:	3101      	adds	r1, #1
 800b52e:	f43f adce 	beq.w	800b0ce <_strtod_l+0x446>
 800b532:	4b92      	ldr	r3, [pc, #584]	@ (800b77c <_strtod_l+0xaf4>)
 800b534:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b536:	401a      	ands	r2, r3
 800b538:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800b53c:	f04f 0a00 	mov.w	sl, #0
 800b540:	9b08      	ldr	r3, [sp, #32]
 800b542:	2b00      	cmp	r3, #0
 800b544:	d1b9      	bne.n	800b4ba <_strtod_l+0x832>
 800b546:	e5cd      	b.n	800b0e4 <_strtod_l+0x45c>
 800b548:	f04f 33ff 	mov.w	r3, #4294967295
 800b54c:	e7e8      	b.n	800b520 <_strtod_l+0x898>
 800b54e:	4613      	mov	r3, r2
 800b550:	e7e6      	b.n	800b520 <_strtod_l+0x898>
 800b552:	ea53 030a 	orrs.w	r3, r3, sl
 800b556:	d0a2      	beq.n	800b49e <_strtod_l+0x816>
 800b558:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b55a:	b1db      	cbz	r3, 800b594 <_strtod_l+0x90c>
 800b55c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b55e:	4213      	tst	r3, r2
 800b560:	d0ee      	beq.n	800b540 <_strtod_l+0x8b8>
 800b562:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b564:	9a08      	ldr	r2, [sp, #32]
 800b566:	4650      	mov	r0, sl
 800b568:	4659      	mov	r1, fp
 800b56a:	b1bb      	cbz	r3, 800b59c <_strtod_l+0x914>
 800b56c:	f7ff fb6e 	bl	800ac4c <sulp>
 800b570:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b574:	ec53 2b10 	vmov	r2, r3, d0
 800b578:	f7f4 feb8 	bl	80002ec <__adddf3>
 800b57c:	4682      	mov	sl, r0
 800b57e:	468b      	mov	fp, r1
 800b580:	e7de      	b.n	800b540 <_strtod_l+0x8b8>
 800b582:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800b586:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800b58a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800b58e:	f04f 3aff 	mov.w	sl, #4294967295
 800b592:	e7d5      	b.n	800b540 <_strtod_l+0x8b8>
 800b594:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b596:	ea13 0f0a 	tst.w	r3, sl
 800b59a:	e7e1      	b.n	800b560 <_strtod_l+0x8d8>
 800b59c:	f7ff fb56 	bl	800ac4c <sulp>
 800b5a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b5a4:	ec53 2b10 	vmov	r2, r3, d0
 800b5a8:	f7f4 fe9e 	bl	80002e8 <__aeabi_dsub>
 800b5ac:	2200      	movs	r2, #0
 800b5ae:	2300      	movs	r3, #0
 800b5b0:	4682      	mov	sl, r0
 800b5b2:	468b      	mov	fp, r1
 800b5b4:	f7f5 fab8 	bl	8000b28 <__aeabi_dcmpeq>
 800b5b8:	2800      	cmp	r0, #0
 800b5ba:	d0c1      	beq.n	800b540 <_strtod_l+0x8b8>
 800b5bc:	e61a      	b.n	800b1f4 <_strtod_l+0x56c>
 800b5be:	4641      	mov	r1, r8
 800b5c0:	4620      	mov	r0, r4
 800b5c2:	f7ff facd 	bl	800ab60 <__ratio>
 800b5c6:	ec57 6b10 	vmov	r6, r7, d0
 800b5ca:	2200      	movs	r2, #0
 800b5cc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800b5d0:	4630      	mov	r0, r6
 800b5d2:	4639      	mov	r1, r7
 800b5d4:	f7f5 fabc 	bl	8000b50 <__aeabi_dcmple>
 800b5d8:	2800      	cmp	r0, #0
 800b5da:	d06f      	beq.n	800b6bc <_strtod_l+0xa34>
 800b5dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d17a      	bne.n	800b6d8 <_strtod_l+0xa50>
 800b5e2:	f1ba 0f00 	cmp.w	sl, #0
 800b5e6:	d158      	bne.n	800b69a <_strtod_l+0xa12>
 800b5e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b5ea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d15a      	bne.n	800b6a8 <_strtod_l+0xa20>
 800b5f2:	4b64      	ldr	r3, [pc, #400]	@ (800b784 <_strtod_l+0xafc>)
 800b5f4:	2200      	movs	r2, #0
 800b5f6:	4630      	mov	r0, r6
 800b5f8:	4639      	mov	r1, r7
 800b5fa:	f7f5 fa9f 	bl	8000b3c <__aeabi_dcmplt>
 800b5fe:	2800      	cmp	r0, #0
 800b600:	d159      	bne.n	800b6b6 <_strtod_l+0xa2e>
 800b602:	4630      	mov	r0, r6
 800b604:	4639      	mov	r1, r7
 800b606:	4b60      	ldr	r3, [pc, #384]	@ (800b788 <_strtod_l+0xb00>)
 800b608:	2200      	movs	r2, #0
 800b60a:	f7f5 f825 	bl	8000658 <__aeabi_dmul>
 800b60e:	4606      	mov	r6, r0
 800b610:	460f      	mov	r7, r1
 800b612:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800b616:	9606      	str	r6, [sp, #24]
 800b618:	9307      	str	r3, [sp, #28]
 800b61a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b61e:	4d57      	ldr	r5, [pc, #348]	@ (800b77c <_strtod_l+0xaf4>)
 800b620:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800b624:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b626:	401d      	ands	r5, r3
 800b628:	4b58      	ldr	r3, [pc, #352]	@ (800b78c <_strtod_l+0xb04>)
 800b62a:	429d      	cmp	r5, r3
 800b62c:	f040 80b2 	bne.w	800b794 <_strtod_l+0xb0c>
 800b630:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b632:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800b636:	ec4b ab10 	vmov	d0, sl, fp
 800b63a:	f7ff f9c9 	bl	800a9d0 <__ulp>
 800b63e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b642:	ec51 0b10 	vmov	r0, r1, d0
 800b646:	f7f5 f807 	bl	8000658 <__aeabi_dmul>
 800b64a:	4652      	mov	r2, sl
 800b64c:	465b      	mov	r3, fp
 800b64e:	f7f4 fe4d 	bl	80002ec <__adddf3>
 800b652:	460b      	mov	r3, r1
 800b654:	4949      	ldr	r1, [pc, #292]	@ (800b77c <_strtod_l+0xaf4>)
 800b656:	4a4e      	ldr	r2, [pc, #312]	@ (800b790 <_strtod_l+0xb08>)
 800b658:	4019      	ands	r1, r3
 800b65a:	4291      	cmp	r1, r2
 800b65c:	4682      	mov	sl, r0
 800b65e:	d942      	bls.n	800b6e6 <_strtod_l+0xa5e>
 800b660:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b662:	4b47      	ldr	r3, [pc, #284]	@ (800b780 <_strtod_l+0xaf8>)
 800b664:	429a      	cmp	r2, r3
 800b666:	d103      	bne.n	800b670 <_strtod_l+0x9e8>
 800b668:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b66a:	3301      	adds	r3, #1
 800b66c:	f43f ad2f 	beq.w	800b0ce <_strtod_l+0x446>
 800b670:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800b780 <_strtod_l+0xaf8>
 800b674:	f04f 3aff 	mov.w	sl, #4294967295
 800b678:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b67a:	9805      	ldr	r0, [sp, #20]
 800b67c:	f7fe fe7c 	bl	800a378 <_Bfree>
 800b680:	9805      	ldr	r0, [sp, #20]
 800b682:	4649      	mov	r1, r9
 800b684:	f7fe fe78 	bl	800a378 <_Bfree>
 800b688:	9805      	ldr	r0, [sp, #20]
 800b68a:	4641      	mov	r1, r8
 800b68c:	f7fe fe74 	bl	800a378 <_Bfree>
 800b690:	9805      	ldr	r0, [sp, #20]
 800b692:	4621      	mov	r1, r4
 800b694:	f7fe fe70 	bl	800a378 <_Bfree>
 800b698:	e619      	b.n	800b2ce <_strtod_l+0x646>
 800b69a:	f1ba 0f01 	cmp.w	sl, #1
 800b69e:	d103      	bne.n	800b6a8 <_strtod_l+0xa20>
 800b6a0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	f43f ada6 	beq.w	800b1f4 <_strtod_l+0x56c>
 800b6a8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800b758 <_strtod_l+0xad0>
 800b6ac:	4f35      	ldr	r7, [pc, #212]	@ (800b784 <_strtod_l+0xafc>)
 800b6ae:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b6b2:	2600      	movs	r6, #0
 800b6b4:	e7b1      	b.n	800b61a <_strtod_l+0x992>
 800b6b6:	4f34      	ldr	r7, [pc, #208]	@ (800b788 <_strtod_l+0xb00>)
 800b6b8:	2600      	movs	r6, #0
 800b6ba:	e7aa      	b.n	800b612 <_strtod_l+0x98a>
 800b6bc:	4b32      	ldr	r3, [pc, #200]	@ (800b788 <_strtod_l+0xb00>)
 800b6be:	4630      	mov	r0, r6
 800b6c0:	4639      	mov	r1, r7
 800b6c2:	2200      	movs	r2, #0
 800b6c4:	f7f4 ffc8 	bl	8000658 <__aeabi_dmul>
 800b6c8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b6ca:	4606      	mov	r6, r0
 800b6cc:	460f      	mov	r7, r1
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d09f      	beq.n	800b612 <_strtod_l+0x98a>
 800b6d2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800b6d6:	e7a0      	b.n	800b61a <_strtod_l+0x992>
 800b6d8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800b760 <_strtod_l+0xad8>
 800b6dc:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b6e0:	ec57 6b17 	vmov	r6, r7, d7
 800b6e4:	e799      	b.n	800b61a <_strtod_l+0x992>
 800b6e6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800b6ea:	9b08      	ldr	r3, [sp, #32]
 800b6ec:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d1c1      	bne.n	800b678 <_strtod_l+0x9f0>
 800b6f4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b6f8:	0d1b      	lsrs	r3, r3, #20
 800b6fa:	051b      	lsls	r3, r3, #20
 800b6fc:	429d      	cmp	r5, r3
 800b6fe:	d1bb      	bne.n	800b678 <_strtod_l+0x9f0>
 800b700:	4630      	mov	r0, r6
 800b702:	4639      	mov	r1, r7
 800b704:	f7f5 fb08 	bl	8000d18 <__aeabi_d2lz>
 800b708:	f7f4 ff78 	bl	80005fc <__aeabi_l2d>
 800b70c:	4602      	mov	r2, r0
 800b70e:	460b      	mov	r3, r1
 800b710:	4630      	mov	r0, r6
 800b712:	4639      	mov	r1, r7
 800b714:	f7f4 fde8 	bl	80002e8 <__aeabi_dsub>
 800b718:	460b      	mov	r3, r1
 800b71a:	4602      	mov	r2, r0
 800b71c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800b720:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800b724:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b726:	ea46 060a 	orr.w	r6, r6, sl
 800b72a:	431e      	orrs	r6, r3
 800b72c:	d06f      	beq.n	800b80e <_strtod_l+0xb86>
 800b72e:	a30e      	add	r3, pc, #56	@ (adr r3, 800b768 <_strtod_l+0xae0>)
 800b730:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b734:	f7f5 fa02 	bl	8000b3c <__aeabi_dcmplt>
 800b738:	2800      	cmp	r0, #0
 800b73a:	f47f acd3 	bne.w	800b0e4 <_strtod_l+0x45c>
 800b73e:	a30c      	add	r3, pc, #48	@ (adr r3, 800b770 <_strtod_l+0xae8>)
 800b740:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b744:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b748:	f7f5 fa16 	bl	8000b78 <__aeabi_dcmpgt>
 800b74c:	2800      	cmp	r0, #0
 800b74e:	d093      	beq.n	800b678 <_strtod_l+0x9f0>
 800b750:	e4c8      	b.n	800b0e4 <_strtod_l+0x45c>
 800b752:	bf00      	nop
 800b754:	f3af 8000 	nop.w
 800b758:	00000000 	.word	0x00000000
 800b75c:	bff00000 	.word	0xbff00000
 800b760:	00000000 	.word	0x00000000
 800b764:	3ff00000 	.word	0x3ff00000
 800b768:	94a03595 	.word	0x94a03595
 800b76c:	3fdfffff 	.word	0x3fdfffff
 800b770:	35afe535 	.word	0x35afe535
 800b774:	3fe00000 	.word	0x3fe00000
 800b778:	000fffff 	.word	0x000fffff
 800b77c:	7ff00000 	.word	0x7ff00000
 800b780:	7fefffff 	.word	0x7fefffff
 800b784:	3ff00000 	.word	0x3ff00000
 800b788:	3fe00000 	.word	0x3fe00000
 800b78c:	7fe00000 	.word	0x7fe00000
 800b790:	7c9fffff 	.word	0x7c9fffff
 800b794:	9b08      	ldr	r3, [sp, #32]
 800b796:	b323      	cbz	r3, 800b7e2 <_strtod_l+0xb5a>
 800b798:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800b79c:	d821      	bhi.n	800b7e2 <_strtod_l+0xb5a>
 800b79e:	a328      	add	r3, pc, #160	@ (adr r3, 800b840 <_strtod_l+0xbb8>)
 800b7a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7a4:	4630      	mov	r0, r6
 800b7a6:	4639      	mov	r1, r7
 800b7a8:	f7f5 f9d2 	bl	8000b50 <__aeabi_dcmple>
 800b7ac:	b1a0      	cbz	r0, 800b7d8 <_strtod_l+0xb50>
 800b7ae:	4639      	mov	r1, r7
 800b7b0:	4630      	mov	r0, r6
 800b7b2:	f7f5 fa29 	bl	8000c08 <__aeabi_d2uiz>
 800b7b6:	2801      	cmp	r0, #1
 800b7b8:	bf38      	it	cc
 800b7ba:	2001      	movcc	r0, #1
 800b7bc:	f7f4 fed2 	bl	8000564 <__aeabi_ui2d>
 800b7c0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b7c2:	4606      	mov	r6, r0
 800b7c4:	460f      	mov	r7, r1
 800b7c6:	b9fb      	cbnz	r3, 800b808 <_strtod_l+0xb80>
 800b7c8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b7cc:	9014      	str	r0, [sp, #80]	@ 0x50
 800b7ce:	9315      	str	r3, [sp, #84]	@ 0x54
 800b7d0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800b7d4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800b7d8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b7da:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800b7de:	1b5b      	subs	r3, r3, r5
 800b7e0:	9311      	str	r3, [sp, #68]	@ 0x44
 800b7e2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800b7e6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800b7ea:	f7ff f8f1 	bl	800a9d0 <__ulp>
 800b7ee:	4650      	mov	r0, sl
 800b7f0:	ec53 2b10 	vmov	r2, r3, d0
 800b7f4:	4659      	mov	r1, fp
 800b7f6:	f7f4 ff2f 	bl	8000658 <__aeabi_dmul>
 800b7fa:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800b7fe:	f7f4 fd75 	bl	80002ec <__adddf3>
 800b802:	4682      	mov	sl, r0
 800b804:	468b      	mov	fp, r1
 800b806:	e770      	b.n	800b6ea <_strtod_l+0xa62>
 800b808:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800b80c:	e7e0      	b.n	800b7d0 <_strtod_l+0xb48>
 800b80e:	a30e      	add	r3, pc, #56	@ (adr r3, 800b848 <_strtod_l+0xbc0>)
 800b810:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b814:	f7f5 f992 	bl	8000b3c <__aeabi_dcmplt>
 800b818:	e798      	b.n	800b74c <_strtod_l+0xac4>
 800b81a:	2300      	movs	r3, #0
 800b81c:	930e      	str	r3, [sp, #56]	@ 0x38
 800b81e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800b820:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b822:	6013      	str	r3, [r2, #0]
 800b824:	f7ff ba6d 	b.w	800ad02 <_strtod_l+0x7a>
 800b828:	2a65      	cmp	r2, #101	@ 0x65
 800b82a:	f43f ab68 	beq.w	800aefe <_strtod_l+0x276>
 800b82e:	2a45      	cmp	r2, #69	@ 0x45
 800b830:	f43f ab65 	beq.w	800aefe <_strtod_l+0x276>
 800b834:	2301      	movs	r3, #1
 800b836:	f7ff bba0 	b.w	800af7a <_strtod_l+0x2f2>
 800b83a:	bf00      	nop
 800b83c:	f3af 8000 	nop.w
 800b840:	ffc00000 	.word	0xffc00000
 800b844:	41dfffff 	.word	0x41dfffff
 800b848:	94a03595 	.word	0x94a03595
 800b84c:	3fcfffff 	.word	0x3fcfffff

0800b850 <_strtod_r>:
 800b850:	4b01      	ldr	r3, [pc, #4]	@ (800b858 <_strtod_r+0x8>)
 800b852:	f7ff ba19 	b.w	800ac88 <_strtod_l>
 800b856:	bf00      	nop
 800b858:	200000b4 	.word	0x200000b4

0800b85c <__ssputs_r>:
 800b85c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b860:	688e      	ldr	r6, [r1, #8]
 800b862:	461f      	mov	r7, r3
 800b864:	42be      	cmp	r6, r7
 800b866:	680b      	ldr	r3, [r1, #0]
 800b868:	4682      	mov	sl, r0
 800b86a:	460c      	mov	r4, r1
 800b86c:	4690      	mov	r8, r2
 800b86e:	d82d      	bhi.n	800b8cc <__ssputs_r+0x70>
 800b870:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b874:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b878:	d026      	beq.n	800b8c8 <__ssputs_r+0x6c>
 800b87a:	6965      	ldr	r5, [r4, #20]
 800b87c:	6909      	ldr	r1, [r1, #16]
 800b87e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b882:	eba3 0901 	sub.w	r9, r3, r1
 800b886:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b88a:	1c7b      	adds	r3, r7, #1
 800b88c:	444b      	add	r3, r9
 800b88e:	106d      	asrs	r5, r5, #1
 800b890:	429d      	cmp	r5, r3
 800b892:	bf38      	it	cc
 800b894:	461d      	movcc	r5, r3
 800b896:	0553      	lsls	r3, r2, #21
 800b898:	d527      	bpl.n	800b8ea <__ssputs_r+0x8e>
 800b89a:	4629      	mov	r1, r5
 800b89c:	f7fe fca0 	bl	800a1e0 <_malloc_r>
 800b8a0:	4606      	mov	r6, r0
 800b8a2:	b360      	cbz	r0, 800b8fe <__ssputs_r+0xa2>
 800b8a4:	6921      	ldr	r1, [r4, #16]
 800b8a6:	464a      	mov	r2, r9
 800b8a8:	f000 fbde 	bl	800c068 <memcpy>
 800b8ac:	89a3      	ldrh	r3, [r4, #12]
 800b8ae:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b8b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b8b6:	81a3      	strh	r3, [r4, #12]
 800b8b8:	6126      	str	r6, [r4, #16]
 800b8ba:	6165      	str	r5, [r4, #20]
 800b8bc:	444e      	add	r6, r9
 800b8be:	eba5 0509 	sub.w	r5, r5, r9
 800b8c2:	6026      	str	r6, [r4, #0]
 800b8c4:	60a5      	str	r5, [r4, #8]
 800b8c6:	463e      	mov	r6, r7
 800b8c8:	42be      	cmp	r6, r7
 800b8ca:	d900      	bls.n	800b8ce <__ssputs_r+0x72>
 800b8cc:	463e      	mov	r6, r7
 800b8ce:	6820      	ldr	r0, [r4, #0]
 800b8d0:	4632      	mov	r2, r6
 800b8d2:	4641      	mov	r1, r8
 800b8d4:	f000 fb6a 	bl	800bfac <memmove>
 800b8d8:	68a3      	ldr	r3, [r4, #8]
 800b8da:	1b9b      	subs	r3, r3, r6
 800b8dc:	60a3      	str	r3, [r4, #8]
 800b8de:	6823      	ldr	r3, [r4, #0]
 800b8e0:	4433      	add	r3, r6
 800b8e2:	6023      	str	r3, [r4, #0]
 800b8e4:	2000      	movs	r0, #0
 800b8e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b8ea:	462a      	mov	r2, r5
 800b8ec:	f000 ff51 	bl	800c792 <_realloc_r>
 800b8f0:	4606      	mov	r6, r0
 800b8f2:	2800      	cmp	r0, #0
 800b8f4:	d1e0      	bne.n	800b8b8 <__ssputs_r+0x5c>
 800b8f6:	6921      	ldr	r1, [r4, #16]
 800b8f8:	4650      	mov	r0, sl
 800b8fa:	f7fe fbfd 	bl	800a0f8 <_free_r>
 800b8fe:	230c      	movs	r3, #12
 800b900:	f8ca 3000 	str.w	r3, [sl]
 800b904:	89a3      	ldrh	r3, [r4, #12]
 800b906:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b90a:	81a3      	strh	r3, [r4, #12]
 800b90c:	f04f 30ff 	mov.w	r0, #4294967295
 800b910:	e7e9      	b.n	800b8e6 <__ssputs_r+0x8a>
	...

0800b914 <_svfiprintf_r>:
 800b914:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b918:	4698      	mov	r8, r3
 800b91a:	898b      	ldrh	r3, [r1, #12]
 800b91c:	061b      	lsls	r3, r3, #24
 800b91e:	b09d      	sub	sp, #116	@ 0x74
 800b920:	4607      	mov	r7, r0
 800b922:	460d      	mov	r5, r1
 800b924:	4614      	mov	r4, r2
 800b926:	d510      	bpl.n	800b94a <_svfiprintf_r+0x36>
 800b928:	690b      	ldr	r3, [r1, #16]
 800b92a:	b973      	cbnz	r3, 800b94a <_svfiprintf_r+0x36>
 800b92c:	2140      	movs	r1, #64	@ 0x40
 800b92e:	f7fe fc57 	bl	800a1e0 <_malloc_r>
 800b932:	6028      	str	r0, [r5, #0]
 800b934:	6128      	str	r0, [r5, #16]
 800b936:	b930      	cbnz	r0, 800b946 <_svfiprintf_r+0x32>
 800b938:	230c      	movs	r3, #12
 800b93a:	603b      	str	r3, [r7, #0]
 800b93c:	f04f 30ff 	mov.w	r0, #4294967295
 800b940:	b01d      	add	sp, #116	@ 0x74
 800b942:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b946:	2340      	movs	r3, #64	@ 0x40
 800b948:	616b      	str	r3, [r5, #20]
 800b94a:	2300      	movs	r3, #0
 800b94c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b94e:	2320      	movs	r3, #32
 800b950:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b954:	f8cd 800c 	str.w	r8, [sp, #12]
 800b958:	2330      	movs	r3, #48	@ 0x30
 800b95a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800baf8 <_svfiprintf_r+0x1e4>
 800b95e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b962:	f04f 0901 	mov.w	r9, #1
 800b966:	4623      	mov	r3, r4
 800b968:	469a      	mov	sl, r3
 800b96a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b96e:	b10a      	cbz	r2, 800b974 <_svfiprintf_r+0x60>
 800b970:	2a25      	cmp	r2, #37	@ 0x25
 800b972:	d1f9      	bne.n	800b968 <_svfiprintf_r+0x54>
 800b974:	ebba 0b04 	subs.w	fp, sl, r4
 800b978:	d00b      	beq.n	800b992 <_svfiprintf_r+0x7e>
 800b97a:	465b      	mov	r3, fp
 800b97c:	4622      	mov	r2, r4
 800b97e:	4629      	mov	r1, r5
 800b980:	4638      	mov	r0, r7
 800b982:	f7ff ff6b 	bl	800b85c <__ssputs_r>
 800b986:	3001      	adds	r0, #1
 800b988:	f000 80a7 	beq.w	800bada <_svfiprintf_r+0x1c6>
 800b98c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b98e:	445a      	add	r2, fp
 800b990:	9209      	str	r2, [sp, #36]	@ 0x24
 800b992:	f89a 3000 	ldrb.w	r3, [sl]
 800b996:	2b00      	cmp	r3, #0
 800b998:	f000 809f 	beq.w	800bada <_svfiprintf_r+0x1c6>
 800b99c:	2300      	movs	r3, #0
 800b99e:	f04f 32ff 	mov.w	r2, #4294967295
 800b9a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b9a6:	f10a 0a01 	add.w	sl, sl, #1
 800b9aa:	9304      	str	r3, [sp, #16]
 800b9ac:	9307      	str	r3, [sp, #28]
 800b9ae:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b9b2:	931a      	str	r3, [sp, #104]	@ 0x68
 800b9b4:	4654      	mov	r4, sl
 800b9b6:	2205      	movs	r2, #5
 800b9b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b9bc:	484e      	ldr	r0, [pc, #312]	@ (800baf8 <_svfiprintf_r+0x1e4>)
 800b9be:	f7f4 fc37 	bl	8000230 <memchr>
 800b9c2:	9a04      	ldr	r2, [sp, #16]
 800b9c4:	b9d8      	cbnz	r0, 800b9fe <_svfiprintf_r+0xea>
 800b9c6:	06d0      	lsls	r0, r2, #27
 800b9c8:	bf44      	itt	mi
 800b9ca:	2320      	movmi	r3, #32
 800b9cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b9d0:	0711      	lsls	r1, r2, #28
 800b9d2:	bf44      	itt	mi
 800b9d4:	232b      	movmi	r3, #43	@ 0x2b
 800b9d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b9da:	f89a 3000 	ldrb.w	r3, [sl]
 800b9de:	2b2a      	cmp	r3, #42	@ 0x2a
 800b9e0:	d015      	beq.n	800ba0e <_svfiprintf_r+0xfa>
 800b9e2:	9a07      	ldr	r2, [sp, #28]
 800b9e4:	4654      	mov	r4, sl
 800b9e6:	2000      	movs	r0, #0
 800b9e8:	f04f 0c0a 	mov.w	ip, #10
 800b9ec:	4621      	mov	r1, r4
 800b9ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b9f2:	3b30      	subs	r3, #48	@ 0x30
 800b9f4:	2b09      	cmp	r3, #9
 800b9f6:	d94b      	bls.n	800ba90 <_svfiprintf_r+0x17c>
 800b9f8:	b1b0      	cbz	r0, 800ba28 <_svfiprintf_r+0x114>
 800b9fa:	9207      	str	r2, [sp, #28]
 800b9fc:	e014      	b.n	800ba28 <_svfiprintf_r+0x114>
 800b9fe:	eba0 0308 	sub.w	r3, r0, r8
 800ba02:	fa09 f303 	lsl.w	r3, r9, r3
 800ba06:	4313      	orrs	r3, r2
 800ba08:	9304      	str	r3, [sp, #16]
 800ba0a:	46a2      	mov	sl, r4
 800ba0c:	e7d2      	b.n	800b9b4 <_svfiprintf_r+0xa0>
 800ba0e:	9b03      	ldr	r3, [sp, #12]
 800ba10:	1d19      	adds	r1, r3, #4
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	9103      	str	r1, [sp, #12]
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	bfbb      	ittet	lt
 800ba1a:	425b      	neglt	r3, r3
 800ba1c:	f042 0202 	orrlt.w	r2, r2, #2
 800ba20:	9307      	strge	r3, [sp, #28]
 800ba22:	9307      	strlt	r3, [sp, #28]
 800ba24:	bfb8      	it	lt
 800ba26:	9204      	strlt	r2, [sp, #16]
 800ba28:	7823      	ldrb	r3, [r4, #0]
 800ba2a:	2b2e      	cmp	r3, #46	@ 0x2e
 800ba2c:	d10a      	bne.n	800ba44 <_svfiprintf_r+0x130>
 800ba2e:	7863      	ldrb	r3, [r4, #1]
 800ba30:	2b2a      	cmp	r3, #42	@ 0x2a
 800ba32:	d132      	bne.n	800ba9a <_svfiprintf_r+0x186>
 800ba34:	9b03      	ldr	r3, [sp, #12]
 800ba36:	1d1a      	adds	r2, r3, #4
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	9203      	str	r2, [sp, #12]
 800ba3c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ba40:	3402      	adds	r4, #2
 800ba42:	9305      	str	r3, [sp, #20]
 800ba44:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800bb08 <_svfiprintf_r+0x1f4>
 800ba48:	7821      	ldrb	r1, [r4, #0]
 800ba4a:	2203      	movs	r2, #3
 800ba4c:	4650      	mov	r0, sl
 800ba4e:	f7f4 fbef 	bl	8000230 <memchr>
 800ba52:	b138      	cbz	r0, 800ba64 <_svfiprintf_r+0x150>
 800ba54:	9b04      	ldr	r3, [sp, #16]
 800ba56:	eba0 000a 	sub.w	r0, r0, sl
 800ba5a:	2240      	movs	r2, #64	@ 0x40
 800ba5c:	4082      	lsls	r2, r0
 800ba5e:	4313      	orrs	r3, r2
 800ba60:	3401      	adds	r4, #1
 800ba62:	9304      	str	r3, [sp, #16]
 800ba64:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba68:	4824      	ldr	r0, [pc, #144]	@ (800bafc <_svfiprintf_r+0x1e8>)
 800ba6a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ba6e:	2206      	movs	r2, #6
 800ba70:	f7f4 fbde 	bl	8000230 <memchr>
 800ba74:	2800      	cmp	r0, #0
 800ba76:	d036      	beq.n	800bae6 <_svfiprintf_r+0x1d2>
 800ba78:	4b21      	ldr	r3, [pc, #132]	@ (800bb00 <_svfiprintf_r+0x1ec>)
 800ba7a:	bb1b      	cbnz	r3, 800bac4 <_svfiprintf_r+0x1b0>
 800ba7c:	9b03      	ldr	r3, [sp, #12]
 800ba7e:	3307      	adds	r3, #7
 800ba80:	f023 0307 	bic.w	r3, r3, #7
 800ba84:	3308      	adds	r3, #8
 800ba86:	9303      	str	r3, [sp, #12]
 800ba88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba8a:	4433      	add	r3, r6
 800ba8c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ba8e:	e76a      	b.n	800b966 <_svfiprintf_r+0x52>
 800ba90:	fb0c 3202 	mla	r2, ip, r2, r3
 800ba94:	460c      	mov	r4, r1
 800ba96:	2001      	movs	r0, #1
 800ba98:	e7a8      	b.n	800b9ec <_svfiprintf_r+0xd8>
 800ba9a:	2300      	movs	r3, #0
 800ba9c:	3401      	adds	r4, #1
 800ba9e:	9305      	str	r3, [sp, #20]
 800baa0:	4619      	mov	r1, r3
 800baa2:	f04f 0c0a 	mov.w	ip, #10
 800baa6:	4620      	mov	r0, r4
 800baa8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800baac:	3a30      	subs	r2, #48	@ 0x30
 800baae:	2a09      	cmp	r2, #9
 800bab0:	d903      	bls.n	800baba <_svfiprintf_r+0x1a6>
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d0c6      	beq.n	800ba44 <_svfiprintf_r+0x130>
 800bab6:	9105      	str	r1, [sp, #20]
 800bab8:	e7c4      	b.n	800ba44 <_svfiprintf_r+0x130>
 800baba:	fb0c 2101 	mla	r1, ip, r1, r2
 800babe:	4604      	mov	r4, r0
 800bac0:	2301      	movs	r3, #1
 800bac2:	e7f0      	b.n	800baa6 <_svfiprintf_r+0x192>
 800bac4:	ab03      	add	r3, sp, #12
 800bac6:	9300      	str	r3, [sp, #0]
 800bac8:	462a      	mov	r2, r5
 800baca:	4b0e      	ldr	r3, [pc, #56]	@ (800bb04 <_svfiprintf_r+0x1f0>)
 800bacc:	a904      	add	r1, sp, #16
 800bace:	4638      	mov	r0, r7
 800bad0:	f7fc fc42 	bl	8008358 <_printf_float>
 800bad4:	1c42      	adds	r2, r0, #1
 800bad6:	4606      	mov	r6, r0
 800bad8:	d1d6      	bne.n	800ba88 <_svfiprintf_r+0x174>
 800bada:	89ab      	ldrh	r3, [r5, #12]
 800badc:	065b      	lsls	r3, r3, #25
 800bade:	f53f af2d 	bmi.w	800b93c <_svfiprintf_r+0x28>
 800bae2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bae4:	e72c      	b.n	800b940 <_svfiprintf_r+0x2c>
 800bae6:	ab03      	add	r3, sp, #12
 800bae8:	9300      	str	r3, [sp, #0]
 800baea:	462a      	mov	r2, r5
 800baec:	4b05      	ldr	r3, [pc, #20]	@ (800bb04 <_svfiprintf_r+0x1f0>)
 800baee:	a904      	add	r1, sp, #16
 800baf0:	4638      	mov	r0, r7
 800baf2:	f7fc fec9 	bl	8008888 <_printf_i>
 800baf6:	e7ed      	b.n	800bad4 <_svfiprintf_r+0x1c0>
 800baf8:	0800ce1a 	.word	0x0800ce1a
 800bafc:	0800ce24 	.word	0x0800ce24
 800bb00:	08008359 	.word	0x08008359
 800bb04:	0800b85d 	.word	0x0800b85d
 800bb08:	0800ce20 	.word	0x0800ce20

0800bb0c <__sfputc_r>:
 800bb0c:	6893      	ldr	r3, [r2, #8]
 800bb0e:	3b01      	subs	r3, #1
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	b410      	push	{r4}
 800bb14:	6093      	str	r3, [r2, #8]
 800bb16:	da08      	bge.n	800bb2a <__sfputc_r+0x1e>
 800bb18:	6994      	ldr	r4, [r2, #24]
 800bb1a:	42a3      	cmp	r3, r4
 800bb1c:	db01      	blt.n	800bb22 <__sfputc_r+0x16>
 800bb1e:	290a      	cmp	r1, #10
 800bb20:	d103      	bne.n	800bb2a <__sfputc_r+0x1e>
 800bb22:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bb26:	f7fd bb72 	b.w	800920e <__swbuf_r>
 800bb2a:	6813      	ldr	r3, [r2, #0]
 800bb2c:	1c58      	adds	r0, r3, #1
 800bb2e:	6010      	str	r0, [r2, #0]
 800bb30:	7019      	strb	r1, [r3, #0]
 800bb32:	4608      	mov	r0, r1
 800bb34:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bb38:	4770      	bx	lr

0800bb3a <__sfputs_r>:
 800bb3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb3c:	4606      	mov	r6, r0
 800bb3e:	460f      	mov	r7, r1
 800bb40:	4614      	mov	r4, r2
 800bb42:	18d5      	adds	r5, r2, r3
 800bb44:	42ac      	cmp	r4, r5
 800bb46:	d101      	bne.n	800bb4c <__sfputs_r+0x12>
 800bb48:	2000      	movs	r0, #0
 800bb4a:	e007      	b.n	800bb5c <__sfputs_r+0x22>
 800bb4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb50:	463a      	mov	r2, r7
 800bb52:	4630      	mov	r0, r6
 800bb54:	f7ff ffda 	bl	800bb0c <__sfputc_r>
 800bb58:	1c43      	adds	r3, r0, #1
 800bb5a:	d1f3      	bne.n	800bb44 <__sfputs_r+0xa>
 800bb5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bb60 <_vfiprintf_r>:
 800bb60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb64:	460d      	mov	r5, r1
 800bb66:	b09d      	sub	sp, #116	@ 0x74
 800bb68:	4614      	mov	r4, r2
 800bb6a:	4698      	mov	r8, r3
 800bb6c:	4606      	mov	r6, r0
 800bb6e:	b118      	cbz	r0, 800bb78 <_vfiprintf_r+0x18>
 800bb70:	6a03      	ldr	r3, [r0, #32]
 800bb72:	b90b      	cbnz	r3, 800bb78 <_vfiprintf_r+0x18>
 800bb74:	f7fd fa40 	bl	8008ff8 <__sinit>
 800bb78:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bb7a:	07d9      	lsls	r1, r3, #31
 800bb7c:	d405      	bmi.n	800bb8a <_vfiprintf_r+0x2a>
 800bb7e:	89ab      	ldrh	r3, [r5, #12]
 800bb80:	059a      	lsls	r2, r3, #22
 800bb82:	d402      	bmi.n	800bb8a <_vfiprintf_r+0x2a>
 800bb84:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bb86:	f7fd fc54 	bl	8009432 <__retarget_lock_acquire_recursive>
 800bb8a:	89ab      	ldrh	r3, [r5, #12]
 800bb8c:	071b      	lsls	r3, r3, #28
 800bb8e:	d501      	bpl.n	800bb94 <_vfiprintf_r+0x34>
 800bb90:	692b      	ldr	r3, [r5, #16]
 800bb92:	b99b      	cbnz	r3, 800bbbc <_vfiprintf_r+0x5c>
 800bb94:	4629      	mov	r1, r5
 800bb96:	4630      	mov	r0, r6
 800bb98:	f7fd fb78 	bl	800928c <__swsetup_r>
 800bb9c:	b170      	cbz	r0, 800bbbc <_vfiprintf_r+0x5c>
 800bb9e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bba0:	07dc      	lsls	r4, r3, #31
 800bba2:	d504      	bpl.n	800bbae <_vfiprintf_r+0x4e>
 800bba4:	f04f 30ff 	mov.w	r0, #4294967295
 800bba8:	b01d      	add	sp, #116	@ 0x74
 800bbaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbae:	89ab      	ldrh	r3, [r5, #12]
 800bbb0:	0598      	lsls	r0, r3, #22
 800bbb2:	d4f7      	bmi.n	800bba4 <_vfiprintf_r+0x44>
 800bbb4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bbb6:	f7fd fc3d 	bl	8009434 <__retarget_lock_release_recursive>
 800bbba:	e7f3      	b.n	800bba4 <_vfiprintf_r+0x44>
 800bbbc:	2300      	movs	r3, #0
 800bbbe:	9309      	str	r3, [sp, #36]	@ 0x24
 800bbc0:	2320      	movs	r3, #32
 800bbc2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bbc6:	f8cd 800c 	str.w	r8, [sp, #12]
 800bbca:	2330      	movs	r3, #48	@ 0x30
 800bbcc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800bd7c <_vfiprintf_r+0x21c>
 800bbd0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bbd4:	f04f 0901 	mov.w	r9, #1
 800bbd8:	4623      	mov	r3, r4
 800bbda:	469a      	mov	sl, r3
 800bbdc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bbe0:	b10a      	cbz	r2, 800bbe6 <_vfiprintf_r+0x86>
 800bbe2:	2a25      	cmp	r2, #37	@ 0x25
 800bbe4:	d1f9      	bne.n	800bbda <_vfiprintf_r+0x7a>
 800bbe6:	ebba 0b04 	subs.w	fp, sl, r4
 800bbea:	d00b      	beq.n	800bc04 <_vfiprintf_r+0xa4>
 800bbec:	465b      	mov	r3, fp
 800bbee:	4622      	mov	r2, r4
 800bbf0:	4629      	mov	r1, r5
 800bbf2:	4630      	mov	r0, r6
 800bbf4:	f7ff ffa1 	bl	800bb3a <__sfputs_r>
 800bbf8:	3001      	adds	r0, #1
 800bbfa:	f000 80a7 	beq.w	800bd4c <_vfiprintf_r+0x1ec>
 800bbfe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bc00:	445a      	add	r2, fp
 800bc02:	9209      	str	r2, [sp, #36]	@ 0x24
 800bc04:	f89a 3000 	ldrb.w	r3, [sl]
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	f000 809f 	beq.w	800bd4c <_vfiprintf_r+0x1ec>
 800bc0e:	2300      	movs	r3, #0
 800bc10:	f04f 32ff 	mov.w	r2, #4294967295
 800bc14:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bc18:	f10a 0a01 	add.w	sl, sl, #1
 800bc1c:	9304      	str	r3, [sp, #16]
 800bc1e:	9307      	str	r3, [sp, #28]
 800bc20:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bc24:	931a      	str	r3, [sp, #104]	@ 0x68
 800bc26:	4654      	mov	r4, sl
 800bc28:	2205      	movs	r2, #5
 800bc2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc2e:	4853      	ldr	r0, [pc, #332]	@ (800bd7c <_vfiprintf_r+0x21c>)
 800bc30:	f7f4 fafe 	bl	8000230 <memchr>
 800bc34:	9a04      	ldr	r2, [sp, #16]
 800bc36:	b9d8      	cbnz	r0, 800bc70 <_vfiprintf_r+0x110>
 800bc38:	06d1      	lsls	r1, r2, #27
 800bc3a:	bf44      	itt	mi
 800bc3c:	2320      	movmi	r3, #32
 800bc3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bc42:	0713      	lsls	r3, r2, #28
 800bc44:	bf44      	itt	mi
 800bc46:	232b      	movmi	r3, #43	@ 0x2b
 800bc48:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bc4c:	f89a 3000 	ldrb.w	r3, [sl]
 800bc50:	2b2a      	cmp	r3, #42	@ 0x2a
 800bc52:	d015      	beq.n	800bc80 <_vfiprintf_r+0x120>
 800bc54:	9a07      	ldr	r2, [sp, #28]
 800bc56:	4654      	mov	r4, sl
 800bc58:	2000      	movs	r0, #0
 800bc5a:	f04f 0c0a 	mov.w	ip, #10
 800bc5e:	4621      	mov	r1, r4
 800bc60:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bc64:	3b30      	subs	r3, #48	@ 0x30
 800bc66:	2b09      	cmp	r3, #9
 800bc68:	d94b      	bls.n	800bd02 <_vfiprintf_r+0x1a2>
 800bc6a:	b1b0      	cbz	r0, 800bc9a <_vfiprintf_r+0x13a>
 800bc6c:	9207      	str	r2, [sp, #28]
 800bc6e:	e014      	b.n	800bc9a <_vfiprintf_r+0x13a>
 800bc70:	eba0 0308 	sub.w	r3, r0, r8
 800bc74:	fa09 f303 	lsl.w	r3, r9, r3
 800bc78:	4313      	orrs	r3, r2
 800bc7a:	9304      	str	r3, [sp, #16]
 800bc7c:	46a2      	mov	sl, r4
 800bc7e:	e7d2      	b.n	800bc26 <_vfiprintf_r+0xc6>
 800bc80:	9b03      	ldr	r3, [sp, #12]
 800bc82:	1d19      	adds	r1, r3, #4
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	9103      	str	r1, [sp, #12]
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	bfbb      	ittet	lt
 800bc8c:	425b      	neglt	r3, r3
 800bc8e:	f042 0202 	orrlt.w	r2, r2, #2
 800bc92:	9307      	strge	r3, [sp, #28]
 800bc94:	9307      	strlt	r3, [sp, #28]
 800bc96:	bfb8      	it	lt
 800bc98:	9204      	strlt	r2, [sp, #16]
 800bc9a:	7823      	ldrb	r3, [r4, #0]
 800bc9c:	2b2e      	cmp	r3, #46	@ 0x2e
 800bc9e:	d10a      	bne.n	800bcb6 <_vfiprintf_r+0x156>
 800bca0:	7863      	ldrb	r3, [r4, #1]
 800bca2:	2b2a      	cmp	r3, #42	@ 0x2a
 800bca4:	d132      	bne.n	800bd0c <_vfiprintf_r+0x1ac>
 800bca6:	9b03      	ldr	r3, [sp, #12]
 800bca8:	1d1a      	adds	r2, r3, #4
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	9203      	str	r2, [sp, #12]
 800bcae:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bcb2:	3402      	adds	r4, #2
 800bcb4:	9305      	str	r3, [sp, #20]
 800bcb6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800bd8c <_vfiprintf_r+0x22c>
 800bcba:	7821      	ldrb	r1, [r4, #0]
 800bcbc:	2203      	movs	r2, #3
 800bcbe:	4650      	mov	r0, sl
 800bcc0:	f7f4 fab6 	bl	8000230 <memchr>
 800bcc4:	b138      	cbz	r0, 800bcd6 <_vfiprintf_r+0x176>
 800bcc6:	9b04      	ldr	r3, [sp, #16]
 800bcc8:	eba0 000a 	sub.w	r0, r0, sl
 800bccc:	2240      	movs	r2, #64	@ 0x40
 800bcce:	4082      	lsls	r2, r0
 800bcd0:	4313      	orrs	r3, r2
 800bcd2:	3401      	adds	r4, #1
 800bcd4:	9304      	str	r3, [sp, #16]
 800bcd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bcda:	4829      	ldr	r0, [pc, #164]	@ (800bd80 <_vfiprintf_r+0x220>)
 800bcdc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bce0:	2206      	movs	r2, #6
 800bce2:	f7f4 faa5 	bl	8000230 <memchr>
 800bce6:	2800      	cmp	r0, #0
 800bce8:	d03f      	beq.n	800bd6a <_vfiprintf_r+0x20a>
 800bcea:	4b26      	ldr	r3, [pc, #152]	@ (800bd84 <_vfiprintf_r+0x224>)
 800bcec:	bb1b      	cbnz	r3, 800bd36 <_vfiprintf_r+0x1d6>
 800bcee:	9b03      	ldr	r3, [sp, #12]
 800bcf0:	3307      	adds	r3, #7
 800bcf2:	f023 0307 	bic.w	r3, r3, #7
 800bcf6:	3308      	adds	r3, #8
 800bcf8:	9303      	str	r3, [sp, #12]
 800bcfa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bcfc:	443b      	add	r3, r7
 800bcfe:	9309      	str	r3, [sp, #36]	@ 0x24
 800bd00:	e76a      	b.n	800bbd8 <_vfiprintf_r+0x78>
 800bd02:	fb0c 3202 	mla	r2, ip, r2, r3
 800bd06:	460c      	mov	r4, r1
 800bd08:	2001      	movs	r0, #1
 800bd0a:	e7a8      	b.n	800bc5e <_vfiprintf_r+0xfe>
 800bd0c:	2300      	movs	r3, #0
 800bd0e:	3401      	adds	r4, #1
 800bd10:	9305      	str	r3, [sp, #20]
 800bd12:	4619      	mov	r1, r3
 800bd14:	f04f 0c0a 	mov.w	ip, #10
 800bd18:	4620      	mov	r0, r4
 800bd1a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bd1e:	3a30      	subs	r2, #48	@ 0x30
 800bd20:	2a09      	cmp	r2, #9
 800bd22:	d903      	bls.n	800bd2c <_vfiprintf_r+0x1cc>
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d0c6      	beq.n	800bcb6 <_vfiprintf_r+0x156>
 800bd28:	9105      	str	r1, [sp, #20]
 800bd2a:	e7c4      	b.n	800bcb6 <_vfiprintf_r+0x156>
 800bd2c:	fb0c 2101 	mla	r1, ip, r1, r2
 800bd30:	4604      	mov	r4, r0
 800bd32:	2301      	movs	r3, #1
 800bd34:	e7f0      	b.n	800bd18 <_vfiprintf_r+0x1b8>
 800bd36:	ab03      	add	r3, sp, #12
 800bd38:	9300      	str	r3, [sp, #0]
 800bd3a:	462a      	mov	r2, r5
 800bd3c:	4b12      	ldr	r3, [pc, #72]	@ (800bd88 <_vfiprintf_r+0x228>)
 800bd3e:	a904      	add	r1, sp, #16
 800bd40:	4630      	mov	r0, r6
 800bd42:	f7fc fb09 	bl	8008358 <_printf_float>
 800bd46:	4607      	mov	r7, r0
 800bd48:	1c78      	adds	r0, r7, #1
 800bd4a:	d1d6      	bne.n	800bcfa <_vfiprintf_r+0x19a>
 800bd4c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bd4e:	07d9      	lsls	r1, r3, #31
 800bd50:	d405      	bmi.n	800bd5e <_vfiprintf_r+0x1fe>
 800bd52:	89ab      	ldrh	r3, [r5, #12]
 800bd54:	059a      	lsls	r2, r3, #22
 800bd56:	d402      	bmi.n	800bd5e <_vfiprintf_r+0x1fe>
 800bd58:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bd5a:	f7fd fb6b 	bl	8009434 <__retarget_lock_release_recursive>
 800bd5e:	89ab      	ldrh	r3, [r5, #12]
 800bd60:	065b      	lsls	r3, r3, #25
 800bd62:	f53f af1f 	bmi.w	800bba4 <_vfiprintf_r+0x44>
 800bd66:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bd68:	e71e      	b.n	800bba8 <_vfiprintf_r+0x48>
 800bd6a:	ab03      	add	r3, sp, #12
 800bd6c:	9300      	str	r3, [sp, #0]
 800bd6e:	462a      	mov	r2, r5
 800bd70:	4b05      	ldr	r3, [pc, #20]	@ (800bd88 <_vfiprintf_r+0x228>)
 800bd72:	a904      	add	r1, sp, #16
 800bd74:	4630      	mov	r0, r6
 800bd76:	f7fc fd87 	bl	8008888 <_printf_i>
 800bd7a:	e7e4      	b.n	800bd46 <_vfiprintf_r+0x1e6>
 800bd7c:	0800ce1a 	.word	0x0800ce1a
 800bd80:	0800ce24 	.word	0x0800ce24
 800bd84:	08008359 	.word	0x08008359
 800bd88:	0800bb3b 	.word	0x0800bb3b
 800bd8c:	0800ce20 	.word	0x0800ce20

0800bd90 <__sflush_r>:
 800bd90:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bd94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd98:	0716      	lsls	r6, r2, #28
 800bd9a:	4605      	mov	r5, r0
 800bd9c:	460c      	mov	r4, r1
 800bd9e:	d454      	bmi.n	800be4a <__sflush_r+0xba>
 800bda0:	684b      	ldr	r3, [r1, #4]
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	dc02      	bgt.n	800bdac <__sflush_r+0x1c>
 800bda6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	dd48      	ble.n	800be3e <__sflush_r+0xae>
 800bdac:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bdae:	2e00      	cmp	r6, #0
 800bdb0:	d045      	beq.n	800be3e <__sflush_r+0xae>
 800bdb2:	2300      	movs	r3, #0
 800bdb4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800bdb8:	682f      	ldr	r7, [r5, #0]
 800bdba:	6a21      	ldr	r1, [r4, #32]
 800bdbc:	602b      	str	r3, [r5, #0]
 800bdbe:	d030      	beq.n	800be22 <__sflush_r+0x92>
 800bdc0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800bdc2:	89a3      	ldrh	r3, [r4, #12]
 800bdc4:	0759      	lsls	r1, r3, #29
 800bdc6:	d505      	bpl.n	800bdd4 <__sflush_r+0x44>
 800bdc8:	6863      	ldr	r3, [r4, #4]
 800bdca:	1ad2      	subs	r2, r2, r3
 800bdcc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800bdce:	b10b      	cbz	r3, 800bdd4 <__sflush_r+0x44>
 800bdd0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800bdd2:	1ad2      	subs	r2, r2, r3
 800bdd4:	2300      	movs	r3, #0
 800bdd6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bdd8:	6a21      	ldr	r1, [r4, #32]
 800bdda:	4628      	mov	r0, r5
 800bddc:	47b0      	blx	r6
 800bdde:	1c43      	adds	r3, r0, #1
 800bde0:	89a3      	ldrh	r3, [r4, #12]
 800bde2:	d106      	bne.n	800bdf2 <__sflush_r+0x62>
 800bde4:	6829      	ldr	r1, [r5, #0]
 800bde6:	291d      	cmp	r1, #29
 800bde8:	d82b      	bhi.n	800be42 <__sflush_r+0xb2>
 800bdea:	4a2a      	ldr	r2, [pc, #168]	@ (800be94 <__sflush_r+0x104>)
 800bdec:	40ca      	lsrs	r2, r1
 800bdee:	07d6      	lsls	r6, r2, #31
 800bdf0:	d527      	bpl.n	800be42 <__sflush_r+0xb2>
 800bdf2:	2200      	movs	r2, #0
 800bdf4:	6062      	str	r2, [r4, #4]
 800bdf6:	04d9      	lsls	r1, r3, #19
 800bdf8:	6922      	ldr	r2, [r4, #16]
 800bdfa:	6022      	str	r2, [r4, #0]
 800bdfc:	d504      	bpl.n	800be08 <__sflush_r+0x78>
 800bdfe:	1c42      	adds	r2, r0, #1
 800be00:	d101      	bne.n	800be06 <__sflush_r+0x76>
 800be02:	682b      	ldr	r3, [r5, #0]
 800be04:	b903      	cbnz	r3, 800be08 <__sflush_r+0x78>
 800be06:	6560      	str	r0, [r4, #84]	@ 0x54
 800be08:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800be0a:	602f      	str	r7, [r5, #0]
 800be0c:	b1b9      	cbz	r1, 800be3e <__sflush_r+0xae>
 800be0e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800be12:	4299      	cmp	r1, r3
 800be14:	d002      	beq.n	800be1c <__sflush_r+0x8c>
 800be16:	4628      	mov	r0, r5
 800be18:	f7fe f96e 	bl	800a0f8 <_free_r>
 800be1c:	2300      	movs	r3, #0
 800be1e:	6363      	str	r3, [r4, #52]	@ 0x34
 800be20:	e00d      	b.n	800be3e <__sflush_r+0xae>
 800be22:	2301      	movs	r3, #1
 800be24:	4628      	mov	r0, r5
 800be26:	47b0      	blx	r6
 800be28:	4602      	mov	r2, r0
 800be2a:	1c50      	adds	r0, r2, #1
 800be2c:	d1c9      	bne.n	800bdc2 <__sflush_r+0x32>
 800be2e:	682b      	ldr	r3, [r5, #0]
 800be30:	2b00      	cmp	r3, #0
 800be32:	d0c6      	beq.n	800bdc2 <__sflush_r+0x32>
 800be34:	2b1d      	cmp	r3, #29
 800be36:	d001      	beq.n	800be3c <__sflush_r+0xac>
 800be38:	2b16      	cmp	r3, #22
 800be3a:	d11e      	bne.n	800be7a <__sflush_r+0xea>
 800be3c:	602f      	str	r7, [r5, #0]
 800be3e:	2000      	movs	r0, #0
 800be40:	e022      	b.n	800be88 <__sflush_r+0xf8>
 800be42:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800be46:	b21b      	sxth	r3, r3
 800be48:	e01b      	b.n	800be82 <__sflush_r+0xf2>
 800be4a:	690f      	ldr	r7, [r1, #16]
 800be4c:	2f00      	cmp	r7, #0
 800be4e:	d0f6      	beq.n	800be3e <__sflush_r+0xae>
 800be50:	0793      	lsls	r3, r2, #30
 800be52:	680e      	ldr	r6, [r1, #0]
 800be54:	bf08      	it	eq
 800be56:	694b      	ldreq	r3, [r1, #20]
 800be58:	600f      	str	r7, [r1, #0]
 800be5a:	bf18      	it	ne
 800be5c:	2300      	movne	r3, #0
 800be5e:	eba6 0807 	sub.w	r8, r6, r7
 800be62:	608b      	str	r3, [r1, #8]
 800be64:	f1b8 0f00 	cmp.w	r8, #0
 800be68:	dde9      	ble.n	800be3e <__sflush_r+0xae>
 800be6a:	6a21      	ldr	r1, [r4, #32]
 800be6c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800be6e:	4643      	mov	r3, r8
 800be70:	463a      	mov	r2, r7
 800be72:	4628      	mov	r0, r5
 800be74:	47b0      	blx	r6
 800be76:	2800      	cmp	r0, #0
 800be78:	dc08      	bgt.n	800be8c <__sflush_r+0xfc>
 800be7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800be7e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800be82:	81a3      	strh	r3, [r4, #12]
 800be84:	f04f 30ff 	mov.w	r0, #4294967295
 800be88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be8c:	4407      	add	r7, r0
 800be8e:	eba8 0800 	sub.w	r8, r8, r0
 800be92:	e7e7      	b.n	800be64 <__sflush_r+0xd4>
 800be94:	20400001 	.word	0x20400001

0800be98 <_fflush_r>:
 800be98:	b538      	push	{r3, r4, r5, lr}
 800be9a:	690b      	ldr	r3, [r1, #16]
 800be9c:	4605      	mov	r5, r0
 800be9e:	460c      	mov	r4, r1
 800bea0:	b913      	cbnz	r3, 800bea8 <_fflush_r+0x10>
 800bea2:	2500      	movs	r5, #0
 800bea4:	4628      	mov	r0, r5
 800bea6:	bd38      	pop	{r3, r4, r5, pc}
 800bea8:	b118      	cbz	r0, 800beb2 <_fflush_r+0x1a>
 800beaa:	6a03      	ldr	r3, [r0, #32]
 800beac:	b90b      	cbnz	r3, 800beb2 <_fflush_r+0x1a>
 800beae:	f7fd f8a3 	bl	8008ff8 <__sinit>
 800beb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d0f3      	beq.n	800bea2 <_fflush_r+0xa>
 800beba:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800bebc:	07d0      	lsls	r0, r2, #31
 800bebe:	d404      	bmi.n	800beca <_fflush_r+0x32>
 800bec0:	0599      	lsls	r1, r3, #22
 800bec2:	d402      	bmi.n	800beca <_fflush_r+0x32>
 800bec4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bec6:	f7fd fab4 	bl	8009432 <__retarget_lock_acquire_recursive>
 800beca:	4628      	mov	r0, r5
 800becc:	4621      	mov	r1, r4
 800bece:	f7ff ff5f 	bl	800bd90 <__sflush_r>
 800bed2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bed4:	07da      	lsls	r2, r3, #31
 800bed6:	4605      	mov	r5, r0
 800bed8:	d4e4      	bmi.n	800bea4 <_fflush_r+0xc>
 800beda:	89a3      	ldrh	r3, [r4, #12]
 800bedc:	059b      	lsls	r3, r3, #22
 800bede:	d4e1      	bmi.n	800bea4 <_fflush_r+0xc>
 800bee0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bee2:	f7fd faa7 	bl	8009434 <__retarget_lock_release_recursive>
 800bee6:	e7dd      	b.n	800bea4 <_fflush_r+0xc>

0800bee8 <__swhatbuf_r>:
 800bee8:	b570      	push	{r4, r5, r6, lr}
 800beea:	460c      	mov	r4, r1
 800beec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bef0:	2900      	cmp	r1, #0
 800bef2:	b096      	sub	sp, #88	@ 0x58
 800bef4:	4615      	mov	r5, r2
 800bef6:	461e      	mov	r6, r3
 800bef8:	da0d      	bge.n	800bf16 <__swhatbuf_r+0x2e>
 800befa:	89a3      	ldrh	r3, [r4, #12]
 800befc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800bf00:	f04f 0100 	mov.w	r1, #0
 800bf04:	bf14      	ite	ne
 800bf06:	2340      	movne	r3, #64	@ 0x40
 800bf08:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800bf0c:	2000      	movs	r0, #0
 800bf0e:	6031      	str	r1, [r6, #0]
 800bf10:	602b      	str	r3, [r5, #0]
 800bf12:	b016      	add	sp, #88	@ 0x58
 800bf14:	bd70      	pop	{r4, r5, r6, pc}
 800bf16:	466a      	mov	r2, sp
 800bf18:	f000 f874 	bl	800c004 <_fstat_r>
 800bf1c:	2800      	cmp	r0, #0
 800bf1e:	dbec      	blt.n	800befa <__swhatbuf_r+0x12>
 800bf20:	9901      	ldr	r1, [sp, #4]
 800bf22:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800bf26:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800bf2a:	4259      	negs	r1, r3
 800bf2c:	4159      	adcs	r1, r3
 800bf2e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bf32:	e7eb      	b.n	800bf0c <__swhatbuf_r+0x24>

0800bf34 <__smakebuf_r>:
 800bf34:	898b      	ldrh	r3, [r1, #12]
 800bf36:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bf38:	079d      	lsls	r5, r3, #30
 800bf3a:	4606      	mov	r6, r0
 800bf3c:	460c      	mov	r4, r1
 800bf3e:	d507      	bpl.n	800bf50 <__smakebuf_r+0x1c>
 800bf40:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800bf44:	6023      	str	r3, [r4, #0]
 800bf46:	6123      	str	r3, [r4, #16]
 800bf48:	2301      	movs	r3, #1
 800bf4a:	6163      	str	r3, [r4, #20]
 800bf4c:	b003      	add	sp, #12
 800bf4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bf50:	ab01      	add	r3, sp, #4
 800bf52:	466a      	mov	r2, sp
 800bf54:	f7ff ffc8 	bl	800bee8 <__swhatbuf_r>
 800bf58:	9f00      	ldr	r7, [sp, #0]
 800bf5a:	4605      	mov	r5, r0
 800bf5c:	4639      	mov	r1, r7
 800bf5e:	4630      	mov	r0, r6
 800bf60:	f7fe f93e 	bl	800a1e0 <_malloc_r>
 800bf64:	b948      	cbnz	r0, 800bf7a <__smakebuf_r+0x46>
 800bf66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bf6a:	059a      	lsls	r2, r3, #22
 800bf6c:	d4ee      	bmi.n	800bf4c <__smakebuf_r+0x18>
 800bf6e:	f023 0303 	bic.w	r3, r3, #3
 800bf72:	f043 0302 	orr.w	r3, r3, #2
 800bf76:	81a3      	strh	r3, [r4, #12]
 800bf78:	e7e2      	b.n	800bf40 <__smakebuf_r+0xc>
 800bf7a:	89a3      	ldrh	r3, [r4, #12]
 800bf7c:	6020      	str	r0, [r4, #0]
 800bf7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bf82:	81a3      	strh	r3, [r4, #12]
 800bf84:	9b01      	ldr	r3, [sp, #4]
 800bf86:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800bf8a:	b15b      	cbz	r3, 800bfa4 <__smakebuf_r+0x70>
 800bf8c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bf90:	4630      	mov	r0, r6
 800bf92:	f000 f849 	bl	800c028 <_isatty_r>
 800bf96:	b128      	cbz	r0, 800bfa4 <__smakebuf_r+0x70>
 800bf98:	89a3      	ldrh	r3, [r4, #12]
 800bf9a:	f023 0303 	bic.w	r3, r3, #3
 800bf9e:	f043 0301 	orr.w	r3, r3, #1
 800bfa2:	81a3      	strh	r3, [r4, #12]
 800bfa4:	89a3      	ldrh	r3, [r4, #12]
 800bfa6:	431d      	orrs	r5, r3
 800bfa8:	81a5      	strh	r5, [r4, #12]
 800bfaa:	e7cf      	b.n	800bf4c <__smakebuf_r+0x18>

0800bfac <memmove>:
 800bfac:	4288      	cmp	r0, r1
 800bfae:	b510      	push	{r4, lr}
 800bfb0:	eb01 0402 	add.w	r4, r1, r2
 800bfb4:	d902      	bls.n	800bfbc <memmove+0x10>
 800bfb6:	4284      	cmp	r4, r0
 800bfb8:	4623      	mov	r3, r4
 800bfba:	d807      	bhi.n	800bfcc <memmove+0x20>
 800bfbc:	1e43      	subs	r3, r0, #1
 800bfbe:	42a1      	cmp	r1, r4
 800bfc0:	d008      	beq.n	800bfd4 <memmove+0x28>
 800bfc2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bfc6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bfca:	e7f8      	b.n	800bfbe <memmove+0x12>
 800bfcc:	4402      	add	r2, r0
 800bfce:	4601      	mov	r1, r0
 800bfd0:	428a      	cmp	r2, r1
 800bfd2:	d100      	bne.n	800bfd6 <memmove+0x2a>
 800bfd4:	bd10      	pop	{r4, pc}
 800bfd6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bfda:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bfde:	e7f7      	b.n	800bfd0 <memmove+0x24>

0800bfe0 <strncmp>:
 800bfe0:	b510      	push	{r4, lr}
 800bfe2:	b16a      	cbz	r2, 800c000 <strncmp+0x20>
 800bfe4:	3901      	subs	r1, #1
 800bfe6:	1884      	adds	r4, r0, r2
 800bfe8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bfec:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800bff0:	429a      	cmp	r2, r3
 800bff2:	d103      	bne.n	800bffc <strncmp+0x1c>
 800bff4:	42a0      	cmp	r0, r4
 800bff6:	d001      	beq.n	800bffc <strncmp+0x1c>
 800bff8:	2a00      	cmp	r2, #0
 800bffa:	d1f5      	bne.n	800bfe8 <strncmp+0x8>
 800bffc:	1ad0      	subs	r0, r2, r3
 800bffe:	bd10      	pop	{r4, pc}
 800c000:	4610      	mov	r0, r2
 800c002:	e7fc      	b.n	800bffe <strncmp+0x1e>

0800c004 <_fstat_r>:
 800c004:	b538      	push	{r3, r4, r5, lr}
 800c006:	4d07      	ldr	r5, [pc, #28]	@ (800c024 <_fstat_r+0x20>)
 800c008:	2300      	movs	r3, #0
 800c00a:	4604      	mov	r4, r0
 800c00c:	4608      	mov	r0, r1
 800c00e:	4611      	mov	r1, r2
 800c010:	602b      	str	r3, [r5, #0]
 800c012:	f7f6 fdb1 	bl	8002b78 <_fstat>
 800c016:	1c43      	adds	r3, r0, #1
 800c018:	d102      	bne.n	800c020 <_fstat_r+0x1c>
 800c01a:	682b      	ldr	r3, [r5, #0]
 800c01c:	b103      	cbz	r3, 800c020 <_fstat_r+0x1c>
 800c01e:	6023      	str	r3, [r4, #0]
 800c020:	bd38      	pop	{r3, r4, r5, pc}
 800c022:	bf00      	nop
 800c024:	200007ac 	.word	0x200007ac

0800c028 <_isatty_r>:
 800c028:	b538      	push	{r3, r4, r5, lr}
 800c02a:	4d06      	ldr	r5, [pc, #24]	@ (800c044 <_isatty_r+0x1c>)
 800c02c:	2300      	movs	r3, #0
 800c02e:	4604      	mov	r4, r0
 800c030:	4608      	mov	r0, r1
 800c032:	602b      	str	r3, [r5, #0]
 800c034:	f7f6 fdb0 	bl	8002b98 <_isatty>
 800c038:	1c43      	adds	r3, r0, #1
 800c03a:	d102      	bne.n	800c042 <_isatty_r+0x1a>
 800c03c:	682b      	ldr	r3, [r5, #0]
 800c03e:	b103      	cbz	r3, 800c042 <_isatty_r+0x1a>
 800c040:	6023      	str	r3, [r4, #0]
 800c042:	bd38      	pop	{r3, r4, r5, pc}
 800c044:	200007ac 	.word	0x200007ac

0800c048 <_sbrk_r>:
 800c048:	b538      	push	{r3, r4, r5, lr}
 800c04a:	4d06      	ldr	r5, [pc, #24]	@ (800c064 <_sbrk_r+0x1c>)
 800c04c:	2300      	movs	r3, #0
 800c04e:	4604      	mov	r4, r0
 800c050:	4608      	mov	r0, r1
 800c052:	602b      	str	r3, [r5, #0]
 800c054:	f7f6 fdb8 	bl	8002bc8 <_sbrk>
 800c058:	1c43      	adds	r3, r0, #1
 800c05a:	d102      	bne.n	800c062 <_sbrk_r+0x1a>
 800c05c:	682b      	ldr	r3, [r5, #0]
 800c05e:	b103      	cbz	r3, 800c062 <_sbrk_r+0x1a>
 800c060:	6023      	str	r3, [r4, #0]
 800c062:	bd38      	pop	{r3, r4, r5, pc}
 800c064:	200007ac 	.word	0x200007ac

0800c068 <memcpy>:
 800c068:	440a      	add	r2, r1
 800c06a:	4291      	cmp	r1, r2
 800c06c:	f100 33ff 	add.w	r3, r0, #4294967295
 800c070:	d100      	bne.n	800c074 <memcpy+0xc>
 800c072:	4770      	bx	lr
 800c074:	b510      	push	{r4, lr}
 800c076:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c07a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c07e:	4291      	cmp	r1, r2
 800c080:	d1f9      	bne.n	800c076 <memcpy+0xe>
 800c082:	bd10      	pop	{r4, pc}
 800c084:	0000      	movs	r0, r0
	...

0800c088 <nan>:
 800c088:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800c090 <nan+0x8>
 800c08c:	4770      	bx	lr
 800c08e:	bf00      	nop
 800c090:	00000000 	.word	0x00000000
 800c094:	7ff80000 	.word	0x7ff80000

0800c098 <__assert_func>:
 800c098:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c09a:	4614      	mov	r4, r2
 800c09c:	461a      	mov	r2, r3
 800c09e:	4b09      	ldr	r3, [pc, #36]	@ (800c0c4 <__assert_func+0x2c>)
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	4605      	mov	r5, r0
 800c0a4:	68d8      	ldr	r0, [r3, #12]
 800c0a6:	b14c      	cbz	r4, 800c0bc <__assert_func+0x24>
 800c0a8:	4b07      	ldr	r3, [pc, #28]	@ (800c0c8 <__assert_func+0x30>)
 800c0aa:	9100      	str	r1, [sp, #0]
 800c0ac:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c0b0:	4906      	ldr	r1, [pc, #24]	@ (800c0cc <__assert_func+0x34>)
 800c0b2:	462b      	mov	r3, r5
 800c0b4:	f000 fba8 	bl	800c808 <fiprintf>
 800c0b8:	f000 fbb8 	bl	800c82c <abort>
 800c0bc:	4b04      	ldr	r3, [pc, #16]	@ (800c0d0 <__assert_func+0x38>)
 800c0be:	461c      	mov	r4, r3
 800c0c0:	e7f3      	b.n	800c0aa <__assert_func+0x12>
 800c0c2:	bf00      	nop
 800c0c4:	20000064 	.word	0x20000064
 800c0c8:	0800ce33 	.word	0x0800ce33
 800c0cc:	0800ce40 	.word	0x0800ce40
 800c0d0:	0800ce6e 	.word	0x0800ce6e

0800c0d4 <_calloc_r>:
 800c0d4:	b570      	push	{r4, r5, r6, lr}
 800c0d6:	fba1 5402 	umull	r5, r4, r1, r2
 800c0da:	b934      	cbnz	r4, 800c0ea <_calloc_r+0x16>
 800c0dc:	4629      	mov	r1, r5
 800c0de:	f7fe f87f 	bl	800a1e0 <_malloc_r>
 800c0e2:	4606      	mov	r6, r0
 800c0e4:	b928      	cbnz	r0, 800c0f2 <_calloc_r+0x1e>
 800c0e6:	4630      	mov	r0, r6
 800c0e8:	bd70      	pop	{r4, r5, r6, pc}
 800c0ea:	220c      	movs	r2, #12
 800c0ec:	6002      	str	r2, [r0, #0]
 800c0ee:	2600      	movs	r6, #0
 800c0f0:	e7f9      	b.n	800c0e6 <_calloc_r+0x12>
 800c0f2:	462a      	mov	r2, r5
 800c0f4:	4621      	mov	r1, r4
 800c0f6:	f7fd f91f 	bl	8009338 <memset>
 800c0fa:	e7f4      	b.n	800c0e6 <_calloc_r+0x12>

0800c0fc <rshift>:
 800c0fc:	6903      	ldr	r3, [r0, #16]
 800c0fe:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c102:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c106:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c10a:	f100 0414 	add.w	r4, r0, #20
 800c10e:	dd45      	ble.n	800c19c <rshift+0xa0>
 800c110:	f011 011f 	ands.w	r1, r1, #31
 800c114:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c118:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c11c:	d10c      	bne.n	800c138 <rshift+0x3c>
 800c11e:	f100 0710 	add.w	r7, r0, #16
 800c122:	4629      	mov	r1, r5
 800c124:	42b1      	cmp	r1, r6
 800c126:	d334      	bcc.n	800c192 <rshift+0x96>
 800c128:	1a9b      	subs	r3, r3, r2
 800c12a:	009b      	lsls	r3, r3, #2
 800c12c:	1eea      	subs	r2, r5, #3
 800c12e:	4296      	cmp	r6, r2
 800c130:	bf38      	it	cc
 800c132:	2300      	movcc	r3, #0
 800c134:	4423      	add	r3, r4
 800c136:	e015      	b.n	800c164 <rshift+0x68>
 800c138:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c13c:	f1c1 0820 	rsb	r8, r1, #32
 800c140:	40cf      	lsrs	r7, r1
 800c142:	f105 0e04 	add.w	lr, r5, #4
 800c146:	46a1      	mov	r9, r4
 800c148:	4576      	cmp	r6, lr
 800c14a:	46f4      	mov	ip, lr
 800c14c:	d815      	bhi.n	800c17a <rshift+0x7e>
 800c14e:	1a9a      	subs	r2, r3, r2
 800c150:	0092      	lsls	r2, r2, #2
 800c152:	3a04      	subs	r2, #4
 800c154:	3501      	adds	r5, #1
 800c156:	42ae      	cmp	r6, r5
 800c158:	bf38      	it	cc
 800c15a:	2200      	movcc	r2, #0
 800c15c:	18a3      	adds	r3, r4, r2
 800c15e:	50a7      	str	r7, [r4, r2]
 800c160:	b107      	cbz	r7, 800c164 <rshift+0x68>
 800c162:	3304      	adds	r3, #4
 800c164:	1b1a      	subs	r2, r3, r4
 800c166:	42a3      	cmp	r3, r4
 800c168:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c16c:	bf08      	it	eq
 800c16e:	2300      	moveq	r3, #0
 800c170:	6102      	str	r2, [r0, #16]
 800c172:	bf08      	it	eq
 800c174:	6143      	streq	r3, [r0, #20]
 800c176:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c17a:	f8dc c000 	ldr.w	ip, [ip]
 800c17e:	fa0c fc08 	lsl.w	ip, ip, r8
 800c182:	ea4c 0707 	orr.w	r7, ip, r7
 800c186:	f849 7b04 	str.w	r7, [r9], #4
 800c18a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c18e:	40cf      	lsrs	r7, r1
 800c190:	e7da      	b.n	800c148 <rshift+0x4c>
 800c192:	f851 cb04 	ldr.w	ip, [r1], #4
 800c196:	f847 cf04 	str.w	ip, [r7, #4]!
 800c19a:	e7c3      	b.n	800c124 <rshift+0x28>
 800c19c:	4623      	mov	r3, r4
 800c19e:	e7e1      	b.n	800c164 <rshift+0x68>

0800c1a0 <__hexdig_fun>:
 800c1a0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800c1a4:	2b09      	cmp	r3, #9
 800c1a6:	d802      	bhi.n	800c1ae <__hexdig_fun+0xe>
 800c1a8:	3820      	subs	r0, #32
 800c1aa:	b2c0      	uxtb	r0, r0
 800c1ac:	4770      	bx	lr
 800c1ae:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800c1b2:	2b05      	cmp	r3, #5
 800c1b4:	d801      	bhi.n	800c1ba <__hexdig_fun+0x1a>
 800c1b6:	3847      	subs	r0, #71	@ 0x47
 800c1b8:	e7f7      	b.n	800c1aa <__hexdig_fun+0xa>
 800c1ba:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800c1be:	2b05      	cmp	r3, #5
 800c1c0:	d801      	bhi.n	800c1c6 <__hexdig_fun+0x26>
 800c1c2:	3827      	subs	r0, #39	@ 0x27
 800c1c4:	e7f1      	b.n	800c1aa <__hexdig_fun+0xa>
 800c1c6:	2000      	movs	r0, #0
 800c1c8:	4770      	bx	lr
	...

0800c1cc <__gethex>:
 800c1cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1d0:	b085      	sub	sp, #20
 800c1d2:	468a      	mov	sl, r1
 800c1d4:	9302      	str	r3, [sp, #8]
 800c1d6:	680b      	ldr	r3, [r1, #0]
 800c1d8:	9001      	str	r0, [sp, #4]
 800c1da:	4690      	mov	r8, r2
 800c1dc:	1c9c      	adds	r4, r3, #2
 800c1de:	46a1      	mov	r9, r4
 800c1e0:	f814 0b01 	ldrb.w	r0, [r4], #1
 800c1e4:	2830      	cmp	r0, #48	@ 0x30
 800c1e6:	d0fa      	beq.n	800c1de <__gethex+0x12>
 800c1e8:	eba9 0303 	sub.w	r3, r9, r3
 800c1ec:	f1a3 0b02 	sub.w	fp, r3, #2
 800c1f0:	f7ff ffd6 	bl	800c1a0 <__hexdig_fun>
 800c1f4:	4605      	mov	r5, r0
 800c1f6:	2800      	cmp	r0, #0
 800c1f8:	d168      	bne.n	800c2cc <__gethex+0x100>
 800c1fa:	49a0      	ldr	r1, [pc, #640]	@ (800c47c <__gethex+0x2b0>)
 800c1fc:	2201      	movs	r2, #1
 800c1fe:	4648      	mov	r0, r9
 800c200:	f7ff feee 	bl	800bfe0 <strncmp>
 800c204:	4607      	mov	r7, r0
 800c206:	2800      	cmp	r0, #0
 800c208:	d167      	bne.n	800c2da <__gethex+0x10e>
 800c20a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800c20e:	4626      	mov	r6, r4
 800c210:	f7ff ffc6 	bl	800c1a0 <__hexdig_fun>
 800c214:	2800      	cmp	r0, #0
 800c216:	d062      	beq.n	800c2de <__gethex+0x112>
 800c218:	4623      	mov	r3, r4
 800c21a:	7818      	ldrb	r0, [r3, #0]
 800c21c:	2830      	cmp	r0, #48	@ 0x30
 800c21e:	4699      	mov	r9, r3
 800c220:	f103 0301 	add.w	r3, r3, #1
 800c224:	d0f9      	beq.n	800c21a <__gethex+0x4e>
 800c226:	f7ff ffbb 	bl	800c1a0 <__hexdig_fun>
 800c22a:	fab0 f580 	clz	r5, r0
 800c22e:	096d      	lsrs	r5, r5, #5
 800c230:	f04f 0b01 	mov.w	fp, #1
 800c234:	464a      	mov	r2, r9
 800c236:	4616      	mov	r6, r2
 800c238:	3201      	adds	r2, #1
 800c23a:	7830      	ldrb	r0, [r6, #0]
 800c23c:	f7ff ffb0 	bl	800c1a0 <__hexdig_fun>
 800c240:	2800      	cmp	r0, #0
 800c242:	d1f8      	bne.n	800c236 <__gethex+0x6a>
 800c244:	498d      	ldr	r1, [pc, #564]	@ (800c47c <__gethex+0x2b0>)
 800c246:	2201      	movs	r2, #1
 800c248:	4630      	mov	r0, r6
 800c24a:	f7ff fec9 	bl	800bfe0 <strncmp>
 800c24e:	2800      	cmp	r0, #0
 800c250:	d13f      	bne.n	800c2d2 <__gethex+0x106>
 800c252:	b944      	cbnz	r4, 800c266 <__gethex+0x9a>
 800c254:	1c74      	adds	r4, r6, #1
 800c256:	4622      	mov	r2, r4
 800c258:	4616      	mov	r6, r2
 800c25a:	3201      	adds	r2, #1
 800c25c:	7830      	ldrb	r0, [r6, #0]
 800c25e:	f7ff ff9f 	bl	800c1a0 <__hexdig_fun>
 800c262:	2800      	cmp	r0, #0
 800c264:	d1f8      	bne.n	800c258 <__gethex+0x8c>
 800c266:	1ba4      	subs	r4, r4, r6
 800c268:	00a7      	lsls	r7, r4, #2
 800c26a:	7833      	ldrb	r3, [r6, #0]
 800c26c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800c270:	2b50      	cmp	r3, #80	@ 0x50
 800c272:	d13e      	bne.n	800c2f2 <__gethex+0x126>
 800c274:	7873      	ldrb	r3, [r6, #1]
 800c276:	2b2b      	cmp	r3, #43	@ 0x2b
 800c278:	d033      	beq.n	800c2e2 <__gethex+0x116>
 800c27a:	2b2d      	cmp	r3, #45	@ 0x2d
 800c27c:	d034      	beq.n	800c2e8 <__gethex+0x11c>
 800c27e:	1c71      	adds	r1, r6, #1
 800c280:	2400      	movs	r4, #0
 800c282:	7808      	ldrb	r0, [r1, #0]
 800c284:	f7ff ff8c 	bl	800c1a0 <__hexdig_fun>
 800c288:	1e43      	subs	r3, r0, #1
 800c28a:	b2db      	uxtb	r3, r3
 800c28c:	2b18      	cmp	r3, #24
 800c28e:	d830      	bhi.n	800c2f2 <__gethex+0x126>
 800c290:	f1a0 0210 	sub.w	r2, r0, #16
 800c294:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c298:	f7ff ff82 	bl	800c1a0 <__hexdig_fun>
 800c29c:	f100 3cff 	add.w	ip, r0, #4294967295
 800c2a0:	fa5f fc8c 	uxtb.w	ip, ip
 800c2a4:	f1bc 0f18 	cmp.w	ip, #24
 800c2a8:	f04f 030a 	mov.w	r3, #10
 800c2ac:	d91e      	bls.n	800c2ec <__gethex+0x120>
 800c2ae:	b104      	cbz	r4, 800c2b2 <__gethex+0xe6>
 800c2b0:	4252      	negs	r2, r2
 800c2b2:	4417      	add	r7, r2
 800c2b4:	f8ca 1000 	str.w	r1, [sl]
 800c2b8:	b1ed      	cbz	r5, 800c2f6 <__gethex+0x12a>
 800c2ba:	f1bb 0f00 	cmp.w	fp, #0
 800c2be:	bf0c      	ite	eq
 800c2c0:	2506      	moveq	r5, #6
 800c2c2:	2500      	movne	r5, #0
 800c2c4:	4628      	mov	r0, r5
 800c2c6:	b005      	add	sp, #20
 800c2c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2cc:	2500      	movs	r5, #0
 800c2ce:	462c      	mov	r4, r5
 800c2d0:	e7b0      	b.n	800c234 <__gethex+0x68>
 800c2d2:	2c00      	cmp	r4, #0
 800c2d4:	d1c7      	bne.n	800c266 <__gethex+0x9a>
 800c2d6:	4627      	mov	r7, r4
 800c2d8:	e7c7      	b.n	800c26a <__gethex+0x9e>
 800c2da:	464e      	mov	r6, r9
 800c2dc:	462f      	mov	r7, r5
 800c2de:	2501      	movs	r5, #1
 800c2e0:	e7c3      	b.n	800c26a <__gethex+0x9e>
 800c2e2:	2400      	movs	r4, #0
 800c2e4:	1cb1      	adds	r1, r6, #2
 800c2e6:	e7cc      	b.n	800c282 <__gethex+0xb6>
 800c2e8:	2401      	movs	r4, #1
 800c2ea:	e7fb      	b.n	800c2e4 <__gethex+0x118>
 800c2ec:	fb03 0002 	mla	r0, r3, r2, r0
 800c2f0:	e7ce      	b.n	800c290 <__gethex+0xc4>
 800c2f2:	4631      	mov	r1, r6
 800c2f4:	e7de      	b.n	800c2b4 <__gethex+0xe8>
 800c2f6:	eba6 0309 	sub.w	r3, r6, r9
 800c2fa:	3b01      	subs	r3, #1
 800c2fc:	4629      	mov	r1, r5
 800c2fe:	2b07      	cmp	r3, #7
 800c300:	dc0a      	bgt.n	800c318 <__gethex+0x14c>
 800c302:	9801      	ldr	r0, [sp, #4]
 800c304:	f7fd fff8 	bl	800a2f8 <_Balloc>
 800c308:	4604      	mov	r4, r0
 800c30a:	b940      	cbnz	r0, 800c31e <__gethex+0x152>
 800c30c:	4b5c      	ldr	r3, [pc, #368]	@ (800c480 <__gethex+0x2b4>)
 800c30e:	4602      	mov	r2, r0
 800c310:	21e4      	movs	r1, #228	@ 0xe4
 800c312:	485c      	ldr	r0, [pc, #368]	@ (800c484 <__gethex+0x2b8>)
 800c314:	f7ff fec0 	bl	800c098 <__assert_func>
 800c318:	3101      	adds	r1, #1
 800c31a:	105b      	asrs	r3, r3, #1
 800c31c:	e7ef      	b.n	800c2fe <__gethex+0x132>
 800c31e:	f100 0a14 	add.w	sl, r0, #20
 800c322:	2300      	movs	r3, #0
 800c324:	4655      	mov	r5, sl
 800c326:	469b      	mov	fp, r3
 800c328:	45b1      	cmp	r9, r6
 800c32a:	d337      	bcc.n	800c39c <__gethex+0x1d0>
 800c32c:	f845 bb04 	str.w	fp, [r5], #4
 800c330:	eba5 050a 	sub.w	r5, r5, sl
 800c334:	10ad      	asrs	r5, r5, #2
 800c336:	6125      	str	r5, [r4, #16]
 800c338:	4658      	mov	r0, fp
 800c33a:	f7fe f8cf 	bl	800a4dc <__hi0bits>
 800c33e:	016d      	lsls	r5, r5, #5
 800c340:	f8d8 6000 	ldr.w	r6, [r8]
 800c344:	1a2d      	subs	r5, r5, r0
 800c346:	42b5      	cmp	r5, r6
 800c348:	dd54      	ble.n	800c3f4 <__gethex+0x228>
 800c34a:	1bad      	subs	r5, r5, r6
 800c34c:	4629      	mov	r1, r5
 800c34e:	4620      	mov	r0, r4
 800c350:	f7fe fc5b 	bl	800ac0a <__any_on>
 800c354:	4681      	mov	r9, r0
 800c356:	b178      	cbz	r0, 800c378 <__gethex+0x1ac>
 800c358:	1e6b      	subs	r3, r5, #1
 800c35a:	1159      	asrs	r1, r3, #5
 800c35c:	f003 021f 	and.w	r2, r3, #31
 800c360:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800c364:	f04f 0901 	mov.w	r9, #1
 800c368:	fa09 f202 	lsl.w	r2, r9, r2
 800c36c:	420a      	tst	r2, r1
 800c36e:	d003      	beq.n	800c378 <__gethex+0x1ac>
 800c370:	454b      	cmp	r3, r9
 800c372:	dc36      	bgt.n	800c3e2 <__gethex+0x216>
 800c374:	f04f 0902 	mov.w	r9, #2
 800c378:	4629      	mov	r1, r5
 800c37a:	4620      	mov	r0, r4
 800c37c:	f7ff febe 	bl	800c0fc <rshift>
 800c380:	442f      	add	r7, r5
 800c382:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c386:	42bb      	cmp	r3, r7
 800c388:	da42      	bge.n	800c410 <__gethex+0x244>
 800c38a:	9801      	ldr	r0, [sp, #4]
 800c38c:	4621      	mov	r1, r4
 800c38e:	f7fd fff3 	bl	800a378 <_Bfree>
 800c392:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c394:	2300      	movs	r3, #0
 800c396:	6013      	str	r3, [r2, #0]
 800c398:	25a3      	movs	r5, #163	@ 0xa3
 800c39a:	e793      	b.n	800c2c4 <__gethex+0xf8>
 800c39c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800c3a0:	2a2e      	cmp	r2, #46	@ 0x2e
 800c3a2:	d012      	beq.n	800c3ca <__gethex+0x1fe>
 800c3a4:	2b20      	cmp	r3, #32
 800c3a6:	d104      	bne.n	800c3b2 <__gethex+0x1e6>
 800c3a8:	f845 bb04 	str.w	fp, [r5], #4
 800c3ac:	f04f 0b00 	mov.w	fp, #0
 800c3b0:	465b      	mov	r3, fp
 800c3b2:	7830      	ldrb	r0, [r6, #0]
 800c3b4:	9303      	str	r3, [sp, #12]
 800c3b6:	f7ff fef3 	bl	800c1a0 <__hexdig_fun>
 800c3ba:	9b03      	ldr	r3, [sp, #12]
 800c3bc:	f000 000f 	and.w	r0, r0, #15
 800c3c0:	4098      	lsls	r0, r3
 800c3c2:	ea4b 0b00 	orr.w	fp, fp, r0
 800c3c6:	3304      	adds	r3, #4
 800c3c8:	e7ae      	b.n	800c328 <__gethex+0x15c>
 800c3ca:	45b1      	cmp	r9, r6
 800c3cc:	d8ea      	bhi.n	800c3a4 <__gethex+0x1d8>
 800c3ce:	492b      	ldr	r1, [pc, #172]	@ (800c47c <__gethex+0x2b0>)
 800c3d0:	9303      	str	r3, [sp, #12]
 800c3d2:	2201      	movs	r2, #1
 800c3d4:	4630      	mov	r0, r6
 800c3d6:	f7ff fe03 	bl	800bfe0 <strncmp>
 800c3da:	9b03      	ldr	r3, [sp, #12]
 800c3dc:	2800      	cmp	r0, #0
 800c3de:	d1e1      	bne.n	800c3a4 <__gethex+0x1d8>
 800c3e0:	e7a2      	b.n	800c328 <__gethex+0x15c>
 800c3e2:	1ea9      	subs	r1, r5, #2
 800c3e4:	4620      	mov	r0, r4
 800c3e6:	f7fe fc10 	bl	800ac0a <__any_on>
 800c3ea:	2800      	cmp	r0, #0
 800c3ec:	d0c2      	beq.n	800c374 <__gethex+0x1a8>
 800c3ee:	f04f 0903 	mov.w	r9, #3
 800c3f2:	e7c1      	b.n	800c378 <__gethex+0x1ac>
 800c3f4:	da09      	bge.n	800c40a <__gethex+0x23e>
 800c3f6:	1b75      	subs	r5, r6, r5
 800c3f8:	4621      	mov	r1, r4
 800c3fa:	9801      	ldr	r0, [sp, #4]
 800c3fc:	462a      	mov	r2, r5
 800c3fe:	f7fe f9cb 	bl	800a798 <__lshift>
 800c402:	1b7f      	subs	r7, r7, r5
 800c404:	4604      	mov	r4, r0
 800c406:	f100 0a14 	add.w	sl, r0, #20
 800c40a:	f04f 0900 	mov.w	r9, #0
 800c40e:	e7b8      	b.n	800c382 <__gethex+0x1b6>
 800c410:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800c414:	42bd      	cmp	r5, r7
 800c416:	dd6f      	ble.n	800c4f8 <__gethex+0x32c>
 800c418:	1bed      	subs	r5, r5, r7
 800c41a:	42ae      	cmp	r6, r5
 800c41c:	dc34      	bgt.n	800c488 <__gethex+0x2bc>
 800c41e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c422:	2b02      	cmp	r3, #2
 800c424:	d022      	beq.n	800c46c <__gethex+0x2a0>
 800c426:	2b03      	cmp	r3, #3
 800c428:	d024      	beq.n	800c474 <__gethex+0x2a8>
 800c42a:	2b01      	cmp	r3, #1
 800c42c:	d115      	bne.n	800c45a <__gethex+0x28e>
 800c42e:	42ae      	cmp	r6, r5
 800c430:	d113      	bne.n	800c45a <__gethex+0x28e>
 800c432:	2e01      	cmp	r6, #1
 800c434:	d10b      	bne.n	800c44e <__gethex+0x282>
 800c436:	9a02      	ldr	r2, [sp, #8]
 800c438:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c43c:	6013      	str	r3, [r2, #0]
 800c43e:	2301      	movs	r3, #1
 800c440:	6123      	str	r3, [r4, #16]
 800c442:	f8ca 3000 	str.w	r3, [sl]
 800c446:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c448:	2562      	movs	r5, #98	@ 0x62
 800c44a:	601c      	str	r4, [r3, #0]
 800c44c:	e73a      	b.n	800c2c4 <__gethex+0xf8>
 800c44e:	1e71      	subs	r1, r6, #1
 800c450:	4620      	mov	r0, r4
 800c452:	f7fe fbda 	bl	800ac0a <__any_on>
 800c456:	2800      	cmp	r0, #0
 800c458:	d1ed      	bne.n	800c436 <__gethex+0x26a>
 800c45a:	9801      	ldr	r0, [sp, #4]
 800c45c:	4621      	mov	r1, r4
 800c45e:	f7fd ff8b 	bl	800a378 <_Bfree>
 800c462:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c464:	2300      	movs	r3, #0
 800c466:	6013      	str	r3, [r2, #0]
 800c468:	2550      	movs	r5, #80	@ 0x50
 800c46a:	e72b      	b.n	800c2c4 <__gethex+0xf8>
 800c46c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d1f3      	bne.n	800c45a <__gethex+0x28e>
 800c472:	e7e0      	b.n	800c436 <__gethex+0x26a>
 800c474:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c476:	2b00      	cmp	r3, #0
 800c478:	d1dd      	bne.n	800c436 <__gethex+0x26a>
 800c47a:	e7ee      	b.n	800c45a <__gethex+0x28e>
 800c47c:	0800ce18 	.word	0x0800ce18
 800c480:	0800cdae 	.word	0x0800cdae
 800c484:	0800ce6f 	.word	0x0800ce6f
 800c488:	1e6f      	subs	r7, r5, #1
 800c48a:	f1b9 0f00 	cmp.w	r9, #0
 800c48e:	d130      	bne.n	800c4f2 <__gethex+0x326>
 800c490:	b127      	cbz	r7, 800c49c <__gethex+0x2d0>
 800c492:	4639      	mov	r1, r7
 800c494:	4620      	mov	r0, r4
 800c496:	f7fe fbb8 	bl	800ac0a <__any_on>
 800c49a:	4681      	mov	r9, r0
 800c49c:	117a      	asrs	r2, r7, #5
 800c49e:	2301      	movs	r3, #1
 800c4a0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800c4a4:	f007 071f 	and.w	r7, r7, #31
 800c4a8:	40bb      	lsls	r3, r7
 800c4aa:	4213      	tst	r3, r2
 800c4ac:	4629      	mov	r1, r5
 800c4ae:	4620      	mov	r0, r4
 800c4b0:	bf18      	it	ne
 800c4b2:	f049 0902 	orrne.w	r9, r9, #2
 800c4b6:	f7ff fe21 	bl	800c0fc <rshift>
 800c4ba:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800c4be:	1b76      	subs	r6, r6, r5
 800c4c0:	2502      	movs	r5, #2
 800c4c2:	f1b9 0f00 	cmp.w	r9, #0
 800c4c6:	d047      	beq.n	800c558 <__gethex+0x38c>
 800c4c8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c4cc:	2b02      	cmp	r3, #2
 800c4ce:	d015      	beq.n	800c4fc <__gethex+0x330>
 800c4d0:	2b03      	cmp	r3, #3
 800c4d2:	d017      	beq.n	800c504 <__gethex+0x338>
 800c4d4:	2b01      	cmp	r3, #1
 800c4d6:	d109      	bne.n	800c4ec <__gethex+0x320>
 800c4d8:	f019 0f02 	tst.w	r9, #2
 800c4dc:	d006      	beq.n	800c4ec <__gethex+0x320>
 800c4de:	f8da 3000 	ldr.w	r3, [sl]
 800c4e2:	ea49 0903 	orr.w	r9, r9, r3
 800c4e6:	f019 0f01 	tst.w	r9, #1
 800c4ea:	d10e      	bne.n	800c50a <__gethex+0x33e>
 800c4ec:	f045 0510 	orr.w	r5, r5, #16
 800c4f0:	e032      	b.n	800c558 <__gethex+0x38c>
 800c4f2:	f04f 0901 	mov.w	r9, #1
 800c4f6:	e7d1      	b.n	800c49c <__gethex+0x2d0>
 800c4f8:	2501      	movs	r5, #1
 800c4fa:	e7e2      	b.n	800c4c2 <__gethex+0x2f6>
 800c4fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c4fe:	f1c3 0301 	rsb	r3, r3, #1
 800c502:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c504:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c506:	2b00      	cmp	r3, #0
 800c508:	d0f0      	beq.n	800c4ec <__gethex+0x320>
 800c50a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c50e:	f104 0314 	add.w	r3, r4, #20
 800c512:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800c516:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800c51a:	f04f 0c00 	mov.w	ip, #0
 800c51e:	4618      	mov	r0, r3
 800c520:	f853 2b04 	ldr.w	r2, [r3], #4
 800c524:	f1b2 3fff 	cmp.w	r2, #4294967295
 800c528:	d01b      	beq.n	800c562 <__gethex+0x396>
 800c52a:	3201      	adds	r2, #1
 800c52c:	6002      	str	r2, [r0, #0]
 800c52e:	2d02      	cmp	r5, #2
 800c530:	f104 0314 	add.w	r3, r4, #20
 800c534:	d13c      	bne.n	800c5b0 <__gethex+0x3e4>
 800c536:	f8d8 2000 	ldr.w	r2, [r8]
 800c53a:	3a01      	subs	r2, #1
 800c53c:	42b2      	cmp	r2, r6
 800c53e:	d109      	bne.n	800c554 <__gethex+0x388>
 800c540:	1171      	asrs	r1, r6, #5
 800c542:	2201      	movs	r2, #1
 800c544:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c548:	f006 061f 	and.w	r6, r6, #31
 800c54c:	fa02 f606 	lsl.w	r6, r2, r6
 800c550:	421e      	tst	r6, r3
 800c552:	d13a      	bne.n	800c5ca <__gethex+0x3fe>
 800c554:	f045 0520 	orr.w	r5, r5, #32
 800c558:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c55a:	601c      	str	r4, [r3, #0]
 800c55c:	9b02      	ldr	r3, [sp, #8]
 800c55e:	601f      	str	r7, [r3, #0]
 800c560:	e6b0      	b.n	800c2c4 <__gethex+0xf8>
 800c562:	4299      	cmp	r1, r3
 800c564:	f843 cc04 	str.w	ip, [r3, #-4]
 800c568:	d8d9      	bhi.n	800c51e <__gethex+0x352>
 800c56a:	68a3      	ldr	r3, [r4, #8]
 800c56c:	459b      	cmp	fp, r3
 800c56e:	db17      	blt.n	800c5a0 <__gethex+0x3d4>
 800c570:	6861      	ldr	r1, [r4, #4]
 800c572:	9801      	ldr	r0, [sp, #4]
 800c574:	3101      	adds	r1, #1
 800c576:	f7fd febf 	bl	800a2f8 <_Balloc>
 800c57a:	4681      	mov	r9, r0
 800c57c:	b918      	cbnz	r0, 800c586 <__gethex+0x3ba>
 800c57e:	4b1a      	ldr	r3, [pc, #104]	@ (800c5e8 <__gethex+0x41c>)
 800c580:	4602      	mov	r2, r0
 800c582:	2184      	movs	r1, #132	@ 0x84
 800c584:	e6c5      	b.n	800c312 <__gethex+0x146>
 800c586:	6922      	ldr	r2, [r4, #16]
 800c588:	3202      	adds	r2, #2
 800c58a:	f104 010c 	add.w	r1, r4, #12
 800c58e:	0092      	lsls	r2, r2, #2
 800c590:	300c      	adds	r0, #12
 800c592:	f7ff fd69 	bl	800c068 <memcpy>
 800c596:	4621      	mov	r1, r4
 800c598:	9801      	ldr	r0, [sp, #4]
 800c59a:	f7fd feed 	bl	800a378 <_Bfree>
 800c59e:	464c      	mov	r4, r9
 800c5a0:	6923      	ldr	r3, [r4, #16]
 800c5a2:	1c5a      	adds	r2, r3, #1
 800c5a4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c5a8:	6122      	str	r2, [r4, #16]
 800c5aa:	2201      	movs	r2, #1
 800c5ac:	615a      	str	r2, [r3, #20]
 800c5ae:	e7be      	b.n	800c52e <__gethex+0x362>
 800c5b0:	6922      	ldr	r2, [r4, #16]
 800c5b2:	455a      	cmp	r2, fp
 800c5b4:	dd0b      	ble.n	800c5ce <__gethex+0x402>
 800c5b6:	2101      	movs	r1, #1
 800c5b8:	4620      	mov	r0, r4
 800c5ba:	f7ff fd9f 	bl	800c0fc <rshift>
 800c5be:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c5c2:	3701      	adds	r7, #1
 800c5c4:	42bb      	cmp	r3, r7
 800c5c6:	f6ff aee0 	blt.w	800c38a <__gethex+0x1be>
 800c5ca:	2501      	movs	r5, #1
 800c5cc:	e7c2      	b.n	800c554 <__gethex+0x388>
 800c5ce:	f016 061f 	ands.w	r6, r6, #31
 800c5d2:	d0fa      	beq.n	800c5ca <__gethex+0x3fe>
 800c5d4:	4453      	add	r3, sl
 800c5d6:	f1c6 0620 	rsb	r6, r6, #32
 800c5da:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800c5de:	f7fd ff7d 	bl	800a4dc <__hi0bits>
 800c5e2:	42b0      	cmp	r0, r6
 800c5e4:	dbe7      	blt.n	800c5b6 <__gethex+0x3ea>
 800c5e6:	e7f0      	b.n	800c5ca <__gethex+0x3fe>
 800c5e8:	0800cdae 	.word	0x0800cdae

0800c5ec <L_shift>:
 800c5ec:	f1c2 0208 	rsb	r2, r2, #8
 800c5f0:	0092      	lsls	r2, r2, #2
 800c5f2:	b570      	push	{r4, r5, r6, lr}
 800c5f4:	f1c2 0620 	rsb	r6, r2, #32
 800c5f8:	6843      	ldr	r3, [r0, #4]
 800c5fa:	6804      	ldr	r4, [r0, #0]
 800c5fc:	fa03 f506 	lsl.w	r5, r3, r6
 800c600:	432c      	orrs	r4, r5
 800c602:	40d3      	lsrs	r3, r2
 800c604:	6004      	str	r4, [r0, #0]
 800c606:	f840 3f04 	str.w	r3, [r0, #4]!
 800c60a:	4288      	cmp	r0, r1
 800c60c:	d3f4      	bcc.n	800c5f8 <L_shift+0xc>
 800c60e:	bd70      	pop	{r4, r5, r6, pc}

0800c610 <__match>:
 800c610:	b530      	push	{r4, r5, lr}
 800c612:	6803      	ldr	r3, [r0, #0]
 800c614:	3301      	adds	r3, #1
 800c616:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c61a:	b914      	cbnz	r4, 800c622 <__match+0x12>
 800c61c:	6003      	str	r3, [r0, #0]
 800c61e:	2001      	movs	r0, #1
 800c620:	bd30      	pop	{r4, r5, pc}
 800c622:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c626:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800c62a:	2d19      	cmp	r5, #25
 800c62c:	bf98      	it	ls
 800c62e:	3220      	addls	r2, #32
 800c630:	42a2      	cmp	r2, r4
 800c632:	d0f0      	beq.n	800c616 <__match+0x6>
 800c634:	2000      	movs	r0, #0
 800c636:	e7f3      	b.n	800c620 <__match+0x10>

0800c638 <__hexnan>:
 800c638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c63c:	680b      	ldr	r3, [r1, #0]
 800c63e:	6801      	ldr	r1, [r0, #0]
 800c640:	115e      	asrs	r6, r3, #5
 800c642:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c646:	f013 031f 	ands.w	r3, r3, #31
 800c64a:	b087      	sub	sp, #28
 800c64c:	bf18      	it	ne
 800c64e:	3604      	addne	r6, #4
 800c650:	2500      	movs	r5, #0
 800c652:	1f37      	subs	r7, r6, #4
 800c654:	4682      	mov	sl, r0
 800c656:	4690      	mov	r8, r2
 800c658:	9301      	str	r3, [sp, #4]
 800c65a:	f846 5c04 	str.w	r5, [r6, #-4]
 800c65e:	46b9      	mov	r9, r7
 800c660:	463c      	mov	r4, r7
 800c662:	9502      	str	r5, [sp, #8]
 800c664:	46ab      	mov	fp, r5
 800c666:	784a      	ldrb	r2, [r1, #1]
 800c668:	1c4b      	adds	r3, r1, #1
 800c66a:	9303      	str	r3, [sp, #12]
 800c66c:	b342      	cbz	r2, 800c6c0 <__hexnan+0x88>
 800c66e:	4610      	mov	r0, r2
 800c670:	9105      	str	r1, [sp, #20]
 800c672:	9204      	str	r2, [sp, #16]
 800c674:	f7ff fd94 	bl	800c1a0 <__hexdig_fun>
 800c678:	2800      	cmp	r0, #0
 800c67a:	d151      	bne.n	800c720 <__hexnan+0xe8>
 800c67c:	9a04      	ldr	r2, [sp, #16]
 800c67e:	9905      	ldr	r1, [sp, #20]
 800c680:	2a20      	cmp	r2, #32
 800c682:	d818      	bhi.n	800c6b6 <__hexnan+0x7e>
 800c684:	9b02      	ldr	r3, [sp, #8]
 800c686:	459b      	cmp	fp, r3
 800c688:	dd13      	ble.n	800c6b2 <__hexnan+0x7a>
 800c68a:	454c      	cmp	r4, r9
 800c68c:	d206      	bcs.n	800c69c <__hexnan+0x64>
 800c68e:	2d07      	cmp	r5, #7
 800c690:	dc04      	bgt.n	800c69c <__hexnan+0x64>
 800c692:	462a      	mov	r2, r5
 800c694:	4649      	mov	r1, r9
 800c696:	4620      	mov	r0, r4
 800c698:	f7ff ffa8 	bl	800c5ec <L_shift>
 800c69c:	4544      	cmp	r4, r8
 800c69e:	d952      	bls.n	800c746 <__hexnan+0x10e>
 800c6a0:	2300      	movs	r3, #0
 800c6a2:	f1a4 0904 	sub.w	r9, r4, #4
 800c6a6:	f844 3c04 	str.w	r3, [r4, #-4]
 800c6aa:	f8cd b008 	str.w	fp, [sp, #8]
 800c6ae:	464c      	mov	r4, r9
 800c6b0:	461d      	mov	r5, r3
 800c6b2:	9903      	ldr	r1, [sp, #12]
 800c6b4:	e7d7      	b.n	800c666 <__hexnan+0x2e>
 800c6b6:	2a29      	cmp	r2, #41	@ 0x29
 800c6b8:	d157      	bne.n	800c76a <__hexnan+0x132>
 800c6ba:	3102      	adds	r1, #2
 800c6bc:	f8ca 1000 	str.w	r1, [sl]
 800c6c0:	f1bb 0f00 	cmp.w	fp, #0
 800c6c4:	d051      	beq.n	800c76a <__hexnan+0x132>
 800c6c6:	454c      	cmp	r4, r9
 800c6c8:	d206      	bcs.n	800c6d8 <__hexnan+0xa0>
 800c6ca:	2d07      	cmp	r5, #7
 800c6cc:	dc04      	bgt.n	800c6d8 <__hexnan+0xa0>
 800c6ce:	462a      	mov	r2, r5
 800c6d0:	4649      	mov	r1, r9
 800c6d2:	4620      	mov	r0, r4
 800c6d4:	f7ff ff8a 	bl	800c5ec <L_shift>
 800c6d8:	4544      	cmp	r4, r8
 800c6da:	d936      	bls.n	800c74a <__hexnan+0x112>
 800c6dc:	f1a8 0204 	sub.w	r2, r8, #4
 800c6e0:	4623      	mov	r3, r4
 800c6e2:	f853 1b04 	ldr.w	r1, [r3], #4
 800c6e6:	f842 1f04 	str.w	r1, [r2, #4]!
 800c6ea:	429f      	cmp	r7, r3
 800c6ec:	d2f9      	bcs.n	800c6e2 <__hexnan+0xaa>
 800c6ee:	1b3b      	subs	r3, r7, r4
 800c6f0:	f023 0303 	bic.w	r3, r3, #3
 800c6f4:	3304      	adds	r3, #4
 800c6f6:	3401      	adds	r4, #1
 800c6f8:	3e03      	subs	r6, #3
 800c6fa:	42b4      	cmp	r4, r6
 800c6fc:	bf88      	it	hi
 800c6fe:	2304      	movhi	r3, #4
 800c700:	4443      	add	r3, r8
 800c702:	2200      	movs	r2, #0
 800c704:	f843 2b04 	str.w	r2, [r3], #4
 800c708:	429f      	cmp	r7, r3
 800c70a:	d2fb      	bcs.n	800c704 <__hexnan+0xcc>
 800c70c:	683b      	ldr	r3, [r7, #0]
 800c70e:	b91b      	cbnz	r3, 800c718 <__hexnan+0xe0>
 800c710:	4547      	cmp	r7, r8
 800c712:	d128      	bne.n	800c766 <__hexnan+0x12e>
 800c714:	2301      	movs	r3, #1
 800c716:	603b      	str	r3, [r7, #0]
 800c718:	2005      	movs	r0, #5
 800c71a:	b007      	add	sp, #28
 800c71c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c720:	3501      	adds	r5, #1
 800c722:	2d08      	cmp	r5, #8
 800c724:	f10b 0b01 	add.w	fp, fp, #1
 800c728:	dd06      	ble.n	800c738 <__hexnan+0x100>
 800c72a:	4544      	cmp	r4, r8
 800c72c:	d9c1      	bls.n	800c6b2 <__hexnan+0x7a>
 800c72e:	2300      	movs	r3, #0
 800c730:	f844 3c04 	str.w	r3, [r4, #-4]
 800c734:	2501      	movs	r5, #1
 800c736:	3c04      	subs	r4, #4
 800c738:	6822      	ldr	r2, [r4, #0]
 800c73a:	f000 000f 	and.w	r0, r0, #15
 800c73e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800c742:	6020      	str	r0, [r4, #0]
 800c744:	e7b5      	b.n	800c6b2 <__hexnan+0x7a>
 800c746:	2508      	movs	r5, #8
 800c748:	e7b3      	b.n	800c6b2 <__hexnan+0x7a>
 800c74a:	9b01      	ldr	r3, [sp, #4]
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	d0dd      	beq.n	800c70c <__hexnan+0xd4>
 800c750:	f1c3 0320 	rsb	r3, r3, #32
 800c754:	f04f 32ff 	mov.w	r2, #4294967295
 800c758:	40da      	lsrs	r2, r3
 800c75a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800c75e:	4013      	ands	r3, r2
 800c760:	f846 3c04 	str.w	r3, [r6, #-4]
 800c764:	e7d2      	b.n	800c70c <__hexnan+0xd4>
 800c766:	3f04      	subs	r7, #4
 800c768:	e7d0      	b.n	800c70c <__hexnan+0xd4>
 800c76a:	2004      	movs	r0, #4
 800c76c:	e7d5      	b.n	800c71a <__hexnan+0xe2>

0800c76e <__ascii_mbtowc>:
 800c76e:	b082      	sub	sp, #8
 800c770:	b901      	cbnz	r1, 800c774 <__ascii_mbtowc+0x6>
 800c772:	a901      	add	r1, sp, #4
 800c774:	b142      	cbz	r2, 800c788 <__ascii_mbtowc+0x1a>
 800c776:	b14b      	cbz	r3, 800c78c <__ascii_mbtowc+0x1e>
 800c778:	7813      	ldrb	r3, [r2, #0]
 800c77a:	600b      	str	r3, [r1, #0]
 800c77c:	7812      	ldrb	r2, [r2, #0]
 800c77e:	1e10      	subs	r0, r2, #0
 800c780:	bf18      	it	ne
 800c782:	2001      	movne	r0, #1
 800c784:	b002      	add	sp, #8
 800c786:	4770      	bx	lr
 800c788:	4610      	mov	r0, r2
 800c78a:	e7fb      	b.n	800c784 <__ascii_mbtowc+0x16>
 800c78c:	f06f 0001 	mvn.w	r0, #1
 800c790:	e7f8      	b.n	800c784 <__ascii_mbtowc+0x16>

0800c792 <_realloc_r>:
 800c792:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c796:	4607      	mov	r7, r0
 800c798:	4614      	mov	r4, r2
 800c79a:	460d      	mov	r5, r1
 800c79c:	b921      	cbnz	r1, 800c7a8 <_realloc_r+0x16>
 800c79e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c7a2:	4611      	mov	r1, r2
 800c7a4:	f7fd bd1c 	b.w	800a1e0 <_malloc_r>
 800c7a8:	b92a      	cbnz	r2, 800c7b6 <_realloc_r+0x24>
 800c7aa:	f7fd fca5 	bl	800a0f8 <_free_r>
 800c7ae:	4625      	mov	r5, r4
 800c7b0:	4628      	mov	r0, r5
 800c7b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c7b6:	f000 f840 	bl	800c83a <_malloc_usable_size_r>
 800c7ba:	4284      	cmp	r4, r0
 800c7bc:	4606      	mov	r6, r0
 800c7be:	d802      	bhi.n	800c7c6 <_realloc_r+0x34>
 800c7c0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c7c4:	d8f4      	bhi.n	800c7b0 <_realloc_r+0x1e>
 800c7c6:	4621      	mov	r1, r4
 800c7c8:	4638      	mov	r0, r7
 800c7ca:	f7fd fd09 	bl	800a1e0 <_malloc_r>
 800c7ce:	4680      	mov	r8, r0
 800c7d0:	b908      	cbnz	r0, 800c7d6 <_realloc_r+0x44>
 800c7d2:	4645      	mov	r5, r8
 800c7d4:	e7ec      	b.n	800c7b0 <_realloc_r+0x1e>
 800c7d6:	42b4      	cmp	r4, r6
 800c7d8:	4622      	mov	r2, r4
 800c7da:	4629      	mov	r1, r5
 800c7dc:	bf28      	it	cs
 800c7de:	4632      	movcs	r2, r6
 800c7e0:	f7ff fc42 	bl	800c068 <memcpy>
 800c7e4:	4629      	mov	r1, r5
 800c7e6:	4638      	mov	r0, r7
 800c7e8:	f7fd fc86 	bl	800a0f8 <_free_r>
 800c7ec:	e7f1      	b.n	800c7d2 <_realloc_r+0x40>

0800c7ee <__ascii_wctomb>:
 800c7ee:	4603      	mov	r3, r0
 800c7f0:	4608      	mov	r0, r1
 800c7f2:	b141      	cbz	r1, 800c806 <__ascii_wctomb+0x18>
 800c7f4:	2aff      	cmp	r2, #255	@ 0xff
 800c7f6:	d904      	bls.n	800c802 <__ascii_wctomb+0x14>
 800c7f8:	228a      	movs	r2, #138	@ 0x8a
 800c7fa:	601a      	str	r2, [r3, #0]
 800c7fc:	f04f 30ff 	mov.w	r0, #4294967295
 800c800:	4770      	bx	lr
 800c802:	700a      	strb	r2, [r1, #0]
 800c804:	2001      	movs	r0, #1
 800c806:	4770      	bx	lr

0800c808 <fiprintf>:
 800c808:	b40e      	push	{r1, r2, r3}
 800c80a:	b503      	push	{r0, r1, lr}
 800c80c:	4601      	mov	r1, r0
 800c80e:	ab03      	add	r3, sp, #12
 800c810:	4805      	ldr	r0, [pc, #20]	@ (800c828 <fiprintf+0x20>)
 800c812:	f853 2b04 	ldr.w	r2, [r3], #4
 800c816:	6800      	ldr	r0, [r0, #0]
 800c818:	9301      	str	r3, [sp, #4]
 800c81a:	f7ff f9a1 	bl	800bb60 <_vfiprintf_r>
 800c81e:	b002      	add	sp, #8
 800c820:	f85d eb04 	ldr.w	lr, [sp], #4
 800c824:	b003      	add	sp, #12
 800c826:	4770      	bx	lr
 800c828:	20000064 	.word	0x20000064

0800c82c <abort>:
 800c82c:	b508      	push	{r3, lr}
 800c82e:	2006      	movs	r0, #6
 800c830:	f000 f834 	bl	800c89c <raise>
 800c834:	2001      	movs	r0, #1
 800c836:	f7f6 f94f 	bl	8002ad8 <_exit>

0800c83a <_malloc_usable_size_r>:
 800c83a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c83e:	1f18      	subs	r0, r3, #4
 800c840:	2b00      	cmp	r3, #0
 800c842:	bfbc      	itt	lt
 800c844:	580b      	ldrlt	r3, [r1, r0]
 800c846:	18c0      	addlt	r0, r0, r3
 800c848:	4770      	bx	lr

0800c84a <_raise_r>:
 800c84a:	291f      	cmp	r1, #31
 800c84c:	b538      	push	{r3, r4, r5, lr}
 800c84e:	4605      	mov	r5, r0
 800c850:	460c      	mov	r4, r1
 800c852:	d904      	bls.n	800c85e <_raise_r+0x14>
 800c854:	2316      	movs	r3, #22
 800c856:	6003      	str	r3, [r0, #0]
 800c858:	f04f 30ff 	mov.w	r0, #4294967295
 800c85c:	bd38      	pop	{r3, r4, r5, pc}
 800c85e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c860:	b112      	cbz	r2, 800c868 <_raise_r+0x1e>
 800c862:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c866:	b94b      	cbnz	r3, 800c87c <_raise_r+0x32>
 800c868:	4628      	mov	r0, r5
 800c86a:	f000 f831 	bl	800c8d0 <_getpid_r>
 800c86e:	4622      	mov	r2, r4
 800c870:	4601      	mov	r1, r0
 800c872:	4628      	mov	r0, r5
 800c874:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c878:	f000 b818 	b.w	800c8ac <_kill_r>
 800c87c:	2b01      	cmp	r3, #1
 800c87e:	d00a      	beq.n	800c896 <_raise_r+0x4c>
 800c880:	1c59      	adds	r1, r3, #1
 800c882:	d103      	bne.n	800c88c <_raise_r+0x42>
 800c884:	2316      	movs	r3, #22
 800c886:	6003      	str	r3, [r0, #0]
 800c888:	2001      	movs	r0, #1
 800c88a:	e7e7      	b.n	800c85c <_raise_r+0x12>
 800c88c:	2100      	movs	r1, #0
 800c88e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c892:	4620      	mov	r0, r4
 800c894:	4798      	blx	r3
 800c896:	2000      	movs	r0, #0
 800c898:	e7e0      	b.n	800c85c <_raise_r+0x12>
	...

0800c89c <raise>:
 800c89c:	4b02      	ldr	r3, [pc, #8]	@ (800c8a8 <raise+0xc>)
 800c89e:	4601      	mov	r1, r0
 800c8a0:	6818      	ldr	r0, [r3, #0]
 800c8a2:	f7ff bfd2 	b.w	800c84a <_raise_r>
 800c8a6:	bf00      	nop
 800c8a8:	20000064 	.word	0x20000064

0800c8ac <_kill_r>:
 800c8ac:	b538      	push	{r3, r4, r5, lr}
 800c8ae:	4d07      	ldr	r5, [pc, #28]	@ (800c8cc <_kill_r+0x20>)
 800c8b0:	2300      	movs	r3, #0
 800c8b2:	4604      	mov	r4, r0
 800c8b4:	4608      	mov	r0, r1
 800c8b6:	4611      	mov	r1, r2
 800c8b8:	602b      	str	r3, [r5, #0]
 800c8ba:	f7f6 f8fd 	bl	8002ab8 <_kill>
 800c8be:	1c43      	adds	r3, r0, #1
 800c8c0:	d102      	bne.n	800c8c8 <_kill_r+0x1c>
 800c8c2:	682b      	ldr	r3, [r5, #0]
 800c8c4:	b103      	cbz	r3, 800c8c8 <_kill_r+0x1c>
 800c8c6:	6023      	str	r3, [r4, #0]
 800c8c8:	bd38      	pop	{r3, r4, r5, pc}
 800c8ca:	bf00      	nop
 800c8cc:	200007ac 	.word	0x200007ac

0800c8d0 <_getpid_r>:
 800c8d0:	f7f6 b8ea 	b.w	8002aa8 <_getpid>

0800c8d4 <_init>:
 800c8d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8d6:	bf00      	nop
 800c8d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c8da:	bc08      	pop	{r3}
 800c8dc:	469e      	mov	lr, r3
 800c8de:	4770      	bx	lr

0800c8e0 <_fini>:
 800c8e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8e2:	bf00      	nop
 800c8e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c8e6:	bc08      	pop	{r3}
 800c8e8:	469e      	mov	lr, r3
 800c8ea:	4770      	bx	lr
